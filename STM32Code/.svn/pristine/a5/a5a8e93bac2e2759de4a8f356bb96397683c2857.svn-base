#include <stm32f4xx.h>
#include <rtthread.h>
#include "AP_Math.h"

#define MAV_TYPE_GIMBAL 26
#define	MAV_COMP_ID_IMU 200
#define MAV_COMP_ID_CONTROLLER 70
#define MAV_COMP_ID_ROLL_MOTOR 71
#define MAV_COMP_ID_PITCH_MOTOR 72
#define MAV_COMP_ID_YAW_MOTOR 73

#define MAV_CMD_DO_SET_PARAMETER 180

#define X25_INIT_CRC 0xffff
#define X25_VALIDATE_CRC 0xf0b8


#define MAVLINK_STX 0xFE
#define MAX_MAV_LENTH 256

#define MAVLINK_XBEE_RX_STX 1
#define MAVLINK_XBEE_RX_PLTH 2
#define MAVLINK_XBEE_RX_PSEQ 3
#define MAVLINK_XBEE_RX_SYSID 4
#define MAVLINK_XBEE_RX_COMPID 5
#define MAVLINK_XBEE_RX_MSGID 6
#define MAVLINK_XBEE_RX_DATA 7
#define MAVLINK_XBEE_RX_CRCL 8
#define MAVLINK_XBEE_RX_CRCH 9
#define MAVLINK_XBEE_RX_STOP 0

// ATTITUDE_QUATERNION PACKING INFO
#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION 31

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN 32
#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_MIN_LEN 32
#define MAVLINK_MSG_ID_31_LEN 32
#define MAVLINK_MSG_ID_31_MIN_LEN 32

#define MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC 246
#define MAVLINK_MSG_ID_31_CRC 246

// ATTITUDE PACKING INFO
#define MAVLINK_MSG_ID_ATTITUDE 30

#define MAVLINK_MSG_ID_ATTITUDE_LEN 28
#define MAVLINK_MSG_ID_ATTITUDE_MIN_LEN 28
#define MAVLINK_MSG_ID_30_LEN 28
#define MAVLINK_MSG_ID_30_MIN_LEN 28

#define MAVLINK_MSG_ID_ATTITUDE_CRC 39
#define MAVLINK_MSG_ID_30_CRC 39

// CONTROL PARAMETER PACKING INFO
#define MAVLINK_MSG_ID_CONTROL_PARAM MAV_CMD_DO_SET_PARAMETER

#define MAVLINK_MSG_ID_CONTROL_PARAM_LEN 29
#define MAVLINK_MSG_ID_CONTROL_PARAM_MIN_LEN 29
#define MAVLINK_MSG_ID_180_LEN 29
#define MAVLINK_MSG_ID_180_MIN_LEN 29

#define MAVLINK_MSG_ID_CONTROL_PARAM_CRC 70
#define MAVLINK_MSG_ID_180_CRC 70

#define MAVLINK_MSG_ID_CONTROL_PARAM_AXIS_ROLL 0
#define MAVLINK_MSG_ID_CONTROL_PARAM_AXIS_PITCH 1
#define MAVLINK_MSG_ID_CONTROL_PARAM_AXIS_YAW 2

// EFFICIENT DATA PACKING INFO
#define MAVLINK_MSG_ID_EFF_DATA 77
#define MAVLINK_MSG_ID_EFF_DATA_LEN 22
#define MAVLINK_MSG_ID_EFF_DATA_CRC 19

#define MAVLINK_AX_ROLL 0
#define MAVLINK_AX_PITCH 1
#define MAVLINK_AX_YAW 2

// Controller and motor readtime params info
#define MAVLINK_MSG_ID_CM_RT_DATA  79
#define MAVLINK_MSG_ID_CM_RT_DATA_LEN  48
#define MAVLINK_MSG_ID_CM_RT_DATA_CRC    49

// Motor state params info
#define MAVLINK_MSG_ID_MOTOR_STATE_DATA 80
#define MAVLINK_MSG_ID_MOTOR_STATE_DATA_LEN 28
#define MAVLINK_MSG_ID_MOTOR_STATE_DATA_CRC 50

// Controller config data info
#define MAVLINK_MSG_ID_CONTROLLER_CONFIG_DATA 81
#define MAVLINK_MSG_ID_CONTROLLER_CONFIG_DATA_LEN 96
#define MAVLINK_MSG_ID_CONTROLLER_CONFIG_DATA_CRC 51

// Motors config data info
#define MAVLINK_MSG_ID_MOTORS_CONFIG_DATA 82
#define MAVLINK_MSG_ID_MOTORS_CONFIG_DATA_LEN 60
#define MAVLINK_MSG_ID_MOTORS_CONFIG_DATA_CRC 52

// Write cmd data info
#define MAVLINK_MSG_ID_WRITE_PARAM_DATA 83
#define MAVLINK_MSG_ID_WRITE_PARAM_DATA_LEN 8
#define MAVLINK_MSG_ID_WRITE_PARAM_DATA_CRC 53

// Read cmd data info
#define MAVLINK_MSG_ID_READ_PARAM_DATA 84
#define MAVLINK_MSG_ID_READ_PARAM_DATA_LEN 8
#define MAVLINK_MSG_ID_READ_PARAM_DATA_CRC 54


// Control command
// Gimbal control
// param_id(short) value(short) value(short) value(short) 
// param_id:
// 0:  set angle     roll pitch yaw
// 1:  axis control  roll pitch yaw
// 2:  speed limit   roll pitch yaw
// 3:  dead zone     roll pitch yaw
// 4:  angle limit   roll pitch yaw
// 5:  imu beta      read/write(0/1) value None
#define MAVLINK_MSG_ID_GIMBAL_CONTROL  85
#define MAVLINK_MSG_ID_GIMBAL_CONTROL_LEN  13
#define MAVLINK_MSG_ID_GIMBAL_CONTROL_CRC  55
// Gimbal Main Command
// int
// 0: tracking mode
// 1: free mode
// 2: return zero
// 3: zero calibration
// 4: imu calibration
// 5: controller auto calibration
// 6: disable motors output
#define MAVLINK_MSG_ID_GIMBAL_MAIN_COMMAND  86
#define MAVLINK_MSG_ID_GIMBAL_MAIN_COMMAND_LEN  4
#define MAVLINK_MSG_ID_GIMBAL_MAIN_COMMAND_CRC  56



enum
{
		MAVLINK_PARAM_RATE_P,
		MAVLINK_PARAM_RATE_I,
		MAVLINK_PARAM_RATE_D,
		MAVLINK_PARAM_RATE_I_MAX,
		MAVLINK_PARAM_RATE_F_HZ,
		MAVLINK_PARAM_STAB_P,
		MAVLINK_PARAM_STAB_D,
	  KILL,
};



typedef struct
{
	uint8_t stx;
	uint8_t	payload_lth;
	uint8_t packet_seq;
	uint8_t sys_id;
	uint8_t comp_id;
	uint8_t msg_id;
	uint8_t data[MAX_MAV_LENTH];
	uint8_t crcl;
	uint8_t crch;
}Mavlink_msg_t;

typedef struct
{
	uint8_t component_id;
	uint8_t data_type;
	uint8_t last_data_type;
	float write;
	uint8_t multi_param;
	uint8_t msg_cnt;
	uint8_t msg_total;
}Mavlink_decode_info;

typedef struct
{
	uint32_t param_id;
	float param_value;
	uint8_t dev_id;
}__attribute__((packed)) Mavlink_param_t;

typedef struct {
 uint32_t time_boot_ms; /*< Timestamp (milliseconds since system boot)*/
 float q1; /*< Quaternion component 1, w (1 in null-rotation)*/
 float q2; /*< Quaternion component 2, x (0 in null-rotation)*/
 float q3; /*< Quaternion component 3, y (0 in null-rotation)*/
 float q4; /*< Quaternion component 4, z (0 in null-rotation)*/
 float rollspeed; /*< Roll angular speed (rad/s)*/
 float pitchspeed; /*< Pitch angular speed (rad/s)*/
 float yawspeed; /*< Yaw angular speed (rad/s)*/
} Mavlink_attitude_quaternion_t ;

typedef struct {
 uint32_t time_boot_ms; /*< Timestamp (milliseconds since system boot)*/
 float roll; /*< Roll angle (rad, -pi..+pi)*/
 float pitch; /*< Pitch angle (rad, -pi..+pi)*/
 float yaw; /*< Yaw angle (rad, -pi..+pi)*/
 float rollspeed; /*< Roll angular speed (rad/s)*/
 float pitchspeed; /*< Pitch angular speed (rad/s)*/
 float yawspeed; /*< Yaw angular speed (rad/s)*/
} Mavlink_attitude_t;

typedef struct {
	uint8_t axis_id;
	float rate_p;
	float rate_i;
	float rate_d;
	float rate_i_max;
	float rate_filt_hz;
	float stabilize_p;
	float stabilize_d;
} Mavlink_control_param_t;

typedef struct {
	uint8_t axis_id;
	uint8_t param_id;
	float param;
	float q0;
	float q1;
	float q2;
	float q3;
}__attribute__((packed)) Mavlink_efficient_data_t;

typedef struct {
	float q0;
	float q1;
	float q2;
	float q3;
	float NTC_Tempre;
	float avg_motor_current;
	float avg_input_current;
	float duty_cycle_now;
	float rpm;
  float input_voltage;
	float tachometer_value;
	float tachometer_abs_value;
}__attribute__((packed)) Mavlink_controller_motor_realtime_data_t;
	
typedef struct {
	float encoder;
	float bus_current;
	float bus_voltage;
	float q_current;
	float d_current;
  float temperature;
	float motor_speed;
}__attribute__((packed)) Mavlink_motor_state_data_t;

typedef struct {
	float roll_rate_p;
	float roll_rate_i;
	float roll_rate_d;
	float roll_rate_max_i;
	float roll_f_hz;
	float roll_stab_p;
	float roll_stab_d;
	float roll_speed_limit;
	
	float pitch_rate_p;
	float pitch_rate_i;
	float pitch_rate_d;
	float pitch_rate_max_i;
	float pitch_f_hz;
	float pitch_stab_p;
	float pitch_stab_d;
	float pitch_speed_limit;
	
	float yaw_rate_p;
	float yaw_rate_i;
	float yaw_rate_d;
	float yaw_rate_max_i;
	float yaw_f_hz;
	float yaw_stab_p;
	float yaw_stab_d;
	float yaw_speed_limit;
}__attribute__((packed)) Mavlink_controller_config_data_t;

typedef struct {
	float roll_pid_torque_reference;
	float roll_pid_torque_kp;
	float roll_pid_torque_ki;
	float roll_pid_torque_kd;
	float roll_pid_flux_reference;
	float roll_pid_flux_kp;
	float roll_pid_flux_ki;
	float roll_pid_flux_kd;
	float roll_tf_kpdiv;
	float roll_tf_kidiv;
	float roll_tf_kddiv;
	float roll_open_loop_speed;
	float roll_pole_pairs;
	float roll_enc_invert;
	float roll_enc_mechanical_angle_bias;
}__attribute__((packed)) Mavlink_motors_config_data_t;


typedef struct {
	uint8_t  param_id;
	float    value1;
	float    value2;
	float    value3;
}__attribute__((packed)) Mavlink_gimbal_control_data_t;

typedef struct {
	int command;
}__attribute__((packed)) Mavlink_gimbal_main_command_data_t;
	

enum Mavlink_data_type_t
{
	MAVLINK_ATTITUDE_QUAT_TYPE = 0,
	MAVLINK_MOTOR_STATE_TYPE,
	MAVLINK_CONTROLLER_CONFIG_TYPE,
	MAVLINK_MOTOR_CONFIG_TYPE,
	MAVLINK_WRITE_PARAM_TYPE,
	MAVLINK_READ_PARAM_TYPE,
	MAVLINK_GIMBAL_CONTROL_TYPE,
	MAVLINK_GIMBAL_COMMAND_TYPE,
	NONE,
};

class Mavlink
{
	public:
		uint8_t eff_ax_update;
	  uint8_t eff_param_update;
	  Mavlink()
    {
			eff_ax_update = 0;
			eff_param_update = 0;
    }			
		uint16_t attitude_quaternion_pack(uint8_t system_id, uint8_t component_id, Mavlink_msg_t* msg, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed);
		void attitude_quaternion_decode(const Mavlink_msg_t* msg, Mavlink_attitude_quaternion_t* attitude_quaternion);
																									
		uint16_t attitude_pack(uint8_t system_id, uint8_t component_id, Mavlink_msg_t* msg, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed);
		void attitude_decode(const Mavlink_msg_t* msg, Mavlink_attitude_t* attitude);		

		uint16_t control_param_pack(uint8_t system_id, uint8_t component_id, Mavlink_msg_t* msg,
																uint8_t axis_id, float rate_p, float rate_i, float rate_d, float rate_i_max, float rate_filt_hz,
																float stabilize_p, float stabilize_d);
		void control_param_decode(const Mavlink_msg_t* msg, Mavlink_control_param_t* control_param);		

	  uint16_t efficient_data_packing(uint8_t system_id, uint8_t component_id, Mavlink_msg_t* msg,
																 uint8_t axis_id, uint8_t param_id, float param,
																 float q0, float q1, float q2, float q3);
																 
		void efficient_data_decode(const Mavlink_msg_t* msg, Mavlink_efficient_data_t* efficient_data);
		
		void update_eff_param();
																 
		uint16_t controller_motor_realtime_data_packing(uint8_t system_id, uint8_t component_id, Mavlink_msg_t* msg,
                                                         float q0, float q1, float q2, float q3, float * params);
																 
		uint16_t motor_state_data_packing(uint8_t system_id, uint8_t component_id, Mavlink_msg_t* msg,
																      Mavlink_motor_state_data_t *pck);
																 
		uint16_t controller_config_data_packing(uint8_t system_id, uint8_t component_id, Mavlink_msg_t* msg,
																            Mavlink_controller_config_data_t *pck);
																 
		uint16_t motors_config_data_packing(uint8_t system_id, uint8_t component_id, Mavlink_msg_t* msg,
																        Mavlink_motors_config_data_t *pck);
		
		// Decode gimbal control command
		// Return the gimbal param_id which will be controlled
		uint8_t gimbal_control_data_decode(const Mavlink_msg_t* msg, Vector3f* vec);
																 
		// Decode gimbal main command 
		// Return the command id 
		int gimbal_command_data_decode(const Mavlink_msg_t* msg);
	
	private:
		void crc_accumulate(uint8_t data, uint16_t *crcAccum);
	  void crc_init(uint16_t* crcAccum);
	  uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length);
	  void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length);
	  uint16_t mavlink_crc_get(Mavlink_msg_t* msg, uint8_t crc_extra);
	
};
		



	  
	
	  
	




















