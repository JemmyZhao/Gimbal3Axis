#ifndef __ATTITUDE_H__
#define __ATTITUDE_H__

#ifdef __cplusplus

#include "mpu6500.h"
#include "filter.h"
#include "attitude_filter.h"
#include "bmm150.h"
#include "AccelCal.h"
#include "ekf.h"

#define USING_MADGWICK
//#define USING_EKF



#define FILTER_NUM 			    10       //滑动平均滤波数值个数

enum
{
    A_X = 0,
    A_Y,
    A_Z,
    G_Y,
    G_X,
    G_Z,
    TEM,
    ITEMS,
};

class Attitude
{
private:

    int16_t FILT_BUF[ITEMS][(FILTER_NUM + 1)];
    
    uint8_t filter_cnt,filter_cnt_old;
    float mpu_fil_tmp[ITEMS];

    Vector3f FILTER_FIFO[FILTER_NUM];
    float FILTER_FIFO_TEMP[FILTER_NUM];
    // 二阶滤波
    LowPassFilter2pVector3f _accel_filter;
    LowPassFilter2pVector3f _gyro_filter;
    LowPassFilter2pVector3f _mag_filter;
    
    // 滑动窗口滤波
    Vector3f Sliding_Windows_Filter(Vector3f in);
    float Sliding_Windows_Filter_Temp(float in);

    Madgwick&           _madgwick;
    MahonyAHRS&         _mahony;  
    EKF&                _ekf;
    MPU6500&              _mpu;
    BMM150&               _bmm;
		
		MPU6500&              _mpu1;
		AccelCal&             _acc_cal;
		AccelCalibrator&      _acc_caltor;

public:
    Vector3f              Gyro_af;
    Vector3f              Accel_af;
    Vector3f              Accel_af1;
    Vector3f              Mag_af;
    Vector3f              follow_head;
    float                 Temp_af;

    Vector3f              euler;
    Vector3f              euler_rad;
    Vector3f              angle_acc;
    Vector3f              euler_rad_raw;
    Vector3f              euler_rad_zeros;
    
    float                 rawYawError;
    bool                  calibration_done;

    float                 err_y;

    float                 beta_m;
    
    // 构造函数
    Attitude(Madgwick& mag_imu, MahonyAHRS& mah_imu, EKF& ekf, MPU6500& mpu_6500, BMM150& bmm_150, MPU6500& mpu1, AccelCal& acc, AccelCalibrator& acc_caltor):
    _accel_filter(2000,20), // 采样频率2KHz, 截至频率20Hz
    _gyro_filter(2000,200),
    _mag_filter(2000,20),
    _madgwick(mag_imu),
    _mahony(mah_imu),
		_ekf(ekf),
    _mpu(mpu_6500),
    _bmm(bmm_150),
    _mpu1(mpu1),
    _acc_cal(acc),
		_acc_caltor(acc_caltor)
    {

    };

    
    void start_init();
    void update();
    void get_yawerror(float roll, float yaw, float angel);
		
		float q0(void) {return _madgwick.get_q0();};
		float q1(void) {return _madgwick.get_q1();};
		float q2(void) {return _madgwick.get_q2();};
		float q3(void) {return _madgwick.get_q3();};
    
    float sin_pitch();
    float cos_pitch();
    float sin_roll();
    float cos_roll();
    float sin_yaw();
    float cos_yaw();
		bool calibration_Done(void) { return calibration_done;};
		
		void get_err_y(float err) { err_y = err;};
		Vector3i get_gyro_i16(void) { return _mpu.Gyro_I16;};
		Vector3f get_angle_acc(void);
		
		Vector3f reset_euler_z_zeros(void) {this->euler_rad_zeros.z = this->euler_rad_raw.z;}
};

#endif
#endif
