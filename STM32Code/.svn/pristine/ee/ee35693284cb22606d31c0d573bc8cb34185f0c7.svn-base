#ifndef __GIMBAL_H__
#define __GIMBAL_H__
 
#include <rtthread.h>
#include "stm32f4xx.h"
#include "parameter.h"
#include "AttitudeControl.h"
#include "Attitude.h"
#include "accelerometer_calibration.h"
#include "CAN_com.h"
#include "serial_com.h"
#include "time_measure.h"
#include "bgc_param.h"
#include "scheduler.h"

#ifdef __cplusplus

class Gimbal
{
public:
	friend class BGC_PARAM;
	Gimbal(void);
	void setup(const Scheduler::Task *tasks, uint8_t num_tasks);
    // thread control parameter
    bool exit_serial_thread;
    bool exit_attitude_thread;
    bool exit_control_thread;
    bool exit_can_thread;
    bool exit_packing_thread;

    // serial update
    void serial_update(void *parameter);
    // attitude update
    void attitude_update(void *parameter);
    // control update
    void control_update(void *parameter);
    // can update
    void can_update(void *parameter);	


    // packing update
    void packing_update(void *parameter);

    // get attitude pck from Attitude
    void generate_attitude_pck(void *parameter);
    // send an attitude data(Mavlink);
    void send_attitude_pck(void *parameter);
    // Get attitude quaternion pck
    void generate_attitude_quat_pck(void *parameter);
    // Send an attitude quaternion pck
    void send_attitude_quat_pck(void *parameter);
    // Get Control parameter pck from BGC parameter
    void generate_control_parameter_pck(uint8_t axis_id);
    // Send a Control parameter message
    void send_control_parameter_pck(void *parameter);
    // Generate Efficient data pck
    void generate_efficient_data_pck(uint8_t axis_id, uint8_t param_id);
    // Send Efficient data pck
    void send_efficient_data_pck(void *parameter);
    // Get efficient data pck from serial
    void set_param_from_efficient_data_pck(void *parameter);
    // Decode msg to pck
    void decode_msg(void *parameter);
    // Send controller motors realtime data
    void send_controller_realtime_data(void *parameter);
    // return sys events
    rt_event_t Sys_event();
    // scheduler run
    void scheduler_run();
    // gimbal
    static const Scheduler::Task scheduler_tasks[];
    
private:
	Time_point         time;
	CAN                can;
	SerialManager      serial;
    Madgwick         madgwick;
    MPU6500            mpu;
	Attitude           attitude;
    Accel_Cal          calibration;
	AC_AttitudeControl attitude_control;
	BGC_PARAM          param;
    AP_Param           param_loader;
    Scheduler          scheduler;

    Mavlink           mavlink;
    Mavlink_msg_t     mavlink_msg_rx;
    Mavlink_msg_t     mavlink_msg_tx;
    Mavlink_attitude_t    attitude_pck;
    Mavlink_attitude_quaternion_t    attitude_quat_pck;
    Mavlink_control_param_t  control_param_pck;
    Mavlink_efficient_data_t  efficient_data_pck;
    Mavlink_efficient_data_t  efficient_data_pck_rx;

	// ²ÎÊý
	static const AP_Param::Info var_info[];
};

extern Gimbal gimbal;

#endif
#endif
