<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\XD_SPRain_BGC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\XD_SPRain_BGC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Sep 14 15:05:53 2018
<BR><P>
<H3>Maximum Stack Usage =       1600 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
rt_entry_thread_sekf &rArr; Gimbal::sekf_update(void*) &rArr; SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&) &rArr; SmallEKF::predictCovariance()
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[6f5]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d2]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[178]">rt_kprintf</a><BR>
 <LI><a href="#[229]">AccelCalibrator::set_status(accel_cal_status_t)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[229]">AccelCalibrator::set_status(accel_cal_status_t)</a><BR>
 <LI><a href="#[472]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[472]">copydir</a><BR>
 <LI><a href="#[20]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">DebugMon_Handler</a><BR>
 <LI><a href="#[35]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">ADC_IRQHandler</a><BR>
 <LI><a href="#[64a]">finsh_type_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64a]">finsh_type_check</a><BR>
 <LI><a href="#[648]">finsh_compile</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[648]">finsh_compile</a><BR>
 <LI><a href="#[667]">proc_assign_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[667]">proc_assign_expr</a><BR>
 <LI><a href="#[66e]">proc_cast_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66e]">proc_cast_expr</a><BR>
 <LI><a href="#[66d]">proc_unary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[66e]">proc_cast_expr</a><BR>
 <LI><a href="#[66b]">proc_primary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[669]">proc_expr</a><BR>
 <LI><a href="#[666]">proc_param_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[667]">proc_assign_expr</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">ADC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1d]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[37]">CAN1_RX0_IRQHandler</a> from bxcan.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[38]">CAN1_RX1_IRQHandler</a> from bxcan.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[39]">CAN1_SCE_IRQHandler</a> from bxcan.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[36]">CAN1_TX_IRQHandler</a> from bxcan.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[63]">CAN2_RX0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[64]">CAN2_RX1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[65]">CAN2_SCE_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[62]">CAN2_TX_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[72]">CRYP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[71]">DCMI_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[30]">DMA1_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[31]">DMA1_Stream3_IRQHandler</a> from eeprom.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[32]">DMA1_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[33]">DMA1_Stream5_IRQHandler</a> from fast_uart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[34]">DMA1_Stream6_IRQHandler</a> from fast_uart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[52]">DMA1_Stream7_IRQHandler</a> from eeprom.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5b]">DMA2_Stream0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5e]">DMA2_Stream3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[67]">DMA2_Stream5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[68]">DMA2_Stream6_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[69]">DMA2_Stream7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[20]">DebugMon_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[ee]">EE_Debug</a> from eeprom.o(.text) referenced from eeprom.o(FSymTab)
 <LI><a href="#[60]">ETH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[61]">ETH_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[29]">EXTI0_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4b]">EXTI15_10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2a]">EXTI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2b]">EXTI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2c]">EXTI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[2d]">EXTI4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3a]">EXTI9_5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[27]">FLASH_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[74]">FPU_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[53]">FSMC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[73]">HASH_RNG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1b]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[43]">I2C1_ER_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[42]">I2C1_EV_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[45]">I2C2_ER_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[44]">I2C2_EV_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6c]">I2C3_ER_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6b]">I2C3_EV_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1c]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1a]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[b8]">OP_add_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ba]">OP_add_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[b9]">OP_add_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c7]">OP_and_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c9]">OP_and_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c8]">OP_and_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d0]">OP_bw_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d2]">OP_bw_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d1]">OP_bw_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e3]">OP_call</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[be]">OP_div_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c0]">OP_div_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[bf]">OP_div_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d9]">OP_ld_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[db]">OP_ld_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[dc]">OP_ld_value_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e4]">OP_ld_value_byte_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[de]">OP_ld_value_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e6]">OP_ld_value_dword_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[dd]">OP_ld_value_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e5]">OP_ld_value_word_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[da]">OP_ld_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c1]">OP_mod_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c3]">OP_mod_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c2]">OP_mod_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c4]">OP_mul_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c6]">OP_mul_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[c5]">OP_mul_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[b7]">OP_no_op</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ca]">OP_or_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[cc]">OP_or_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[cb]">OP_or_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e2]">OP_pop</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d3]">OP_shl_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d5]">OP_shl_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d4]">OP_shl_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d6]">OP_shr_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d8]">OP_shr_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[d7]">OP_shr_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[df]">OP_st_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e1]">OP_st_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e0]">OP_st_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[bb]">OP_sub_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[bd]">OP_sub_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[bc]">OP_sub_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[cd]">OP_xor_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[cf]">OP_xor_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[ce]">OP_xor_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[66]">OTG_FS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6e]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6d]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[70]">OTG_HS_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6f]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[24]">PVD_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[21]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[14]">RCC_AHB1PeriphClockCmd</a> from stm32f4xx_rcc.o(.text) referenced 10 times from gpio.o(.data)
 <LI><a href="#[18]">RCC_APB1PeriphClockCmd</a> from stm32f4xx_rcc.o(.text) referenced 12 times from stm32f40x_timer.o(.data)
 <LI><a href="#[17]">RCC_APB2PeriphClockCmd</a> from stm32f4xx_rcc.o(.text) referenced 4 times from stm32f40x_timer.o(.data)
 <LI><a href="#[28]">RCC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4c]">RTC_Alarm_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[26]">RTC_WKUP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[19]">Reset_Handler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[54]">SDIO_IRQHandler</a> from stm32f4xx_sd.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[46]">SPI1_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[47]">SPI2_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[56]">SPI3_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1f]">SVC_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[22]">SysTick_Handler</a> from board.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[94]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[25]">TAMP_STAMP_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3e]">TIM1_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[3f]">TIM2_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[40]">TIM3_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[41]">TIM4_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[55]">TIM5_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[59]">TIM6_DAC_IRQHandler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[5a]">TIM7_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[51]">TIM8_CC_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[50]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[93]">TimerDefaultConfig</a> from stm32f40x_timer.o(.text) referenced from stm32f40x_timer.o(.text)
 <LI><a href="#[57]">UART4_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[58]">UART5_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[48]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[49]">USART2_IRQHandler</a> from fast_uart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[4a]">USART3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[6a]">USART6_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[1e]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[23]">WWDG_IRQHandler</a> from startup_stm32f4xx.o(.text) referenced from startup_stm32f4xx.o(RESET)
 <LI><a href="#[213]">BMM150_delay_msek(unsigned)</a> from bmm150.o(.text) referenced from bmm150.o(.text)
 <LI><a href="#[214]">BMM150_SPI_bus_read(unsigned char, unsigned char, unsigned char*, unsigned char)</a> from bmm150.o(.text) referenced from bmm150.o(.text)
 <LI><a href="#[215]">BMM150_SPI_bus_write(unsigned char, unsigned char, unsigned char*, unsigned char)</a> from bmm150.o(.text) referenced from bmm150.o(.text)
 <LI><a href="#[a9]">__default_new_handler()</a> from arm_newhandler_noexceptions.o(.text) referenced from new.o(i._Znwj)
 <LI><a href="#[f0]">acccal()</a> from gimbal.o(.text) referenced from gimbal.o(FSymTab)
 <LI><a href="#[11]">can1ind(rt_device*, void*, long, unsigned long)</a> from can_com.o(.text) referenced 36 times from can_com.o(.data)
 <LI><a href="#[ef]">do_accel()</a> from gimbal.o(.text) referenced from gimbal.o(FSymTab)
 <LI><a href="#[75]">sin_func(float, float)</a> from excitation.o(.text) referenced from excitation.o(.text)
 <LI><a href="#[175]">FuzzyLogic::fisProduct(float, float)</a> from fuzzylogic.o(.text) referenced from fuzzylogic.o(.text)
 <LI><a href="#[12]">FuzzyLogic::fisGaussianMf(float, float*)</a> from fuzzylogic.o(.text) referenced 32 times from gimbal.o(.data)
 <LI><a href="#[13]">FuzzyLogic::fisTriangleMf(float, float*)</a> from fuzzylogic.o(.text) referenced 80 times from gimbal.o(.data)
 <LI><a href="#[174]">FuzzyLogic::fisMax(float, float)</a> from fuzzylogic.o(.text) referenced from fuzzylogic.o(.text)
 <LI><a href="#[176]">FuzzyLogic::fisMin(float, float)</a> from fuzzylogic.o(.text) referenced from fuzzylogic.o(.text)
 <LI><a href="#[177]">FuzzyLogic::fisProbOr(float, float)</a> from fuzzylogic.o(.text) referenced from fuzzylogic.o(.text)
 <LI><a href="#[e7]">AC_AttitudeControl::rate_bf_to_motor_yaw(float)</a> from attitudecontrol.o(.text) referenced from attitudecontrol.o(.constdata__ZTV18AC_AttitudeControl)
 <LI><a href="#[a8]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[e8]">math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::~Matrix()</a> from accelerometer_calibration.o(i._ZN4math6MatrixILj3ELj3EED1Ev) referenced from accelerometer_calibration.o(.constdata__ZTVN4math6MatrixILj3ELj3EEE)
 <LI><a href="#[e9]">math::Vector&lang;(unsigned)3&rang;::~Vector()</a> from accelerometer_calibration.o(i._ZN4math6VectorILj3EED1Ev) referenced from accelerometer_calibration.o(.constdata__ZTVN4math6VectorILj3EEE)
 <LI><a href="#[7d]">Gimbal::~Gimbal()</a> from gimbal.o(i._ZN6GimbalD1Ev) referenced from gimbal.o(.text)
 <LI><a href="#[76]">Vector3&lang;float&rang;::Vector3()</a> from attitudecontrol.o(t._ZN7Vector3IfEC1Ev) referenced from mpu6500.o(.text)
 <LI><a href="#[76]">Vector3&lang;float&rang;::Vector3()</a> from attitudecontrol.o(t._ZN7Vector3IfEC1Ev) referenced from gimbal.o(i._ZN8AttitudeC1ER8MadgwickR10MahonyAHRSR7DCM_EKFR7MPU6500R6BMM150S7_R8AccelCalR15AccelCalibrator)
 <LI><a href="#[118]">__main</a> from __main.o(!!!main) referenced from startup_stm32f4xx.o(.text)
 <LI><a href="#[112]">__sti___10_Gimbal_cpp_56172044</a> from gimbal.o(.text) referenced from gimbal.o(.init_array)
 <LI><a href="#[114]">__sti___10_timers_cpp_5ee47f80</a> from timers.o(.text) referenced from timers.o(.init_array)
 <LI><a href="#[111]">__sti___11_CAN_com_cpp_23b139a2</a> from can_com.o(.text) referenced from can_com.o(.init_array)
 <LI><a href="#[117]">__sti___11_att2mot_cpp_kf</a> from att2mot.o(.text) referenced from att2mot.o(.init_array)
 <LI><a href="#[10f]">__sti___11_mpu6500_cpp_b19e9125</a> from mpu6500.o(.text) referenced from mpu6500.o(.init_array)
 <LI><a href="#[10d]">__sti___12_Attitude_cpp_kf_gyrox</a> from attitude.o(.text) referenced from attitude.o(.init_array)
 <LI><a href="#[115]">__sti___13_bgc_param_cpp_6696f92c</a> from bgc_param.o(.text) referenced from bgc_param.o(.init_array)
 <LI><a href="#[116]">__sti___13_scheduler_cpp_beaa0f50</a> from scheduler.o(.text) referenced from scheduler.o(.init_array)
 <LI><a href="#[110]">__sti___15_DCM_EKF_IMU_cpp_4f1c7dfb</a> from dcm_ekf_imu.o(.text) referenced from dcm_ekf_imu.o(.init_array)
 <LI><a href="#[113]">__sti___15_application_cpp_5d70578a</a> from application.o(.text) referenced from application.o(.init_array)
 <LI><a href="#[10c]">__sti___18_DirectionAlign_cpp_0fb6be37</a> from directionalign.o(.text) referenced from directionalign.o(.init_array)
 <LI><a href="#[108]">__sti___19_AttitudeControl_cpp_61cf2197</a> from attitudecontrol.o(.text) referenced from attitudecontrol.o(.init_array)
 <LI><a href="#[10e]">__sti___19_attitude_filter_cpp_5f28a12d</a> from attitude_filter.o(.text) referenced from attitude_filter.o(.init_array)
 <LI><a href="#[10a]">__sti___5_P_cpp_5a5710aa</a> from p.o(.text) referenced from p.o(.init_array)
 <LI><a href="#[10b]">__sti___6_PD_cpp_693c8706</a> from pd.o(.text) referenced from pd.o(.init_array)
 <LI><a href="#[109]">__sti___7_PID_cpp_d532c8a9</a> from pid.o(.text) referenced from pid.o(.init_array)
 <LI><a href="#[a7]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[88]">_led_close</a> from led.o(.text) referenced from led.o(.text)
 <LI><a href="#[86]">_led_init</a> from led.o(.text) referenced from led.o(.text)
 <LI><a href="#[87]">_led_open</a> from led.o(.text) referenced from led.o(.text)
 <LI><a href="#[89]">_led_read</a> from led.o(.text) referenced from led.o(.text)
 <LI><a href="#[8a]">_led_write</a> from led.o(.text) referenced from led.o(.text)
 <LI><a href="#[8e]">_spi_bus_device_control</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[8b]">_spi_bus_device_init</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[8c]">_spi_bus_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[8d]">_spi_bus_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[92]">_spidev_device_control</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[8f]">_spidev_device_init</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[90]">_spidev_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[91]">_spidev_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[f1]">can_stat</a> from can.o(.text) referenced from can.o(FSymTab)
 <LI><a href="#[84]">cantimeout</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[f5]">cat</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[fa]">chdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[aa]">configure</a> from bxcan.o(.text) referenced from bxcan.o(.constdata)
 <LI><a href="#[15]">configure</a> from stm32_hw_spi.o(.text) referenced 2 times from stm32_hw_spi.o(.data)
 <LI><a href="#[ab]">control</a> from bxcan.o(.text) referenced from bxcan.o(.constdata)
 <LI><a href="#[f6]">copy</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[f2]">cpu_usage</a> from idle_thread.o(.text) referenced from idle_thread.o(FSymTab)
 <LI><a href="#[85]">cpu_usage_idle_hook</a> from idle_thread.o(.text) referenced from idle_thread.o(.text)
 <LI><a href="#[f8]">df</a> from dfs_fs.o(.text) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[a6]">finsh_rx_ind</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[696]">finsh_thread_entry</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[ea]">format_e2pfs</a> from e2pfs.o(.text) referenced from e2pfs.o(FSymTab)
 <LI><a href="#[ed]">fsinfo_e2pfs</a> from e2pfs.o(.text) referenced from e2pfs.o(FSymTab)
 <LI><a href="#[3f4]">gpio_init</a> from gpio.o(.text) referenced from gpio.o(.text)
 <LI><a href="#[107]">list</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[106]">list_device</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[100]">list_event</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[102]">list_mailbox</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[fb]">list_mem</a> from mem.o(.text) referenced from mem.o(FSymTab)
 <LI><a href="#[104]">list_mempool</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[103]">list_msgqueue</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[101]">list_mutex</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[ff]">list_sem</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[fd]">list_thread</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[105]">list_timer</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[f3]">ls</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[ec]">ls_e2pfs</a> from e2pfs.o(.text) referenced from e2pfs.o(FSymTab)
 <LI><a href="#[f9]">mkdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[f7]">mkfs</a> from dfs_fs.o(.text) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[600]">mmcsd_detect</a> from mmcsd_core.o(.text) referenced from mmcsd_core.o(.text)
 <LI><a href="#[fe]">reboot</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[ad]">recvmsg</a> from bxcan.o(.text) referenced from bxcan.o(.constdata)
 <LI><a href="#[f4]">rm</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[eb]">rm_e2pfs</a> from e2pfs.o(.text) referenced from e2pfs.o(FSymTab)
 <LI><a href="#[80]">rt_can_close</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[83]">rt_can_control</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[7e]">rt_can_init</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[7f]">rt_can_open</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[81]">rt_can_read</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[82]">rt_can_write</a> from can.o(.text) referenced from can.o(.text)
 <LI><a href="#[377]">rt_entry_thread_acc_cal</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[372]">rt_entry_thread_attitude</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[375]">rt_entry_thread_can</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[374]">rt_entry_thread_control</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[376]">rt_entry_thread_direction</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[371]">rt_entry_thread_packing</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[373]">rt_entry_thread_sekf</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[36f]">rt_entry_thread_serial</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[79]">rt_fast_uart_close</a> from fast_uart.o(.text) referenced from fast_uart.o(.text)
 <LI><a href="#[7c]">rt_fast_uart_control</a> from fast_uart.o(.text) referenced from fast_uart.o(.text)
 <LI><a href="#[77]">rt_fast_uart_init</a> from fast_uart.o(.text) referenced from fast_uart.o(.text)
 <LI><a href="#[78]">rt_fast_uart_open</a> from fast_uart.o(.text) referenced from fast_uart.o(.text)
 <LI><a href="#[7a]">rt_fast_uart_read</a> from fast_uart.o(.text) referenced from fast_uart.o(.text)
 <LI><a href="#[7b]">rt_fast_uart_write</a> from fast_uart.o(.text) referenced from fast_uart.o(.text)
 <LI><a href="#[378]">rt_init_thread_entry</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[a1]">rt_mmcsd_close</a> from block_dev.o(.text) referenced from block_dev.o(.text)
 <LI><a href="#[a4]">rt_mmcsd_control</a> from block_dev.o(.text) referenced from block_dev.o(.text)
 <LI><a href="#[9f]">rt_mmcsd_init</a> from block_dev.o(.text) referenced from block_dev.o(.text)
 <LI><a href="#[a0]">rt_mmcsd_open</a> from block_dev.o(.text) referenced from block_dev.o(.text)
 <LI><a href="#[a2]">rt_mmcsd_read</a> from block_dev.o(.text) referenced from block_dev.o(.text)
 <LI><a href="#[a3]">rt_mmcsd_write</a> from block_dev.o(.text) referenced from block_dev.o(.text)
 <LI><a href="#[9b]">rt_serial_close</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[9e]">rt_serial_control</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[99]">rt_serial_init</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[9a]">rt_serial_open</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[9c]">rt_serial_read</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[9d]">rt_serial_write</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[97]">rt_thread_exit</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[96]">rt_thread_idle_entry</a> from idle.o(.text) referenced from idle.o(.text)
 <LI><a href="#[5b0]">rt_thread_timeout</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[98]">rt_thread_timer_entry</a> from timer.o(.text) referenced from timer.o(.text)
 <LI><a href="#[a5]">sdio_irq_thread</a> from sdio.o(.text) referenced from sdio.o(.text)
 <LI><a href="#[ac]">sendmsg</a> from bxcan.o(.text) referenced from bxcan.o(.constdata)
 <LI><a href="#[ae]">sprain_led_write</a> from led.o(.text) referenced from led.o(.constdata)
 <LI><a href="#[af]">stm32_configure</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[b0]">stm32_control</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[b2]">stm32_getc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[b1]">stm32_putc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[b5]">stm32f4xx_SD_Detect</a> from stm32f4xx_sd.o(.text) referenced from stm32f4xx_sd.o(.constdata)
 <LI><a href="#[b6]">stm32f4xx_sdio_enable_sdio_irq</a> from stm32f4xx_sd.o(.text) referenced from stm32f4xx_sd.o(.constdata)
 <LI><a href="#[b3]">stm32f4xx_sdio_request</a> from stm32f4xx_sd.o(.text) referenced from stm32f4xx_sd.o(.constdata)
 <LI><a href="#[b4]">stm32f4xx_sdio_set_iocfg</a> from stm32f4xx_sd.o(.text) referenced from stm32f4xx_sd.o(.constdata)
 <LI><a href="#[366]">time_update_isr</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[fc]">version</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[16]">xfer</a> from stm32_hw_spi.o(.text) referenced 2 times from stm32_hw_spi.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[118]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[11a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[11c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[72e]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[72f]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[730]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[731]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[732]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[12a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[11d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[11f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[733]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[734]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[121]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[735]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[736]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[737]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[123]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[738]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[739]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[73a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[73b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[124]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[73c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[73d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[73e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[73f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[740]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[741]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[742]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[743]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[744]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[745]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[746]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[12f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[125]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[747]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[748]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[749]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[74a]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[74b]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[74c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[74d]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[11b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[74e]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[127]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[129]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[74f]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[12b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[750]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6f6]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[12e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[751]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[130]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[752]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[132]"></a>AC_AttitudeControl::set_dt(float)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_dt(float)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::set_dt(float)
</UL>

<P><STRONG><a name="[135]"></a>AC_AttitudeControl::frame_conversion_bf_to_ef(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::sin_pitch()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::cos_pitch()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::sin_roll()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::cos_roll()
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::relax_bf_rate_controller()
</UL>

<P><STRONG><a name="[13b]"></a>AC_AttitudeControl::relax_bf_rate_controller()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::reset_I()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::frame_conversion_bf_to_ef(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[13e]"></a>AC_AttitudeControl::shift_ef_yaw_target(float)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_360_cd_float(float)
</UL>

<P><STRONG><a name="[14d]"></a>AC_AttitudeControl::frame_conversion_ef_to_bf(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_yaw(float, float, float, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw(float, float, float)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
</UL>

<P><STRONG><a name="[140]"></a>AC_AttitudeControl::update_rate_bf_targets()</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::get_pd()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::set_input_filter_d(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_yaw(float, float, float, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw(float, float, float)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
</UL>

<P><STRONG><a name="[143]"></a>AC_AttitudeControl::update_ef_yaw_angle_and_error(float, Vector3&lang;float&rang;&, float)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_360_cd(int)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_180_cd(int)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw(float, float, float)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
</UL>

<P><STRONG><a name="[147]"></a>AC_AttitudeControl::update_ef_pitch_angle_and_error(float, Vector3&lang;float&rang;&, float)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_180_cd(int)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
</UL>

<P><STRONG><a name="[148]"></a>AC_AttitudeControl::sqrt_controller(float, float, float)</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(float)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
</UL>

<P><STRONG><a name="[14a]"></a>AC_AttitudeControl::update_ef_roll_angle_and_error(float, Vector3&lang;float&rang;&, float)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_180_cd(int)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
</UL>

<P><STRONG><a name="[14b]"></a>AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)</STRONG> (Thumb, 788 bytes, Stack size 72 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_180_cd_float(float)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_roll_angle_and_error(float, Vector3&lang;float&rang;&, float)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::sqrt_controller(float, float, float)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_pitch_angle_and_error(float, Vector3&lang;float&rang;&, float)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_yaw_angle_and_error(float, Vector3&lang;float&rang;&, float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_rate_bf_targets()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::frame_conversion_ef_to_bf(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>

<P><STRONG><a name="[14f]"></a>AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw(float, float, float)</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_180_cd_float(float)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_yaw_angle_and_error(float, Vector3&lang;float&rang;&, float)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_rate_bf_targets()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::frame_conversion_ef_to_bf(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>

<P><STRONG><a name="[150]"></a>AC_AttitudeControl::angle_ef_roll_pitch_yaw(float, float, float, bool)</STRONG> (Thumb, 346 bytes, Stack size 48 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_rate_bf_targets()
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::frame_conversion_ef_to_bf(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>

<P><STRONG><a name="[151]"></a>AC_AttitudeControl::rate_controller_run(Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_pid()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_input_filter_d(float)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>

<P><STRONG><a name="[155]"></a>AC_AttitudeControl::max_rate_step_bf_roll()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_filt_alpha() const
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::kP() const
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::kD() const
</UL>

<P><STRONG><a name="[159]"></a>AC_AttitudeControl::max_rate_step_bf_pitch()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_filt_alpha() const
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::kP() const
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::kD() const
</UL>

<P><STRONG><a name="[15a]"></a>AC_AttitudeControl::max_rate_step_bf_yaw()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_filt_alpha() const
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::kP() const
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::kD() const
</UL>

<P><STRONG><a name="[15b]"></a>AC_AttitudeControl::accel_limiting(bool)</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(float)
</UL>

<P><STRONG><a name="[15d]"></a>AC_AttitudeControl::serial_PID(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 584 bytes, Stack size 176 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_pid()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_input_filter_d(float)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::get_pd()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::set_input_filter_d(float)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>

<P><STRONG><a name="[15f]"></a>AC_AttitudeControl::integrate_bf_rate_error_to_angle_errors()</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>

<P><STRONG><a name="[160]"></a>AC_AttitudeControl::rate_bf_to_motor_roll(float)</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_p()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_i()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_d()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_input_filter_d(float)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>

<P><STRONG><a name="[164]"></a>AC_AttitudeControl::rate_bf_to_motor_pitch(float)</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_p()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_i()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_d()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_input_filter_d(float)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>

<P><STRONG><a name="[e7]"></a>AC_AttitudeControl::rate_bf_to_motor_yaw(float)</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, attitudecontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AC_AttitudeControl::rate_bf_to_motor_yaw(float) &rArr; AC_PID::set_input_filter_all(float) &rArr; AC_PID::get_filt_alpha() const
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_p()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_i()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_d()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_input_filter_all(float)
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float(float, float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitudecontrol.o(.constdata__ZTV18AC_AttitudeControl)
</UL>
<P><STRONG><a name="[166]"></a>AC_PID::filt_hz(float)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AC_PID::filt_hz(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::AC_PID(float, float, float, float, float, float)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::set_controller_param_from_mavlink(void*)
</UL>

<P><STRONG><a name="[167]"></a>AC_PID::AC_PID(float, float, float, float, float, float)</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AC_PID::AC_PID(float, float, float, float, float, float) &rArr; AC_PID::filt_hz(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::filt_hz(float)
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BGC_PARAM::BGC_PARAM()
</UL>

<P><STRONG><a name="[753]"></a>AC_PID::AC_PID__sub_object(float, float, float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>AC_PID::set_dt(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::set_dt(float)
</UL>

<P><STRONG><a name="[156]"></a>AC_PID::get_filt_alpha() const</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AC_PID::get_filt_alpha() const
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_input_filter_all(float)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_input_filter_d(float)
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::max_rate_step_bf_yaw()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::max_rate_step_bf_pitch()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::max_rate_step_bf_roll()
</UL>

<P><STRONG><a name="[165]"></a>AC_PID::set_input_filter_all(float)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AC_PID::set_input_filter_all(float) &rArr; AC_PID::get_filt_alpha() const
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinitef
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_filt_alpha() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_yaw(float)
</UL>

<P><STRONG><a name="[153]"></a>AC_PID::set_input_filter_d(float)</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, pid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinitef
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_filt_alpha() const
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_pitch(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_roll(float)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::serial_PID(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_controller_run(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[163]"></a>AC_PID::get_d()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_pid()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_yaw(float)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_pitch(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_roll(float)
</UL>

<P><STRONG><a name="[162]"></a>AC_PID::get_i()</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AC_PID::get_i()
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_pi()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_pid()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_yaw(float)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_pitch(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_roll(float)
</UL>

<P><STRONG><a name="[161]"></a>AC_PID::get_p()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_pi()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_pid()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_yaw(float)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_pitch(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_roll(float)
</UL>

<P><STRONG><a name="[154]"></a>AC_PID::get_pid()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_p()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_i()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_d()
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::serial_PID(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_controller_run(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[16b]"></a>AC_PID::get_pi()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_p()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_i()
</UL>

<P><STRONG><a name="[13d]"></a>AC_PID::reset_I()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::relax_bf_rate_controller()
</UL>

<P><STRONG><a name="[754]"></a>AC_PID::load_gains()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[755]"></a>AC_PID::save_gains()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>AC_PID::operator ()(float, float, float, float, float, float)</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, pid.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
</UL>

<P><STRONG><a name="[756]"></a>AC_P::get_p(float) const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, p.o(.text), UNUSED)

<P><STRONG><a name="[757]"></a>AC_P::load_gains()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, p.o(.text), UNUSED)

<P><STRONG><a name="[758]"></a>AC_P::save_gains()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, p.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>output_limit(float, float)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, pd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::get_pd()
</UL>

<P><STRONG><a name="[16d]"></a>AC_PD::filt_hz(float)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, pd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AC_PD::filt_hz(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::AC_PD(float, float, float, float, float)
</UL>

<P><STRONG><a name="[16e]"></a>AC_PD::AC_PD(float, float, float, float, float)</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, pd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AC_PD::AC_PD(float, float, float, float, float) &rArr; AC_PD::filt_hz(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::filt_hz(float)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BGC_PARAM::BGC_PARAM()
</UL>

<P><STRONG><a name="[759]"></a>AC_PD::AC_PD__sub_object(float, float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, pd.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>AC_PD::set_dt(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::set_dt(float)
</UL>

<P><STRONG><a name="[16f]"></a>AC_PD::get_filt_alpha() const</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, pd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::set_input_filter_d(float)
</UL>

<P><STRONG><a name="[141]"></a>AC_PD::set_input_filter_d(float)</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, pd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::get_filt_alpha() const
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::serial_PID(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_rate_bf_targets()
</UL>

<P><STRONG><a name="[171]"></a>AC_PD::get_d()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::get_pd()
</UL>

<P><STRONG><a name="[170]"></a>AC_PD::get_p()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::get_pd()
</UL>

<P><STRONG><a name="[142]"></a>AC_PD::get_pd()</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, pd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::get_p()
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::get_d()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_limit(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::serial_PID(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_rate_bf_targets()
</UL>

<P><STRONG><a name="[173]"></a>AC_PD::operator ()(float, float, float, float, float, float, float)</STRONG> (Thumb, 72 bytes, Stack size 64 bytes, pd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
</UL>

<P><STRONG><a name="[176]"></a>FuzzyLogic::fisMin(float, float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fuzzylogic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fuzzylogic.o(.text)
</UL>
<P><STRONG><a name="[174]"></a>FuzzyLogic::fisMax(float, float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fuzzylogic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fuzzylogic.o(.text)
</UL>
<P><STRONG><a name="[175]"></a>FuzzyLogic::fisProduct(float, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fuzzylogic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fuzzylogic.o(.text)
</UL>
<P><STRONG><a name="[177]"></a>FuzzyLogic::fisProbOr(float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fuzzylogic.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fuzzylogic.o(.text)
</UL>
<P><STRONG><a name="[75a]"></a>FuzzyLogic::fisSum(float, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fuzzylogic.o(.text), UNUSED)

<P><STRONG><a name="[75b]"></a>FuzzyLogic::FuzzyLogic(const unsigned char(&)[49][3], const mf_node(&)[7], const mf_node(&)[7], const mf_node(&)[7])</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fuzzylogic.o(.text), UNUSED)

<P><STRONG><a name="[75c]"></a>FuzzyLogic::FuzzyLogic__sub_object(const unsigned char(&)[49][3], const mf_node(&)[7], const mf_node(&)[7], const mf_node(&)[7])</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fuzzylogic.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>FuzzyLogic::fisTriangleMf(float, float*)</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, fuzzylogic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = FuzzyLogic::fisTriangleMf(float, float*) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 4]<UL><LI> application.o(.data)
<LI> bgc_param.o(.data)
<LI> gimbal.o(.data)
<LI> scheduler.o(.data)
</UL>
<P><STRONG><a name="[179]"></a>FuzzyLogic::fisTrapezoidMf(float, float*)</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, fuzzylogic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[12]"></a>FuzzyLogic::fisGaussianMf(float, float*)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, fuzzylogic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = FuzzyLogic::fisGaussianMf(float, float*) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exp(float)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> application.o(.data)
<LI> bgc_param.o(.data)
<LI> gimbal.o(.data)
<LI> scheduler.o(.data)
</UL>
<P><STRONG><a name="[17b]"></a>FuzzyLogic::fisGaussian2Mf(float, float*)</STRONG> (Thumb, 606 bytes, Stack size 48 bytes, fuzzylogic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exp(float)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>

<P><STRONG><a name="[17d]"></a>FuzzyLogic::fisGetMfParaN(const char*)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fuzzylogic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FuzzyLogic::fisGetMfParaN(const char*) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Gimbal_cpp_56172044
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_scheduler_cpp_beaa0f50
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_bgc_param_cpp_6696f92c
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_application_cpp_5d70578a
</UL>

<P><STRONG><a name="[17f]"></a>FuzzyLogic::initialize_fuzzy(float, float, float)</STRONG> (Thumb, 1264 bytes, Stack size 56 bytes, fuzzylogic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::start_init(float, float, float)
</UL>

<P><STRONG><a name="[184]"></a>FuzzyLogic::start_init(float, float, float)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, fuzzylogic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::initialize_fuzzy(float, float, float)
</UL>

<P><STRONG><a name="[185]"></a>FuzzyLogic::rule_evaluation()</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, fuzzylogic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::update(float, float)
</UL>

<P><STRONG><a name="[188]"></a>FuzzyLogic::fuzzification()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fuzzylogic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::update(float, float)
</UL>

<P><STRONG><a name="[187]"></a>FuzzyLogic::get_fuzzy_inputs(float, float)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, fuzzylogic.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::update(float, float)
</UL>

<P><STRONG><a name="[186]"></a>FuzzyLogic::update(float, float)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, fuzzylogic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::get_fuzzy_inputs(float, float)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fuzzification()
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::rule_evaluation()
</UL>

<P><STRONG><a name="[75d]"></a>FuzzyLogic::fuzzy_outputs()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fuzzylogic.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>fuzzy_prod_and(float, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fuzzy_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::cal_output()
</UL>

<P><STRONG><a name="[18c]"></a>Gaussmf::Gaussmf(float, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fuzzy_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzifier::Fuzzifier()
</UL>

<P><STRONG><a name="[75e]"></a>Gaussmf::Gaussmf__sub_object(float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fuzzy_control.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>Gaussmf::cal(float)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, fuzzy_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Gaussmf::cal(float) &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzifier::fuzzification(float*, float*)
</UL>

<P><STRONG><a name="[18b]"></a>Fuzzifier::Fuzzifier()</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, fuzzy_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Fuzzifier::Fuzzifier()
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gaussmf::Gaussmf(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::SugenoFuzzyLogic(float, float, float, float)
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::SugenoFuzzyLogic()
</UL>

<P><STRONG><a name="[75f]"></a>Fuzzifier::Fuzzifier__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, fuzzy_control.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>Fuzzifier::fuzzification(float*, float*)</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, fuzzy_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Fuzzifier::fuzzification(float*, float*) &rArr; Gaussmf::cal(float) &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gaussmf::cal(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::cal_output()
</UL>

<P><STRONG><a name="[18e]"></a>Fuzzifier::set_e_domain(float, float)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fuzzy_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gaussmf::set_center(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::SugenoFuzzyLogic(float, float, float, float)
</UL>

<P><STRONG><a name="[190]"></a>Fuzzifier::set_ce_domain(float, float)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fuzzy_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gaussmf::set_center(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::SugenoFuzzyLogic(float, float, float, float)
</UL>

<P><STRONG><a name="[191]"></a>SugenoFuzzyLogic::SugenoFuzzyLogic()</STRONG> (Thumb, 72 bytes, Stack size 4 bytes, fuzzy_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SugenoFuzzyLogic::SugenoFuzzyLogic() &rArr; Fuzzifier::Fuzzifier()
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzifier::Fuzzifier()
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::FuzzyController(float, float, float, float)
</UL>

<P><STRONG><a name="[760]"></a>SugenoFuzzyLogic::SugenoFuzzyLogic__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, fuzzy_control.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>SugenoFuzzyLogic::SugenoFuzzyLogic(float, float, float, float)</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fuzzy_control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzifier::set_ce_domain(float, float)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzifier::set_e_domain(float, float)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzifier::Fuzzifier()
</UL>

<P><STRONG><a name="[761]"></a>SugenoFuzzyLogic::SugenoFuzzyLogic__sub_object(float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fuzzy_control.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>SugenoFuzzyLogic::get_input(float, float)</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, fuzzy_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::run(float)
</UL>

<P><STRONG><a name="[193]"></a>SugenoFuzzyLogic::cal_output()</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, fuzzy_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SugenoFuzzyLogic::cal_output() &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzifier::fuzzification(float*, float*)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fuzzy_prod_and(float, float)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::run(float)
</UL>

<P><STRONG><a name="[195]"></a>FuzzyController::FuzzyController(float, float, float, float)</STRONG> (Thumb, 154 bytes, Stack size 4 bytes, fuzzy_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FuzzyController::FuzzyController(float, float, float, float) &rArr; SugenoFuzzyLogic::SugenoFuzzyLogic() &rArr; Fuzzifier::Fuzzifier()
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::SugenoFuzzyLogic()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[762]"></a>FuzzyController::FuzzyController__sub_object(float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, fuzzy_control.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>FuzzyController::run(float)</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, fuzzy_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = FuzzyController::run(float) &rArr; SugenoFuzzyLogic::cal_output() &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::cal_output()
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::get_input(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[321]"></a>Exciter::init(EXCITATION_FUNCTION, float)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, excitation.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::setup(const Scheduler::Task*, unsigned char)
</UL>

<P><STRONG><a name="[330]"></a>Exciter::update(float)</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, excitation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Exciter::update(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[19e]"></a>small_angle_sub(float, float)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, directionalign.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
</UL>

<P><STRONG><a name="[199]"></a>DirectionAlign::DirectionAlign()</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, directionalign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DirectionAlign::DirectionAlign()
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[763]"></a>DirectionAlign::DirectionAlign__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, directionalign.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 1656 bytes, Stack size 56 bytes, directionalign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*) &rArr; __aeabi_cdcmpeq
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;small_angle_sub(float, float)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::direction_update(void*)
</UL>

<P><STRONG><a name="[1a0]"></a>Attitude::Sliding_Windows_Filter(Vector3&lang;float&rang;)</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, attitude.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
</UL>

<P><STRONG><a name="[764]"></a>Attitude::Sliding_Windows_Filter_Temp(float)</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, attitude.o(.text), UNUSED)

<P><STRONG><a name="[1a2]"></a>Attitude::start_init()</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, attitude.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Attitude::start_init() &rArr; MPU6500::gyroCalibration() &rArr; MPU6500::read_acc(short*, short*, short*) &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::cast_to_float(ap_var_type) const
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::set_value(ap_var_type, void*, float*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_gyro_scale(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_acc_scale(unsigned char)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotchFilter&lang;Vector3&lang;float&rang;&rang;::init(float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::setup(const Scheduler::Task*, unsigned char)
</UL>

<P><STRONG><a name="[1ad]"></a>Attitude::update()</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, attitude.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = Attitude::update() &rArr; AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float) &rArr; AccelCalibrator::run_fit(unsigned char, float&) &rArr; inverse(float*, float*, unsigned short) &rArr; mat_inverse(float*, float*, unsigned char) &rArr; mat_LU_decompose(float*, float*, float*, float*, unsigned char) &rArr; mat_mul(float*, float*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::read_Data()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::attitude_update(void*)
</UL>

<P><STRONG><a name="[1b0]"></a>Attitude::get_yawerror(float, float, float)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, attitude.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[765]"></a>Attitude::set_madgwick_quaternion(float, float, float, float)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, attitude.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>Attitude::sin_pitch()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, attitude.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::frame_conversion_bf_to_ef(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[136]"></a>Attitude::cos_pitch()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, attitude.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::frame_conversion_bf_to_ef(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[138]"></a>Attitude::sin_roll()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, attitude.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::frame_conversion_bf_to_ef(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[13a]"></a>Attitude::cos_roll()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, attitude.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::frame_conversion_bf_to_ef(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[1b2]"></a>Attitude::sin_yaw()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, attitude.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[1b3]"></a>Attitude::cos_yaw()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, attitude.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[766]"></a>Attitude::get_angle_acc()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, attitude.o(.text), UNUSED)

<P><STRONG><a name="[767]"></a>applyDeadband(int, int)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, attitude_filter.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>Madgwick::invSqrt(float)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1b7]"></a>Madgwick::Madgwick(float)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, attitude_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Madgwick::Madgwick(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[768]"></a>Madgwick::Madgwick__sub_object(float)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, attitude_filter.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>Madgwick::MadgwickUpdate(float, float, float, float, float, float)</STRONG> (Thumb, 1806 bytes, Stack size 208 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::from_quat(float, float, float, float)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_vec(ChMatrix3*, Vector3&lang;float&rang;*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::invSqrt(float)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1bc]"></a>Madgwick::MadgwickUpdate(float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 2942 bytes, Stack size 248 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::invSqrt(float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[1bd]"></a>Madgwick::getEuler(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1c0]"></a>MahonyAHRS::invSqrt(float)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRSUpdate(float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[769]"></a>MahonyAHRS::atan2_approx(float, float)</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, attitude_filter.o(.text), UNUSED)

<P><STRONG><a name="[1c6]"></a>MahonyAHRS::sin_approx(float)</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRSUpdate(float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1c1]"></a>MahonyAHRS::acos_approx(float)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[1c4]"></a>MahonyAHRS::To_180_degrees(float)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRSUpdate(float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[1c2]"></a>MahonyAHRS::MahonyAHRS(float, float)</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, attitude_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MahonyAHRS::MahonyAHRS(float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[76a]"></a>MahonyAHRS::MahonyAHRS__sub_object(float, float)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, attitude_filter.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>MahonyAHRS::MahonyAHRSUpdate(float, float, float, float, float, float, float)</STRONG> (Thumb, 1246 bytes, Stack size 104 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::To_180_degrees(float)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::sin_approx(float)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::invSqrt(float)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq(float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[1c7]"></a>MahonyAHRS::request_eular(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 494 bytes, Stack size 16 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[76b]"></a>MahonyAHRS::BodyToEarth(t_fp_vector*)</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, attitude_filter.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>vector_dis_2(Vector3&lang;short&rang;, Vector3&lang;short&rang;)</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vector_dis_2(Vector3&lang;short&rang;, Vector3&lang;short&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
</UL>

<P><STRONG><a name="[1c8]"></a>MPU6500::MPU6500(const char*)</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MPU6500::MPU6500(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;short&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[76c]"></a>MPU6500::MPU6500__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, mpu6500.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>MPU6500::disableInterrupt()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MPU6500::disableInterrupt() &rArr; rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[1cc]"></a>MPU6500::setDLPF(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6500::setDLPF(unsigned char) &rArr; rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[1cd]"></a>MPU6500::setSampleRate(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6500::setSampleRate(unsigned char) &rArr; rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[1ce]"></a>MPU6500::disable_I2C()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MPU6500::disable_I2C() &rArr; rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[1cf]"></a>MPU6500::setClockSource(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6500::setClockSource(unsigned char) &rArr; rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[1d0]"></a>MPU6500::reSetMPU6500()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MPU6500::reSetMPU6500() &rArr; rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[1d1]"></a>MPU6500::testConnect()</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6500::testConnect() &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
</UL>

<P><STRONG><a name="[1a7]"></a>MPU6500::mpu_init(unsigned char, unsigned char, int)</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = MPU6500::mpu_init(unsigned char, unsigned char, int) &rArr; MPU6500::testConnect() &rArr; rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::testConnect()
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::reSetMPU6500()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::setClockSource(unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::disable_I2C()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::setSampleRate(unsigned char)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::setDLPF(unsigned char)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::disableInterrupt()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
</UL>

<P><STRONG><a name="[1d5]"></a>MPU6500::getClockSource()</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, mpu6500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>

<P><STRONG><a name="[1d6]"></a>MPU6500::getSampleRate()</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, mpu6500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>

<P><STRONG><a name="[1a8]"></a>MPU6500::set_acc_scale(unsigned char)</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6500::set_acc_scale(unsigned char) &rArr; rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
</UL>

<P><STRONG><a name="[1a9]"></a>MPU6500::set_gyro_scale(unsigned char)</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MPU6500::set_gyro_scale(unsigned char) &rArr; rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
</UL>

<P><STRONG><a name="[1d7]"></a>MPU6500::read_gyro(short*, short*, short*)</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6500::read_gyro(short*, short*, short*) &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroOffsetCalibration()
</UL>

<P><STRONG><a name="[1d9]"></a>MPU6500::gyroOffsetCalibration()</STRONG> (Thumb, 600 bytes, Stack size 56 bytes, mpu6500.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::read_gyro(short*, short*, short*)
</UL>

<P><STRONG><a name="[1db]"></a>MPU6500::read_acc(short*, short*, short*)</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MPU6500::read_acc(short*, short*, short*) &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
</UL>

<P><STRONG><a name="[1aa]"></a>MPU6500::gyroCalibration()</STRONG> (Thumb, 1188 bytes, Stack size 200 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = MPU6500::gyroCalibration() &rArr; MPU6500::read_acc(short*, short*, short*) &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /=(float)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;short&rang;::Vector3()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::read_acc(short*, short*, short*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::read_gyro(short*, short*, short*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_dis_2(Vector3&lang;short&rang;, Vector3&lang;short&rang;)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
</UL>

<P><STRONG><a name="[1ae]"></a>MPU6500::read_Data()</STRONG> (Thumb, 532 bytes, Stack size 32 bytes, mpu6500.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = MPU6500::read_Data() &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::rotate(Rotation)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::update()
</UL>

<P><STRONG><a name="[76d]"></a>MPU6500::set_rotation(Rotation)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mpu6500.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*)</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, rotation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*) &rArr; math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
</UL>

<P><STRONG><a name="[1e2]"></a>Accel_Cal::least_square_calibration(float(&)[6][3], float(&)[3], float(&)[3], float)</STRONG> (Thumb, 258 bytes, Stack size 208 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Accel_Cal::least_square_calibration(float(&)[6][3], float(&)[3], float(&)[3], float) &rArr; mat_mul_vec(float*, float*, unsigned short, unsigned short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_mul_vec(float*, float*, unsigned short, unsigned short)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration_measurements(float(&)[3], float(&)[3][3])
</UL>

<P><STRONG><a name="[1e8]"></a>Accel_Cal::mat_invert3(float(*)[3], float(*)[3])</STRONG> (Thumb, 416 bytes, Stack size 0 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calculate_calibration_values(float(&)[6][3], float(&)[3][3], float(&)[3], float)
</UL>

<P><STRONG><a name="[1e6]"></a>Accel_Cal::calculate_calibration_values(float(&)[6][3], float(&)[3][3], float(&)[3], float)</STRONG> (Thumb, 254 bytes, Stack size 104 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Accel_Cal::calculate_calibration_values(float(&)[6][3], float(&)[3][3], float(&)[3], float) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::mat_invert3(float(*)[3], float(*)[3])
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration_measurements(float(&)[3], float(&)[3][3])
</UL>

<P><STRONG><a name="[1ef]"></a>Accel_Cal::detect_orientation_str(detect_orientation_return)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calibrate_from_orientation(bool*, void*, bool)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::accel_calibration_worker(detect_orientation_return, void*)
</UL>

<P><STRONG><a name="[1e9]"></a>Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)</STRONG> (Thumb, 450 bytes, Stack size 264 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned) &rArr; get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*) &rArr; math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, T1&rang; math::MatrixBase&lang;(unsigned)3, (unsigned)3&rang;::operator *&lang;(unsigned)3&rang;(const math::Matrix&lang;(unsigned)3, T1&rang;&) const
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::operator *(const math::Vector&lang;(unsigned)3&rang;&) const
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Vector&lang;(unsigned)3&rang;::~Vector()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Vector&lang;(unsigned)3&rang;::Vector(const float*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::~Matrix()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::Matrix()
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::accel_calibration_worker(detect_orientation_return, void*)
</UL>

<P><STRONG><a name="[1ee]"></a>Accel_Cal::accel_calibration_worker(detect_orientation_return, void*)</STRONG> (Thumb, 786 bytes, Stack size 136 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = Accel_Cal::accel_calibration_worker(detect_orientation_return, void*) &rArr; Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned) &rArr; get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*) &rArr; math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(float)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::detect_orientation_str(detect_orientation_return)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calibrate_from_orientation(bool*, void*, bool)
</UL>

<P><STRONG><a name="[1f1]"></a>Accel_Cal::detect_orientation(bool)</STRONG> (Thumb, 1122 bytes, Stack size 112 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Accel_Cal::detect_orientation(bool) &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calibrate_from_orientation(bool*, void*, bool)
</UL>

<P><STRONG><a name="[1f2]"></a>Accel_Cal::calibrate_from_orientation(bool*, void*, bool)</STRONG> (Thumb, 268 bytes, Stack size 312 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = Accel_Cal::calibrate_from_orientation(bool*, void*, bool) &rArr; Accel_Cal::accel_calibration_worker(detect_orientation_return, void*) &rArr; Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned) &rArr; get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*) &rArr; math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::detect_orientation(bool)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::accel_calibration_worker(detect_orientation_return, void*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::detect_orientation_str(detect_orientation_return)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration_measurements(float(&)[3], float(&)[3][3])
</UL>

<P><STRONG><a name="[1f4]"></a>Accel_Cal::do_accel_calibration_measurements(float(&)[3], float(&)[3][3])</STRONG> (Thumb, 92 bytes, Stack size 104 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = Accel_Cal::do_accel_calibration_measurements(float(&)[3], float(&)[3][3]) &rArr; Accel_Cal::calibrate_from_orientation(bool*, void*, bool) &rArr; Accel_Cal::accel_calibration_worker(detect_orientation_return, void*) &rArr; Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned) &rArr; get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*) &rArr; math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calibrate_from_orientation(bool*, void*, bool)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calculate_calibration_values(float(&)[6][3], float(&)[3][3], float(&)[3], float)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::least_square_calibration(float(&)[6][3], float(&)[3], float(&)[3], float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
</UL>

<P><STRONG><a name="[1f5]"></a>Accel_Cal::sphere_fit_least_squares(const float*, const float*, const float*, unsigned, unsigned, float, float*, float*, float*, float*)</STRONG> (Thumb, 2480 bytes, Stack size 312 bytes, accelerometer_calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[1f6]"></a>Accel_Cal::do_accel_calibration()</STRONG> (Thumb, 250 bytes, Stack size 368 bytes, accelerometer_calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1300<LI>Call Chain = Accel_Cal::do_accel_calibration() &rArr; Accel_Cal::do_accel_calibration_measurements(float(&)[3], float(&)[3][3]) &rArr; Accel_Cal::calibrate_from_orientation(bool*, void*, bool) &rArr; Accel_Cal::accel_calibration_worker(detect_orientation_return, void*) &rArr; Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned) &rArr; get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*) &rArr; math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, T1&rang; math::MatrixBase&lang;(unsigned)3, (unsigned)3&rang;::operator *&lang;(unsigned)3&rang;(const math::Matrix&lang;(unsigned)3, T1&rang;&) const
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::operator *(const math::Vector&lang;(unsigned)3&rang;&) const
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Vector&lang;(unsigned)3&rang;::~Vector()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Vector&lang;(unsigned)3&rang;::Vector(const float*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::~Matrix()
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::Matrix()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration_measurements(float(&)[3], float(&)[3][3])
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_accel()
</UL>

<P><STRONG><a name="[1fb]"></a>bmm050_set_rep_Z(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_perform_advanced_selftest(short*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_presetmode(unsigned char)
</UL>

<P><STRONG><a name="[1fa]"></a>bmm050_set_rep_XY(unsigned char)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_presetmode(unsigned char)
</UL>

<P><STRONG><a name="[1f9]"></a>bmm050_set_data_rate(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::bmm150_init()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_presetmode(unsigned char)
</UL>

<P><STRONG><a name="[1f8]"></a>bmm050_set_presetmode(unsigned char)</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_data_rate(unsigned char)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_rep_XY(unsigned char)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_rep_Z(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_init(bmm050_t*)
</UL>

<P><STRONG><a name="[1fe]"></a>bmm050_init_trim_registers()</STRONG> (Thumb, 408 bytes, Stack size 16 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_init(bmm050_t*)
</UL>

<P><STRONG><a name="[1fd]"></a>bmm050_set_power_mode(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state(unsigned char)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_init(bmm050_t*)
</UL>

<P><STRONG><a name="[1fc]"></a>bmm050_init(bmm050_t*)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_power_mode(unsigned char)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_init_trim_registers()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_presetmode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::bmm150_init()
</UL>

<P><STRONG><a name="[202]"></a>bmm050_get_rep_Z(unsigned char*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_presetmode(unsigned char*)
</UL>

<P><STRONG><a name="[201]"></a>bmm050_get_rep_XY(unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_presetmode(unsigned char*)
</UL>

<P><STRONG><a name="[200]"></a>bmm050_get_data_rate(unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::bmm150_init()
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_presetmode(unsigned char*)
</UL>

<P><STRONG><a name="[1ff]"></a>bmm050_get_presetmode(unsigned char*)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_data_rate(unsigned char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_rep_XY(unsigned char*)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_rep_Z(unsigned char*)
</UL>

<P><STRONG><a name="[204]"></a>bmm050_get_power_mode(unsigned char*)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state(unsigned char)
</UL>

<P><STRONG><a name="[203]"></a>bmm050_set_functional_state(unsigned char)</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_power_mode(unsigned char*)
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_power_mode(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::bmm150_init()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_perform_advanced_selftest(short*)
</UL>

<P><STRONG><a name="[76e]"></a>bmm050_get_functional_state(unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[208]"></a>bmm050_compensate_Z(short, unsigned short)</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_bmx055_remapped_mag_data_XYZ(bmm050_remapped_mag_s16_data_t*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_mag_data_XYZ(bmm050_mag_data_s16_t*)
</UL>

<P><STRONG><a name="[207]"></a>bmm050_compensate_Y(short, unsigned short)</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_s32(short, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_bmx055_remapped_mag_data_XYZ(bmm050_remapped_mag_s16_data_t*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_mag_data_XYZ(bmm050_mag_data_s16_t*)
</UL>

<P><STRONG><a name="[206]"></a>bmm050_compensate_X(short, unsigned short)</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_s32(short, unsigned short)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_bmx055_remapped_mag_data_XYZ(bmm050_remapped_mag_s16_data_t*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_mag_data_XYZ(bmm050_mag_data_s16_t*)
</UL>

<P><STRONG><a name="[205]"></a>bmm050_read_mag_data_XYZ(bmm050_mag_data_s16_t*)</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X(short, unsigned short)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y(short, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z(short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::get_mag_data()
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_perform_advanced_selftest(short*)
</UL>

<P><STRONG><a name="[209]"></a>bmm050_read_bmx055_remapped_mag_data_XYZ(bmm050_remapped_mag_s16_data_t*)</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X(short, unsigned short)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y(short, unsigned short)
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z(short, unsigned short)
</UL>

<P><STRONG><a name="[20d]"></a>bmm050_compensate_Z_s32(short, unsigned short)</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_bmx055_remapped_mag_data_XYZ_s32(bmm050_remapped_mag_s32_data_t*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_mag_data_XYZ_s32(bmm050_mag_s32_data_t*)
</UL>

<P><STRONG><a name="[20a]"></a>bmm050_compensate_Y_s32(short, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y(short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_bmx055_remapped_mag_data_XYZ_s32(bmm050_remapped_mag_s32_data_t*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_mag_data_XYZ_s32(bmm050_mag_s32_data_t*)
</UL>

<P><STRONG><a name="[20b]"></a>bmm050_compensate_X_s32(short, unsigned short)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X(short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_bmx055_remapped_mag_data_XYZ_s32(bmm050_remapped_mag_s32_data_t*)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_mag_data_XYZ_s32(bmm050_mag_s32_data_t*)
</UL>

<P><STRONG><a name="[20c]"></a>bmm050_read_mag_data_XYZ_s32(bmm050_mag_s32_data_t*)</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_s32(short, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_s32(short, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_s32(short, unsigned short)
</UL>

<P><STRONG><a name="[20e]"></a>bmm050_read_bmx055_remapped_mag_data_XYZ_s32(bmm050_remapped_mag_s32_data_t*)</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_X_s32(short, unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Y_s32(short, unsigned short)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_compensate_Z_s32(short, unsigned short)
</UL>

<P><STRONG><a name="[76f]"></a>bmm050_read_register(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[770]"></a>bmm050_write_register(unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[771]"></a>bmm050_set_selftest(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[772]"></a>bmm050_get_selftest_XYZ(unsigned char*)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[773]"></a>bmm050_set_spi3(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>bmm050_set_control_measurement_y(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_perform_advanced_selftest(short*)
</UL>

<P><STRONG><a name="[210]"></a>bmm050_set_control_measurement_x(unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_perform_advanced_selftest(short*)
</UL>

<P><STRONG><a name="[212]"></a>bmm050_set_advanced_selftest(unsigned char)</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_perform_advanced_selftest(short*)
</UL>

<P><STRONG><a name="[20f]"></a>bmm050_perform_advanced_selftest(short*)</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, bmm050.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_advanced_selftest(unsigned char)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_control_measurement_x(unsigned char)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_control_measurement_y(unsigned char)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_mag_data_XYZ(bmm050_mag_data_s16_t*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state(unsigned char)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_rep_Z(unsigned char)
</UL>

<P><STRONG><a name="[774]"></a>bmm050_get_advanced_selftest(unsigned char*)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[775]"></a>bmm050_soft_rst()</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[776]"></a>bmm050_get_raw_xyz(bmm050_mag_data_s16_t*)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[777]"></a>bmm050_get_bmx055_remapped_raw_xyz(bmm050_remapped_mag_s16_data_t*)</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, bmm050.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>BMM150_delay_msek(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bmm150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = BMM150_delay_msek(unsigned) &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmm150.o(.text)
</UL>
<P><STRONG><a name="[214]"></a>BMM150_SPI_bus_read(unsigned char, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, bmm150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = BMM150_SPI_bus_read(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmm150.o(.text)
</UL>
<P><STRONG><a name="[215]"></a>BMM150_SPI_bus_write(unsigned char, unsigned char, unsigned char*, unsigned char)</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, bmm150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = BMM150_SPI_bus_write(unsigned char, unsigned char, unsigned char*, unsigned char) &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmm150.o(.text)
</UL>
<P><STRONG><a name="[216]"></a>bmm150_device_init(const char*)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, bmm150.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::bmm150_init()
</UL>

<P><STRONG><a name="[217]"></a>BMM150::BMM150(const char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bmm150.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BMM150::BMM150(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[778]"></a>BMM150::BMM150__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, bmm150.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>BMM150::bmm150_init()</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bmm150.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_device_init(const char*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_functional_state(unsigned char)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_get_data_rate(unsigned char*)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_init(bmm050_t*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_set_data_rate(unsigned char)
</UL>

<P><STRONG><a name="[219]"></a>BMM150::get_mag_data()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bmm150.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm050_read_mag_data_XYZ(bmm050_mag_data_s16_t*)
</UL>

<P><STRONG><a name="[21a]"></a>AccelCal::update_status()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, accelcal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AccelCal::update_status()
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_status() const
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update()
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::collect_sample()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::clear()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::start()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[21c]"></a>AccelCal::start()</STRONG> (Thumb, 370 bytes, Stack size 80 bytes, accelcal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = AccelCal::start() &rArr; AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::cast_to_float(ap_var_type) const
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::set_value(ap_var_type, void*, float*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::clear()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acccal()
</UL>

<P><STRONG><a name="[21f]"></a>AccelCal::clear()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, accelcal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AccelCal::clear() &rArr; AccelCalibrator::clear() &rArr; AccelCalibrator::set_status(accel_cal_status_t) &rArr;  AccelCalibrator::set_status(accel_cal_status_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::clear()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::success()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::fail()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::cancel()
</UL>

<P><STRONG><a name="[220]"></a>AccelCal::cancel()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, accelcal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::clear()
</UL>

<P><STRONG><a name="[221]"></a>AccelCal::fail()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, accelcal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AccelCal::fail() &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update()
</UL>

<P><STRONG><a name="[222]"></a>AccelCal::_acal_save_calibrations()</STRONG> (Thumb, 272 bytes, Stack size 184 bytes, accelcal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = AccelCal::_acal_save_calibrations() &rArr; AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::set_value(ap_var_type, void*, float*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_calibration(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update()
</UL>

<P><STRONG><a name="[225]"></a>AccelCal::success()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, accelcal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AccelCal::success() &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update()
</UL>

<P><STRONG><a name="[226]"></a>AccelCal::collect_sample()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, accelcal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AccelCal::collect_sample() &rArr; AccelCalibrator::collect_sample() &rArr; AccelCalibrator::set_status(accel_cal_status_t) &rArr;  AccelCalibrator::set_status(accel_cal_status_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::collect_sample()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update()
</UL>

<P><STRONG><a name="[228]"></a>AccelCal::update()</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, accelcal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = AccelCal::update() &rArr; AccelCal::_acal_save_calibrations() &rArr; AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::collect_sample()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::success()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::_acal_save_calibrations()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::fail()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update_status()
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_acc_cal
</UL>

<P><STRONG><a name="[779]"></a>AccelCal::gcs_vehicle_position(float)</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, accelcal.o(.text), UNUSED)

<P><STRONG><a name="[22a]"></a>AccelCalibrator::running()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, accelcalibrator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::set_status(accel_cal_status_t)
</UL>

<P><STRONG><a name="[229]"></a>AccelCalibrator::set_status(accel_cal_status_t)</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = AccelCalibrator::set_status(accel_cal_status_t) &rArr;  AccelCalibrator::set_status(accel_cal_status_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::set_status(accel_cal_status_t)
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::running()
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::set_status(accel_cal_status_t)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::clear()
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::collect_sample()
</UL>

<P><STRONG><a name="[21d]"></a>AccelCalibrator::clear()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AccelCalibrator::clear() &rArr; AccelCalibrator::set_status(accel_cal_status_t) &rArr;  AccelCalibrator::set_status(accel_cal_status_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::set_status(accel_cal_status_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::AccelCalibrator()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::clear()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::start()
</UL>

<P><STRONG><a name="[22b]"></a>AccelCalibrator::AccelCalibrator()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AccelCalibrator::AccelCalibrator() &rArr; AccelCalibrator::clear() &rArr; AccelCalibrator::set_status(accel_cal_status_t) &rArr;  AccelCalibrator::set_status(accel_cal_status_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[77a]"></a>AccelCalibrator::AccelCalibrator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, accelcalibrator.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 272 bytes, Stack size 96 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; AccelCalibrator::clear() &rArr; AccelCalibrator::set_status(accel_cal_status_t) &rArr;  AccelCalibrator::set_status(accel_cal_status_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::set_status(accel_cal_status_t)
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::clear()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float)
</UL>

<P><STRONG><a name="[21e]"></a>AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float)</STRONG> (Thumb, 140 bytes, Stack size 72 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float) &rArr; AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; AccelCalibrator::clear() &rArr; AccelCalibrator::set_status(accel_cal_status_t) &rArr;  AccelCalibrator::set_status(accel_cal_status_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::start()
</UL>

<P><STRONG><a name="[227]"></a>AccelCalibrator::collect_sample()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AccelCalibrator::collect_sample() &rArr; AccelCalibrator::set_status(accel_cal_status_t) &rArr;  AccelCalibrator::set_status(accel_cal_status_t) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::set_status(accel_cal_status_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::collect_sample()
</UL>

<P><STRONG><a name="[22f]"></a>AccelCalibrator::get_calibration(Vector3&lang;float&rang;&) const</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, accelcalibrator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -() const
</UL>

<P><STRONG><a name="[223]"></a>AccelCalibrator::get_calibration(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AccelCalibrator::get_calibration(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const &rArr; Vector3&lang;float&rang;::operator -() const
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -() const
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::_acal_save_calibrations()
</UL>

<P><STRONG><a name="[231]"></a>AccelCalibrator::get_calibration(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, accelcalibrator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -() const
</UL>

<P><STRONG><a name="[241]"></a>AccelCalibrator::accept_result() const</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, accelcalibrator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float)
</UL>

<P><STRONG><a name="[232]"></a>AccelCalibrator::calc_residual(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&) const</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AccelCalibrator::calc_residual(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&) const &rArr; Vector3&lang;float&rang;::length() const &rArr; pythagorous3(float, float, float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3(float, float, float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_mean_squared_residuals(const AccelCalibrator::param_t&) const
</UL>

<P><STRONG><a name="[237]"></a>AccelCalibrator::get_sample(unsigned char, Vector3&lang;float&rang;&) const</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AccelCalibrator::get_sample(unsigned char, Vector3&lang;float&rang;&) const &rArr; Vector3&lang;float&rang;::operator /(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_sample_corrected(unsigned char, Vector3&lang;float&rang;&) const
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::accept_sample(const Vector3&lang;float&rang;&)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_mean_squared_residuals(const AccelCalibrator::param_t&) const
</UL>

<P><STRONG><a name="[238]"></a>AccelCalibrator::calc_mean_squared_residuals(const AccelCalibrator::param_t&) const</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AccelCalibrator::calc_mean_squared_residuals(const AccelCalibrator::param_t&) const &rArr; AccelCalibrator::calc_residual(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&) const &rArr; Vector3&lang;float&rang;::length() const &rArr; pythagorous3(float, float, float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_sample(unsigned char, Vector3&lang;float&rang;&) const
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_residual(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_mean_squared_residuals() const
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
</UL>

<P><STRONG><a name="[23e]"></a>AccelCalibrator::get_num_params() const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, accelcalibrator.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
</UL>

<P><STRONG><a name="[239]"></a>AccelCalibrator::calc_jacob(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&, VectorN&lang;float, (unsigned char)9&rang;&) const</STRONG> (Thumb, 812 bytes, Stack size 120 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AccelCalibrator::calc_jacob(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&, VectorN&lang;float, (unsigned char)9&rang;&) const &rArr; Vector3&lang;float&rang;::length() const &rArr; pythagorous3(float, float, float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorN&lang;float, (unsigned char)9&rang;::operator [](unsigned char)
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3(float, float, float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
</UL>

<P><STRONG><a name="[23b]"></a>AccelCalibrator::run_fit(unsigned char, float&)</STRONG> (Thumb, 800 bytes, Stack size 528 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = AccelCalibrator::run_fit(unsigned char, float&) &rArr; inverse(float*, float*, unsigned short) &rArr; mat_inverse(float*, float*, unsigned char) &rArr; mat_LU_decompose(float*, float*, float*, float*, unsigned char) &rArr; mat_mul(float*, float*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse(float*, float*, unsigned short)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorN&lang;float, (unsigned char)9&rang;::operator [](unsigned char)
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorN&lang;float, (unsigned char)9&rang;::VectorN()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorN&lang;float, (unsigned char)9&rang;::zero()
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_jacob(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&, VectorN&lang;float, (unsigned char)9&rang;&) const
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_num_params() const
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_mean_squared_residuals(const AccelCalibrator::param_t&) const
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_sample(unsigned char, Vector3&lang;float&rang;&) const
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_residual(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&) const
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float)
</UL>

<P><STRONG><a name="[240]"></a>AccelCalibrator::accept_sample(const Vector3&lang;float&rang;&)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AccelCalibrator::accept_sample(const Vector3&lang;float&rang;&) &rArr; Vector3&lang;float&rang;::length() const &rArr; pythagorous3(float, float, float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_sample(unsigned char, Vector3&lang;float&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float)
</UL>

<P><STRONG><a name="[1af]"></a>AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float)</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, accelcalibrator.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float) &rArr; AccelCalibrator::run_fit(unsigned char, float&) &rArr; inverse(float*, float*, unsigned short) &rArr; mat_inverse(float*, float*, unsigned char) &rArr; mat_LU_decompose(float*, float*, float*, float*, unsigned char) &rArr; mat_mul(float*, float*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::accept_sample(const Vector3&lang;float&rang;&)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::accept_result() const
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::set_status(accel_cal_status_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::update()
</UL>

<P><STRONG><a name="[242]"></a>AccelCalibrator::get_sample_corrected(unsigned char, Vector3&lang;float&rang;&) const</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, accelcalibrator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3(float, float, float, float, float, float, float, float, float)
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_sample(unsigned char, Vector3&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[243]"></a>AccelCalibrator::calc_mean_squared_residuals() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, accelcalibrator.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_mean_squared_residuals(const AccelCalibrator::param_t&) const
</UL>

<P><STRONG><a name="[244]"></a>DCM_EKF::DCM_EKF()</STRONG> (Thumb, 510 bytes, Stack size 16 bytes, dcm_ekf_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCM_EKF::DCM_EKF()
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[77b]"></a>DCM_EKF::DCM_EKF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dcm_ekf_imu.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)</STRONG> (Thumb, 26170 bytes, Stack size 680 bytes, dcm_ekf_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[24a]"></a>DCM_EKF::resetEKF()</STRONG> (Thumb, 350 bytes, Stack size 8 bytes, dcm_ekf_imu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
</UL>

<P><STRONG><a name="[77c]"></a>DCM_EKF::getCovariance(float*)</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, dcm_ekf_imu.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>log2f_c(float)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, notchfilter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = log2f_c(float) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotchFilter&lang;Vector3&lang;float&rang;&rang;::init(float, float, float, float)
</UL>

<P><STRONG><a name="[256]"></a>sqf(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ap_smallekf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictCovariance()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
</UL>

<P><STRONG><a name="[269]"></a>loop_lim(float, float)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, ap_smallekf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::getEuler(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
</UL>

<P><STRONG><a name="[24e]"></a>SmallEKF::SmallEKF()</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SmallEKF::SmallEKF() &rArr; Matrix3&lang;float&rang;::Matrix3()
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3()
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[77d]"></a>SmallEKF::SmallEKF__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ap_smallekf.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>SmallEKF::fixCovariance()</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SmallEKF::fixCovariance()
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
</UL>

<P><STRONG><a name="[250]"></a>SmallEKF::calcMagHeadingInnov()</STRONG> (Thumb, 558 bytes, Stack size 120 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SmallEKF::calcMagHeadingInnov() &rArr; Matrix3&lang;float&rang;::operator *(const Matrix3&lang;float&rang;&) const &rArr; Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Matrix3&lang;float&rang;&) const
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator [](unsigned char)
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator [](unsigned char)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
</UL>

<P><STRONG><a name="[254]"></a>SmallEKF::fuseCompass()</STRONG> (Thumb, 3288 bytes, Stack size 448 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = SmallEKF::fuseCompass() &rArr; SmallEKF::calcMagHeadingInnov() &rArr; Matrix3&lang;float&rang;::operator *(const Matrix3&lang;float&rang;&) const &rArr; Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *=(const Quaternion&)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::normalize()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator [](unsigned char)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::calcMagHeadingInnov()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fixCovariance()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqf(float)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[264]"></a>SmallEKF::readMagData()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ap_smallekf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[25c]"></a>SmallEKF::alignHeading()</STRONG> (Thumb, 264 bytes, Stack size 120 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SmallEKF::alignHeading() &rArr; SmallEKF::calcMagHeadingInnov() &rArr; Matrix3&lang;float&rang;::operator *(const Matrix3&lang;float&rang;&) const &rArr; Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::transposed() const
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *=(const Quaternion&)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::normalize()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator [](unsigned char)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::calcMagHeadingInnov()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[25e]"></a>SmallEKF::fuseVelocity(bool)</STRONG> (Thumb, 606 bytes, Stack size 128 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SmallEKF::fuseVelocity(bool) &rArr; Quaternion::normalize() &rArr; Quaternion::length() const &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *=(const Quaternion&)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::normalize()
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator [](unsigned char)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator [](unsigned char)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fixCovariance()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqf(float)
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[25f]"></a>SmallEKF::predictCovariance()</STRONG> (Thumb, 12552 bytes, Stack size 1488 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = SmallEKF::predictCovariance()
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator [](unsigned char)
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqf(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[260]"></a>SmallEKF::predictStates()</STRONG> (Thumb, 562 bytes, Stack size 128 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SmallEKF::predictStates() &rArr; Quaternion::normalize() &rArr; Quaternion::length() const &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator %(const Vector3&lang;float&rang;&) const
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotation_matrix(Matrix3&lang;float&rang;&) const
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *=(const Quaternion&)
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::normalize()
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator [](unsigned char)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[263]"></a>SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)</STRONG> (Thumb, 562 bytes, Stack size 40 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&) &rArr; SmallEKF::predictCovariance()
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator [](unsigned char)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictCovariance()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::readMagData()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqf(float)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::sekf_update(void*)
</UL>

<P><STRONG><a name="[265]"></a>SmallEKF::getDebug(float&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ap_smallekf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_euler(float&, float&, float&) const
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
</UL>

<P><STRONG><a name="[267]"></a>SmallEKF::getGyroBias(Vector3&lang;float&rang;&) const</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ap_smallekf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::zero()
</UL>

<P><STRONG><a name="[77e]"></a>SmallEKF::getQuat(Quaternion&) const</STRONG> (Thumb, 14 bytes, Stack size 12 bytes, ap_smallekf.o(.text), UNUSED)

<P><STRONG><a name="[77f]"></a>SmallEKF::getStatus() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ap_smallekf.o(.text), UNUSED)

<P><STRONG><a name="[34f]"></a>SmallEKF::setMagData(Vector3&lang;float&rang;)</STRONG> (Thumb, 28 bytes, Stack size 28 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SmallEKF::setMagData(Vector3&lang;float&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[350]"></a>SmallEKF::setMeasVelNED(Vector3&lang;float&rang;)</STRONG> (Thumb, 20 bytes, Stack size 28 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SmallEKF::setMeasVelNED(Vector3&lang;float&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[351]"></a>SmallEKF::setEMag(Vector3&lang;float&rang;)</STRONG> (Thumb, 22 bytes, Stack size 28 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SmallEKF::setEMag(Vector3&lang;float&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[352]"></a>SmallEKF::setBMag(Vector3&lang;float&rang;)</STRONG> (Thumb, 22 bytes, Stack size 28 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SmallEKF::setBMag(Vector3&lang;float&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[268]"></a>SmallEKF::getEuler(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, ap_smallekf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SmallEKF::getEuler(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_lim(float, float)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::sekf_update(void*)
</UL>

<P><STRONG><a name="[28b]"></a>SerialManager::SerialManager(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, serial_com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::Mavlink(const char*, QRingBuffer&)
</UL>

<P><STRONG><a name="[780]"></a>SerialManager::SerialManager__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, serial_com.o(.text), UNUSED)

<P><STRONG><a name="[26a]"></a>SerialManager::start_init()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, serial_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SerialManager::start_init() &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::serial_update(void*)
</UL>

<P><STRONG><a name="[781]"></a>limit_loop(float, float)</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, can_com.o(.text), UNUSED)

<P><STRONG><a name="[782]"></a>correct_angle_deg(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, float)</STRONG> (Thumb, 404 bytes, Stack size 0 bytes, can_com.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>angle_diff(Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, can_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[281]"></a>map2short(float)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, can_com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rpy(float, float, float)
</UL>

<P><STRONG><a name="[26e]"></a>CAN::CAN()</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN::CAN() &rArr; FIR_VEC3F::FIR_VEC3F(unsigned, const float*, const float*, const float*) &rArr; filter_fir_f32_init(unsigned, const float*, float*, unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::FIR_VEC3F()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::FIR_VEC3F(unsigned, const float*, const float*, const float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[783]"></a>CAN::CAN__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, can_com.o(.text), UNUSED)

<P><STRONG><a name="[271]"></a>CAN::start_init()</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CAN::start_init() &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::setup(const Scheduler::Task*, unsigned char)
</UL>

<P><STRONG><a name="[274]"></a>CAN::can_recv_data()</STRONG> (Thumb, 2374 bytes, Stack size 16 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = CAN::can_recv_data() &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::update()
</UL>

<P><STRONG><a name="[278]"></a>CAN::update()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = CAN::update() &rArr; CAN::can_recv_data() &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_recv_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::can_update(void*)
</UL>

<P><STRONG><a name="[279]"></a>CAN::can_write(rt_can_msg)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CAN::can_write(rt_can_msg) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_test(unsigned long, int)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::read_block(unsigned long, unsigned long)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_block(unsigned long, can_block)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::read_param(unsigned long, unsigned long, float)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_param(unsigned long, unsigned long, float)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_y(float)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rp(float, float)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rpy(float, float, float)
</UL>

<P><STRONG><a name="[27b]"></a>CAN::get_enc(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CAN::get_enc(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) &rArr; Vector3&lang;float&rang;::operator /(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[27c]"></a>CAN::get_enc_trifun(Vector3&lang;float&rang;&)</STRONG> (Thumb, 488 bytes, Stack size 88 bytes, can_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::update(Vector3&lang;float&rang;)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[27e]"></a>CAN::encoder_zero_calibration()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN::encoder_zero_calibration()
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::enc_zero_calibration()
</UL>

<P><STRONG><a name="[27f]"></a>CAN::send_control_rpy(float, float, float)</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CAN::send_control_rpy(float, float, float) &rArr; CAN::can_write(rt_can_msg) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_write(rt_can_msg)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map2short(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::direction_update(void*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[283]"></a>CAN::send_control_rp(float, float)</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, can_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_write(rt_can_msg)
</UL>

<P><STRONG><a name="[284]"></a>CAN::send_control_y(float)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, can_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_write(rt_can_msg)
</UL>

<P><STRONG><a name="[285]"></a>CAN::write_param(unsigned long, unsigned long, float)</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CAN::write_param(unsigned long, unsigned long, float) &rArr; CAN::can_write(rt_can_msg) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_write(rt_can_msg)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_write_param(void*)
</UL>

<P><STRONG><a name="[286]"></a>CAN::read_param(unsigned long, unsigned long, float)</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CAN::read_param(unsigned long, unsigned long, float) &rArr; CAN::can_write(rt_can_msg) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_write(rt_can_msg)
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_motor_state_data_pck(void*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_motors_config_data_pck(void*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_read_param(void*)
</UL>

<P><STRONG><a name="[287]"></a>CAN::write_block(unsigned long, can_block)</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, can_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_write(rt_can_msg)
</UL>

<P><STRONG><a name="[288]"></a>CAN::read_block(unsigned long, unsigned long)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, can_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_write(rt_can_msg)
</UL>

<P><STRONG><a name="[289]"></a>CAN::write_test(unsigned long, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, can_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_write(rt_can_msg)
</UL>

<P><STRONG><a name="[784]"></a>return_float(const Mavlink_msg_t*, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mavlink_com.o(.text), UNUSED)

<P><STRONG><a name="[785]"></a>return_uint32(const Mavlink_msg_t*, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mavlink_com.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>Mavlink::Mavlink(const char*, QRingBuffer&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mavlink::Mavlink(const char*, QRingBuffer&)
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager::SerialManager(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[786]"></a>Mavlink::Mavlink__sub_object(const char*, QRingBuffer&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, mavlink_com.o(.text), UNUSED)

<P><STRONG><a name="[28d]"></a>Mavlink::crc_accumulate(unsigned char, unsigned short*)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_check(Mavlink_msg_t*, unsigned char)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_calculate(const unsigned char*, unsigned short)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short)
</UL>

<P><STRONG><a name="[28c]"></a>Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short) &rArr; Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_check(Mavlink_msg_t*, unsigned char)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char)
</UL>

<P><STRONG><a name="[28f]"></a>Mavlink::crc_init(unsigned short*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mavlink_com.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_calculate(const unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[28e]"></a>Mavlink::crc_calculate(const unsigned char*, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Mavlink::crc_calculate(const unsigned char*, unsigned short) &rArr; Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_init(unsigned short*)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_check(Mavlink_msg_t*, unsigned char)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char)
</UL>

<P><STRONG><a name="[290]"></a>Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char)</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char) &rArr; Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short) &rArr; Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_calculate(const unsigned char*, unsigned short)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::motors_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motors_config_data_t*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::controller_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_controller_config_data_t*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::motor_state_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motor_state_data_t*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::control_param_pack(unsigned char, unsigned char, Mavlink_msg_t*, unsigned char, float, float, float, float, float, float, float)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::attitude_quaternion_pack(unsigned char, unsigned char, Mavlink_msg_t*, unsigned, float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[291]"></a>Mavlink::attitude_quaternion_pack(unsigned char, unsigned char, Mavlink_msg_t*, unsigned, float, float, float, float, float, float, float)</STRONG> (Thumb, 134 bytes, Stack size 88 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Mavlink::attitude_quaternion_pack(unsigned char, unsigned char, Mavlink_msg_t*, unsigned, float, float, float, float, float, float, float) &rArr; Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char) &rArr; Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short) &rArr; Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_attitude_quat_pck(void*)
</UL>

<P><STRONG><a name="[292]"></a>Mavlink::attitude_quaternion_decode(const Mavlink_msg_t*, Mavlink_attitude_quaternion_t*)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mavlink_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>

<P><STRONG><a name="[293]"></a>Mavlink::control_param_pack(unsigned char, unsigned char, Mavlink_msg_t*, unsigned char, float, float, float, float, float, float, float)</STRONG> (Thumb, 136 bytes, Stack size 96 bytes, mavlink_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>

<P><STRONG><a name="[294]"></a>Mavlink::control_param_decode(const Mavlink_msg_t*, Mavlink_control_param_t*)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, mavlink_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>

<P><STRONG><a name="[295]"></a>Mavlink::motor_state_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motor_state_data_t*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Mavlink::motor_state_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motor_state_data_t*) &rArr; Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char) &rArr; Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short) &rArr; Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_motor_state_data(void*)
</UL>

<P><STRONG><a name="[296]"></a>Mavlink::controller_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_controller_config_data_t*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Mavlink::controller_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_controller_config_data_t*) &rArr; Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char) &rArr; Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short) &rArr; Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_controller_config_data(void*)
</UL>

<P><STRONG><a name="[297]"></a>Mavlink::motors_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motors_config_data_t*)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Mavlink::motors_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motors_config_data_t*) &rArr; Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char) &rArr; Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short) &rArr; Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink_crc_get(Mavlink_msg_t*, unsigned char)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_motors_config_data(void*)
</UL>

<P><STRONG><a name="[298]"></a>Mavlink::gimbal_control_data_decode(const Mavlink_msg_t*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mavlink::gimbal_control_data_decode(const Mavlink_msg_t*, Vector3&lang;float&rang;*) &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[299]"></a>Mavlink::gimbal_command_data_decode(const Mavlink_msg_t*)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Mavlink::gimbal_command_data_decode(const Mavlink_msg_t*) &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[29a]"></a>Mavlink::drone_data_decode(const Mavlink_msg_t*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Mavlink::drone_data_decode(const Mavlink_msg_t*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*) &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[29c]"></a>Mavlink::mavlink2serial(Mavlink_msg_t*, unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mavlink::mavlink2serial(Mavlink_msg_t*, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::send_mavlink(Mavlink_msg_t*)
</UL>

<P><STRONG><a name="[29b]"></a>Mavlink::send_mavlink(Mavlink_msg_t*)</STRONG> (Thumb, 36 bytes, Stack size 272 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Mavlink::send_mavlink(Mavlink_msg_t*) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::mavlink2serial(Mavlink_msg_t*, unsigned char*)
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_attitude_quat_pck(void*)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_motor_state_data(void*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_controller_config_data(void*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_motors_config_data(void*)
</UL>

<P><STRONG><a name="[29d]"></a>Mavlink::receive_mavlink()</STRONG> (Thumb, 322 bytes, Stack size 272 bytes, mavlink_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = Mavlink::receive_mavlink() &rArr; QRingBuffer::write(Mavlink_msg_t*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::isFull()
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::write(Mavlink_msg_t*, int)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::serial_update(void*)
</UL>

<P><STRONG><a name="[2a0]"></a>Mavlink::mavlink_crc_check(Mavlink_msg_t*, unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, mavlink_com.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_calculate(const unsigned char*, unsigned short)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_accumulate_buffer(unsigned short*, const char*, unsigned short)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::crc_accumulate(unsigned char, unsigned short*)
</UL>

<P><STRONG><a name="[2a1]"></a>Fast_Uart_Config</STRONG> (Thumb, 528 bytes, Stack size 96 bytes, fast_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Fast_Uart_Config &rArr; USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2ae]"></a>fast_uart_tx</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, fast_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = fast_uart_tx &rArr; DMA_SetCurrDataCounter &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_fast_uart_write
</UL>

<P><STRONG><a name="[34]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fast_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DMA1_Stream6_IRQHandler &rArr; DMA_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, fast_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; DMA_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USART2_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, fast_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b7]"></a>fast_uart_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fast_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = fast_uart_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[2b9]"></a>QRingBuffer::QRingBuffer()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = QRingBuffer::QRingBuffer() &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[787]"></a>QRingBuffer::QRingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ringbuffer.o(.text), UNUSED)

<P><STRONG><a name="[2bb]"></a>QRingBuffer::~QRingBuffer()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = QRingBuffer::~QRingBuffer() &rArr; operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::~Gimbal()
</UL>

<P><STRONG><a name="[788]"></a>QRingBuffer::~QRingBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ringbuffer.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>QRingBuffer::isFull()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::receive_mavlink()
</UL>

<P><STRONG><a name="[34c]"></a>QRingBuffer::isEmpty()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ringbuffer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[789]"></a>QRingBuffer::empty()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ringbuffer.o(.text), UNUSED)

<P><STRONG><a name="[78a]"></a>QRingBuffer::getLength()</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ringbuffer.o(.text), UNUSED)

<P><STRONG><a name="[29f]"></a>QRingBuffer::write(Mavlink_msg_t*, int)</STRONG> (Thumb, 658 bytes, Stack size 24 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = QRingBuffer::write(Mavlink_msg_t*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::receive_mavlink()
</UL>

<P><STRONG><a name="[2bf]"></a>QRingBuffer::read(Mavlink_msg_t*, int)</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, ringbuffer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = QRingBuffer::read(Mavlink_msg_t*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[2c0]"></a>AP_Param::erase_all()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, parameter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_format
</UL>

<P><STRONG><a name="[2c2]"></a>AP_Param::type_size(ap_var_type)</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AP_Param::type_size(ap_var_type) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_var_info()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_group_info(const AP_Param::GroupInfo*, unsigned char)
</UL>

<P><STRONG><a name="[2c3]"></a>AP_Param::check_group_info(const AP_Param::GroupInfo*, unsigned char)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = AP_Param::check_group_info(const AP_Param::GroupInfo*, unsigned char) &rArr; AP_Param::type_size(ap_var_type) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::type_size(ap_var_type)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen_P(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_var_info()
</UL>

<P><STRONG><a name="[2c6]"></a>AP_Param::check_var_info()</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AP_Param::check_var_info() &rArr; AP_Param::check_group_info(const AP_Param::GroupInfo*, unsigned char) &rArr; AP_Param::type_size(ap_var_type) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_group_info(const AP_Param::GroupInfo*, unsigned char)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::type_size(ap_var_type)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_pointer(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen_P(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::setup(const Scheduler::Task*, unsigned char)
</UL>

<P><STRONG><a name="[1a4]"></a>AP_Param::cast_to_float(ap_var_type) const</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::start()
</UL>

<P><STRONG><a name="[2c8]"></a>AP_Param::find_var_info_group(const AP_Param::GroupInfo*, unsigned char, unsigned*, const AP_Param::GroupInfo**, unsigned char*) const</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AP_Param::find_var_info_group(const AP_Param::GroupInfo*, unsigned char, unsigned*, const AP_Param::GroupInfo**, unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_pointer(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_var_info(unsigned*, const AP_Param::GroupInfo**, unsigned char*)
</UL>

<P><STRONG><a name="[2c9]"></a>AP_Param::find_var_info(unsigned*, const AP_Param::GroupInfo**, unsigned char*)</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AP_Param::find_var_info(unsigned*, const AP_Param::GroupInfo**, unsigned char*) &rArr; AP_Param::find_var_info_group(const AP_Param::GroupInfo*, unsigned char, unsigned*, const AP_Param::GroupInfo**, unsigned char*) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_var_info_group(const AP_Param::GroupInfo*, unsigned char, unsigned*, const AP_Param::GroupInfo**, unsigned char*) const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_pointer(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_def_value_ptr(const char*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
</UL>

<P><STRONG><a name="[1a6]"></a>AP_Param::save()</STRONG> (Thumb, 606 bytes, Stack size 72 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::cast_to_float(ap_var_type) const
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_write
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_open
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fexist
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_close
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_var_info(unsigned*, const AP_Param::GroupInfo**, unsigned char*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::type_size(ap_var_type)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::_acal_save_calibrations()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::start()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_default_all()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_all()
</UL>

<P><STRONG><a name="[2ce]"></a>AP_Param::load()</STRONG> (Thumb, 534 bytes, Stack size 88 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = AP_Param::load() &rArr; e2pfs_read &rArr; _e2pfs_page_read &rArr; _fs_get_page_state &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_read
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_open
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fexist
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_close
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;short, (ap_var_type)2&rang;::set(const short&)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;int, (ap_var_type)3&rang;::set(const int&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::set(const float&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;signed char, (ap_var_type)1&rang;::set(const signed char&)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_var_info(unsigned*, const AP_Param::GroupInfo**, unsigned char*)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::type_size(ap_var_type)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load_all()
</UL>

<P><STRONG><a name="[2d4]"></a>AP_Param::load_all()</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = AP_Param::load_all() &rArr; AP_Param::load() &rArr; e2pfs_read &rArr; _e2pfs_page_read &rArr; _fs_get_page_state &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_pointer(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::setup(const Scheduler::Task*, unsigned char)
</UL>

<P><STRONG><a name="[2d5]"></a>AP_Param::save_all()</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = AP_Param::save_all() &rArr; AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_pointer(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::enc_zero_calibration()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::direction_update(void*)
</UL>

<P><STRONG><a name="[1a5]"></a>AP_Param::set_value(ap_var_type, void*, float*)</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AP_Param::set_value(ap_var_type, void*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;short, (ap_var_type)2&rang;::set(const short&)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;int, (ap_var_type)3&rang;::set(const int&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::set(const float&)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;signed char, (ap_var_type)1&rang;::set(const signed char&)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::_acal_save_calibrations()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::start()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_default_all()
</UL>

<P><STRONG><a name="[2d6]"></a>AP_Param::save_default_all()</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, parameter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::set_value(ap_var_type, void*, float*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_pointer(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
</UL>

<P><STRONG><a name="[78b]"></a>AP_Param::get_value(ap_var_type, void*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, parameter.o(.text), UNUSED)

<P><STRONG><a name="[2d7]"></a>AP_Param::find_group(const char*, unsigned char, const AP_Param::GroupInfo*, ap_var_type*)</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AP_Param::find_group(const char*, unsigned char, const AP_Param::GroupInfo*, ap_var_type*) &rArr; strcasecmp_P(const char*, const char*) &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_pointer(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp_P(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
</UL>

<P><STRONG><a name="[1a3]"></a>AP_Param::find(const char*, ap_var_type*)</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AP_Param::find(const char*, ap_var_type*) &rArr; AP_Param::find_group(const char*, unsigned char, const AP_Param::GroupInfo*, ap_var_type*) &rArr; strcasecmp_P(const char*, const char*) &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_group(const char*, unsigned char, const AP_Param::GroupInfo*, ap_var_type*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_pointer(const void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_byte(const void*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen_P(const char*)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp_P(const char*, const char*)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::_acal_save_calibrations()
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::start()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_def_value_ptr(const char*)
</UL>

<P><STRONG><a name="[2da]"></a>AP_Param::find_object(const char*)</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, parameter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pgm_read_pointer(const void*)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp_P(const char*, const char*)
</UL>

<P><STRONG><a name="[2db]"></a>AP_Param::find_def_value_ptr(const char*)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, parameter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_var_info(unsigned*, const AP_Param::GroupInfo**, unsigned char*)
</UL>

<P><STRONG><a name="[2c1]"></a>e2pfs_format</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = e2pfs_format &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_write_item
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_set_page_state
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;format_e2pfs
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::erase_all()
</UL>

<P><STRONG><a name="[2cb]"></a>e2pfs_open</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = e2pfs_open &rArr; _fs_read_item &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_get_fd
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_read_item
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::read_imu_acc_data()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::write_imu_acc_data()
</UL>

<P><STRONG><a name="[2cf]"></a>e2pfs_read</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = e2pfs_read &rArr; _e2pfs_page_read &rArr; _fs_get_page_state &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::read_imu_acc_data()
</UL>

<P><STRONG><a name="[2cc]"></a>e2pfs_write</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::write_imu_acc_data()
</UL>

<P><STRONG><a name="[2ee]"></a>e2pfs_lseek</STRONG> (Thumb, 738 bytes, Stack size 40 bytes, e2pfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_get_page_state
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>

<P><STRONG><a name="[2cd]"></a>e2pfs_close</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = e2pfs_close &rArr; _fs_write_item &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_free_fd
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_write_item
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::read_imu_acc_data()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::write_imu_acc_data()
</UL>

<P><STRONG><a name="[2ef]"></a>e2pfs_remove</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = e2pfs_remove &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_write_item
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_read_item
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_set_page_state
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_get_page_state
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_e2pfs
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::write_imu_acc_data()
</UL>

<P><STRONG><a name="[2f0]"></a>e2pfs_fsinfo</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = e2pfs_fsinfo &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsinfo_e2pfs
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[2f1]"></a>e2pfs_file_pgs</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = e2pfs_file_pgs &rArr; _fs_read_item &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_read_item
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_get_page_state
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_ls
</UL>

<P><STRONG><a name="[2ca]"></a>e2pfs_fexist</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = e2pfs_fexist &rArr; _fs_read_item &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_read_item
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_e2pfs
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::read_imu_acc_data()
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::write_imu_acc_data()
</UL>

<P><STRONG><a name="[2f2]"></a>e2pfs_ls</STRONG> (Thumb, 312 bytes, Stack size 80 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = e2pfs_ls &rArr; e2pfs_file_pgs &rArr; _fs_read_item &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_file_pgs
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_read_item
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls_e2pfs
</UL>

<P><STRONG><a name="[2f5]"></a>get_used_ram</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, e2pfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_read_item
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>

<P><STRONG><a name="[ea]"></a>format_e2pfs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = format_e2pfs &rArr; e2pfs_format &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_format
</UL>
<BR>[Address Reference Count : 1]<UL><LI> e2pfs.o(FSymTab)
</UL>
<P><STRONG><a name="[eb]"></a>rm_e2pfs</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = rm_e2pfs &rArr; e2pfs_remove &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_remove
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fexist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> e2pfs.o(FSymTab)
</UL>
<P><STRONG><a name="[ec]"></a>ls_e2pfs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ls_e2pfs &rArr; e2pfs_ls &rArr; e2pfs_file_pgs &rArr; _fs_read_item &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_ls
</UL>
<BR>[Address Reference Count : 1]<UL><LI> e2pfs.o(FSymTab)
</UL>
<P><STRONG><a name="[ed]"></a>fsinfo_e2pfs</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = fsinfo_e2pfs &rArr; e2pfs_fsinfo &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fsinfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> e2pfs.o(FSymTab)
</UL>
<P><STRONG><a name="[78c]"></a>e2pfs_ecritical</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, e2pfs_port.o(.text), UNUSED)

<P><STRONG><a name="[78d]"></a>e2pfs_lcritical</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, e2pfs_port.o(.text), UNUSED)

<P><STRONG><a name="[2e1]"></a>_e2pfs_checkout</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, e2pfs_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _e2pfs_checkout
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_write
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_read
</UL>

<P><STRONG><a name="[2f6]"></a>parameter_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, e2pfs_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = parameter_init &rArr; rt_mutex_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eeprom_init
</UL>

<P><STRONG><a name="[2e0]"></a>e2prom_read</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, e2pfs_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_write
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_read
</UL>

<P><STRONG><a name="[2e3]"></a>e2prom_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, e2pfs_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = e2prom_write &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_write
</UL>

<P><STRONG><a name="[2fd]"></a>sEE_TIMEOUT_UserCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sEE_TIMEOUT_UserCallback &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[2fe]"></a>sEE_LowLevel_DeInit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sEE_LowLevel_DeInit &rArr; I2C_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_DeInit
</UL>

<P><STRONG><a name="[301]"></a>sEE_LowLevel_Init</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sEE_LowLevel_Init &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[304]"></a>sEE_LowLevel_DMAConfig</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sEE_LowLevel_DMAConfig &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[305]"></a>sEE_DeInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sEE_DeInit &rArr; sEE_LowLevel_DeInit &rArr; I2C_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eeprom_init
</UL>

<P><STRONG><a name="[306]"></a>sEE_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = sEE_Init &rArr; I2C_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eeprom_init
</UL>

<P><STRONG><a name="[2fa]"></a>sEE_ReadBuffer</STRONG> (Thumb, 658 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMALastTransferCmd
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DMAConfig
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_eeprom
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read
</UL>

<P><STRONG><a name="[312]"></a>sEE_WritePage</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sEE_WritePage &rArr; I2C_CheckEvent &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DMAConfig
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
</UL>

<P><STRONG><a name="[313]"></a>sEE_WaitEepromStandbyState</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sEE_WaitEepromStandbyState &rArr; I2C_CheckEvent &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
</UL>

<P><STRONG><a name="[2fc]"></a>sEE_WriteBuffer</STRONG> (Thumb, 742 bytes, Stack size 32 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sEE_WriteBuffer &rArr; sEE_WaitEepromStandbyState &rArr; I2C_CheckEvent &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_eeprom
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write
</UL>

<P><STRONG><a name="[52]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DMA1_Stream7_IRQHandler &rArr; I2C_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; DMA_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[316]"></a>check_eeprom</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = check_eeprom &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WriteBuffer
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Debug
</UL>

<P><STRONG><a name="[ee]"></a>EE_Debug</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = EE_Debug &rArr; check_eeprom &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_eeprom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eeprom.o(FSymTab)
</UL>
<P><STRONG><a name="[ef]"></a>do_accel()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308<LI>Call Chain = do_accel() &rArr; Accel_Cal::do_accel_calibration() &rArr; Accel_Cal::do_accel_calibration_measurements(float(&)[3], float(&)[3][3]) &rArr; Accel_Cal::calibrate_from_orientation(bool*, void*, bool) &rArr; Accel_Cal::accel_calibration_worker(detect_orientation_return, void*) &rArr; Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned) &rArr; get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*) &rArr; math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(FSymTab)
</UL>
<P><STRONG><a name="[f0]"></a>acccal()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = acccal() &rArr; AccelCal::start() &rArr; AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::start()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(FSymTab)
</UL>
<P><STRONG><a name="[317]"></a>Gimbal::Gimbal()</STRONG> (Thumb, 1242 bytes, Stack size 40 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Gimbal::Gimbal() &rArr; Time_point::Time_point() &rArr; SPRain_TIMER::SPRain_TIMER(unsigned char) &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRS(float, float)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::Madgwick(float)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::DirectionAlign()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::FuzzyController(float, float, float, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::BMM150(const char*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::MPU6500(const char*)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::Mavlink(const char*, QRingBuffer&)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::CAN()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::SmallEKF()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::DCM_EKF()
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::AccelCalibrator()
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update_status()
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::QRingBuffer()
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::Scheduler()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::DataBox()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::Upper_Control_Interface()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BGC_PARAM::BGC_PARAM()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::Attitude(Madgwick&, MahonyAHRS&, DCM_EKF&, MPU6500&, BMM150&, MPU6500&, AccelCal&, AccelCalibrator&)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::AC_AttitudeControl(Attitude&, AC_PD&, AC_PD&, AC_PD&, AC_PID&, AC_PID&, AC_PID&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::Time_point()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Gimbal_cpp_56172044
</UL>

<P><STRONG><a name="[78e]"></a>Gimbal::Gimbal__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, gimbal.o(.text), UNUSED)

<P><STRONG><a name="[31f]"></a>Gimbal::setup(const Scheduler::Task*, unsigned char)</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = Gimbal::setup(const Scheduler::Task*, unsigned char) &rArr; Attitude::start_init() &rArr; MPU6500::gyroCalibration() &rArr; MPU6500::read_acc(short*, short*, short*) &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exciter::init(EXCITATION_FUNCTION, float)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::start_init()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load_all()
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_var_info()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::init(const Scheduler::Task*, unsigned char)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[323]"></a>Gimbal::serial_update(void*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = Gimbal::serial_update(void*) &rArr; Mavlink::receive_mavlink() &rArr; QRingBuffer::write(Mavlink_msg_t*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::receive_mavlink()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager::start_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_serial
</UL>

<P><STRONG><a name="[324]"></a>Gimbal::attitude_update(void*)</STRONG> (Thumb, 560 bytes, Stack size 24 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = Gimbal::attitude_update(void*) &rArr; Attitude::update() &rArr; AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float) &rArr; AccelCalibrator::run_fit(unsigned char, float&) &rArr; inverse(float*, float*, unsigned short) &rArr; mat_inverse(float*, float*, unsigned char) &rArr; mat_LU_decompose(float*, float*, float*, float*, unsigned char) &rArr; mat_mul(float*, float*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_attitude
</UL>

<P><STRONG><a name="[325]"></a>Gimbal::sekf_update(void*)</STRONG> (Thumb, 270 bytes, Stack size 48 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1576<LI>Call Chain = Gimbal::sekf_update(void*) &rArr; SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&) &rArr; SmallEKF::predictCovariance()
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::getEuler(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_sekf
</UL>

<P><STRONG><a name="[326]"></a>Gimbal::control_update(void*)</STRONG> (Thumb, 1736 bytes, Stack size 128 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 668<LI>Call Chain = Gimbal::control_update(void*) &rArr; get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exciter::update(float)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::run(float)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rpy(float, float, float)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::update_angle_setpoint()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::get_q3()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::get_q2()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::get_q1()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::get_q0()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::not_align()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::align_enc_direction(Vector3&lang;float&rang;*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_control
</UL>

<P><STRONG><a name="[333]"></a>Gimbal::can_update(void*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = Gimbal::can_update(void*) &rArr; CAN::update() &rArr; CAN::can_recv_data() &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::update()
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_can
</UL>

<P><STRONG><a name="[334]"></a>Gimbal::direction_update(void*)</STRONG> (Thumb, 462 bytes, Stack size 80 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = Gimbal::direction_update(void*) &rArr; AP_Param::save_all() &rArr; AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rpy(float, float, float)
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_all()
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::not_align()
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_direction
</UL>

<P><STRONG><a name="[335]"></a>Gimbal::enc_zero_calibration()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Gimbal::enc_zero_calibration() &rArr; AP_Param::save_all() &rArr; AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::encoder_zero_calibration()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_all()
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[336]"></a>Gimbal::mavlink_read_param(void*)</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Gimbal::mavlink_read_param(void*) &rArr; CAN::read_param(unsigned long, unsigned long, float) &rArr; CAN::can_write(rt_can_msg) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::read_param(unsigned long, unsigned long, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[337]"></a>Gimbal::set_controller_param_from_mavlink(void*)</STRONG> (Thumb, 1158 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Gimbal::set_controller_param_from_mavlink(void*) &rArr; AC_PID::filt_hz(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::filt_hz(float)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::imax(float)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::set_kout(float)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::set_kce(float)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::set_ke(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_write_param(void*)
</UL>

<P><STRONG><a name="[33c]"></a>Gimbal::mavlink_write_param(void*)</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Gimbal::mavlink_write_param(void*) &rArr; CAN::write_param(unsigned long, unsigned long, float) &rArr; CAN::can_write(rt_can_msg) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_param(unsigned long, unsigned long, float)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::set_controller_param_from_mavlink(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[33d]"></a>Gimbal::send_motors_config_data(void*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Gimbal::send_motors_config_data(void*) &rArr; Mavlink::send_mavlink(Mavlink_msg_t*) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::send_mavlink(Mavlink_msg_t*)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::motors_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motors_config_data_t*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[33e]"></a>Gimbal::generate_motors_config_data_pck(void*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Gimbal::generate_motors_config_data_pck(void*) &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::read_param(unsigned long, unsigned long, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[33f]"></a>Gimbal::send_controller_config_data(void*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Gimbal::send_controller_config_data(void*) &rArr; Mavlink::send_mavlink(Mavlink_msg_t*) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::send_mavlink(Mavlink_msg_t*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::controller_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_controller_config_data_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[340]"></a>Gimbal::generate_controller_config_data_pck(void*)</STRONG> (Thumb, 464 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gimbal::generate_controller_config_data_pck(void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::filt_hz() const
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::imax() const
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::get_kout()
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::get_kce()
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyController::get_ke()
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[346]"></a>Gimbal::send_motor_state_data(void*)</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Gimbal::send_motor_state_data(void*) &rArr; Mavlink::send_mavlink(Mavlink_msg_t*) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::send_mavlink(Mavlink_msg_t*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::motor_state_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motor_state_data_t*)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[347]"></a>Gimbal::generate_motor_state_data_pck(void*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Gimbal::generate_motor_state_data_pck(void*) &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::read_param(unsigned long, unsigned long, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[348]"></a>Gimbal::send_attitude_quat_pck(void*)</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Gimbal::send_attitude_quat_pck(void*) &rArr; Mavlink::send_mavlink(Mavlink_msg_t*) &rArr; rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::send_mavlink(Mavlink_msg_t*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::attitude_quaternion_pack(unsigned char, unsigned char, Mavlink_msg_t*, unsigned, float, float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[349]"></a>Gimbal::generate_attitude_quat_pck(void*)</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Gimbal::generate_attitude_quat_pck(void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::get_q3()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::get_q2()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::get_q1()
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::get_q0()
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>

<P><STRONG><a name="[34a]"></a>Gimbal::respond_to_computer(void*)</STRONG> (Thumb, 808 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + Unknown Stack Size
<LI>Call Chain = Gimbal::respond_to_computer(void*) &rArr; AP_Param::load_all() &rArr; AP_Param::load() &rArr; e2pfs_read &rArr; _e2pfs_page_read &rArr; _fs_get_page_state &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_param(unsigned long, unsigned long, float)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rpy(float, float, float)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_all()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load_all()
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_attitude_quat_pck(void*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_attitude_quat_pck(void*)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_motor_state_data_pck(void*)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_motor_state_data(void*)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_controller_config_data_pck(void*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_controller_config_data(void*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_motors_config_data_pck(void*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_motors_config_data(void*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_write_param(void*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_read_param(void*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::enc_zero_calibration()
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::packing_update(void*)
</UL>

<P><STRONG><a name="[34b]"></a>Gimbal::mavlink_decode_msg(void*)</STRONG> (Thumb, 914 bytes, Stack size 40 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Gimbal::mavlink_decode_msg(void*) &rArr; Mavlink::drone_data_decode(const Mavlink_msg_t*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*) &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::drone_data_decode(const Mavlink_msg_t*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::gimbal_command_data_decode(const Mavlink_msg_t*)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::gimbal_control_data_decode(const Mavlink_msg_t*, Vector3&lang;float&rang;*)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::setBMag(Vector3&lang;float&rang;)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::setEMag(Vector3&lang;float&rang;)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::setMeasVelNED(Vector3&lang;float&rang;)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::setMagData(Vector3&lang;float&rang;)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::read(Mavlink_msg_t*, int)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::isEmpty()
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::set_control_value(unsigned char, Vector3&lang;float&rang;)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::set_command_value(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::packing_update(void*)
</UL>

<P><STRONG><a name="[353]"></a>Gimbal::packing_update(void*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = Gimbal::packing_update(void*) &rArr; Gimbal::respond_to_computer(void*) &rArr; AP_Param::load_all() &rArr; AP_Param::load() &rArr; e2pfs_read &rArr; _e2pfs_page_read &rArr; _fs_get_page_state &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_packing
</UL>

<P><STRONG><a name="[370]"></a>Gimbal::Sys_event()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_acc_cal
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_direction
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_control
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_sekf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_attitude
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_packing
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_serial
</UL>

<P><STRONG><a name="[354]"></a>Gimbal::scheduler_run()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = Gimbal::scheduler_run() &rArr; Scheduler::run(unsigned) &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::tick()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::run(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_update_isr
</UL>

<P><STRONG><a name="[358]"></a>assert_failed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReceiveData
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetFlagStatus
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMALastTransferCmd
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMACmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Cmd
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearFlag
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CheckEvent
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_AcknowledgeConfig
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_mode
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetClockDivision
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GenerateEvent
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterModeConfig
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::SPRain_TIMER(unsigned char)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4FastConfig
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3FastConfig
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2FastConfig
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1FastConfig
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC4Ref
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC3Ref
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC2Ref
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC1Ref
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_nonmuxed_irq
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_pinMode
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvmsg
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendmsg
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ToggleBits
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLockConfig
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFIFOStatus
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrentMemoryTarget
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_MemoryTargetConfig
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeCmd
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DoubleBufferModeConfig
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_PeriphIncOffsetSizeConfig
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphResetCmd
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearFlag
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetFlagStatus
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetLSBTransmitErrorCounter
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetReceiveErrorCounter
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetLastErrorCode
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_WakeUp
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Sleep
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_OperatingModeRequest
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MessagePending
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FIFORelease
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_CancelTransmit
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TransmitStatus
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_TTComModeCmd
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DBGFreeze
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_SlaveStartBank
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemLPConfig
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDACmd
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDAConfig
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardNACKCmd
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardCmd
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetGuardTime
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBreak
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINCmd
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINBreakDetectLengthConfig
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WakeUpConfig
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverWakeUpCmd
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetAddress
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OneBitMethodCmd
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_RemapConfig
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectHallSensor
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectMasterSlaveMode
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectCCDMA
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACmd
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAConfig
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCPreloadControl
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectCOM
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNCmd
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PolarityConfig
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3NPolarityConfig
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PolarityConfig
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2NPolarityConfig
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PolarityConfig
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1NPolarityConfig
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PolarityConfig
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC4Config
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC3Config
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC2Config
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC1Config
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetPrescaler
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearITPendingBit
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetITStatus
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearFlag
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetCRCPolynomial
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetCRC
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitCRC
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_FullDuplexConfig
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TIModeCmd
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NSSInternalSoftwareConfig
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCEATACmd
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_CEATAITCmd
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_CommandCompletionCmd
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendSDIOSuspendCmd
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetSDIOOperation
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetSDIOReadWaitMode
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_StopSDIOReadWait
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_StartSDIOReadWait
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearITPendingBit
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetITStatus
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ITConfig
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockLPModeCmd
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockLPModeCmd
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockLPModeCmd
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockLPModeCmd
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockLPModeCmd
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphResetCmd
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB3PeriphClockCmd
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB2PeriphClockCmd
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_I2SCLKConfig
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO2Config
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCO1Config
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SCmd
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLI2SConfig
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AdjustHSICalibrationValue
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearITPendingBit
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetITStatus
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetLastEvent
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITConfig
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadRegister
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetPEC
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_CalculatePEC
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PECPositionConfig
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TransmitPEC
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ARPCmd
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SMBusAlertConfig
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_NACKPositionConfig
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_FastModeDutyCycleConfig
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_StretchClockCmd
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SoftwareResetCmd
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GeneralCallCmd
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DualAddressCmd
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_OwnAddress2Config
</UL>

<P><STRONG><a name="[359]"></a>rtthread_startup</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_tick_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_object_init
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12c]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[366]"></a>time_update_isr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = time_update_isr &rArr; Gimbal::scheduler_run() &rArr; Scheduler::run(unsigned) &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::scheduler_run()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[36f]"></a>rt_entry_thread_serial</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = rt_entry_thread_serial &rArr; Gimbal::serial_update(void*) &rArr; Mavlink::receive_mavlink() &rArr; QRingBuffer::write(Mavlink_msg_t*, int) &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Sys_event()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::serial_update(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[371]"></a>rt_entry_thread_packing</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = rt_entry_thread_packing &rArr; Gimbal::packing_update(void*) &rArr; Gimbal::respond_to_computer(void*) &rArr; AP_Param::load_all() &rArr; AP_Param::load() &rArr; e2pfs_read &rArr; _e2pfs_page_read &rArr; _fs_get_page_state &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Sys_event()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::packing_update(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[372]"></a>rt_entry_thread_attitude</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = rt_entry_thread_attitude &rArr; Gimbal::attitude_update(void*) &rArr; Attitude::update() &rArr; AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float) &rArr; AccelCalibrator::run_fit(unsigned char, float&) &rArr; inverse(float*, float*, unsigned short) &rArr; mat_inverse(float*, float*, unsigned char) &rArr; mat_LU_decompose(float*, float*, float*, float*, unsigned char) &rArr; mat_mul(float*, float*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Sys_event()
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::attitude_update(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[373]"></a>rt_entry_thread_sekf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = rt_entry_thread_sekf &rArr; Gimbal::sekf_update(void*) &rArr; SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&) &rArr; SmallEKF::predictCovariance()
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Sys_event()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::sekf_update(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[374]"></a>rt_entry_thread_control</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = rt_entry_thread_control &rArr; Gimbal::control_update(void*) &rArr; get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Sys_event()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[375]"></a>rt_entry_thread_can</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_entry_thread_can &rArr; Gimbal::can_update(void*) &rArr; CAN::update() &rArr; CAN::can_recv_data() &rArr; rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::can_update(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[376]"></a>rt_entry_thread_direction</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = rt_entry_thread_direction &rArr; Gimbal::direction_update(void*) &rArr; AP_Param::save_all() &rArr; AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Sys_event()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::direction_update(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[377]"></a>rt_entry_thread_acc_cal</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = rt_entry_thread_acc_cal &rArr; AccelCal::update() &rArr; AccelCal::_acal_save_calibrations() &rArr; AP_Param::save() &rArr; e2pfs_write &rArr; _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Sys_event()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[378]"></a>rt_init_thread_entry</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = rt_init_thread_entry &rArr; Gimbal::setup(const Scheduler::Task*, unsigned char) &rArr; Attitude::start_init() &rArr; MPU6500::gyroCalibration() &rArr; MPU6500::read_acc(short*, short*, short*) &rArr; rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fsinfo
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_uart_init
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_time_init()
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::setup(const Scheduler::Task*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[360]"></a>rt_application_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_hook_init
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[37c]"></a>Time_point::stop_measure_time()</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, time_measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Time_point::stop_measure_time() &rArr; SPRain_TIMER::pause() &rArr; TIM_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::pause()
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::~Time_point()
</UL>

<P><STRONG><a name="[37d]"></a>Time_point::~Time_point()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time_measure.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Time_point::~Time_point() &rArr; Time_point::stop_measure_time() &rArr; SPRain_TIMER::pause() &rArr; TIM_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::stop_measure_time()
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::~Gimbal()
</UL>

<P><STRONG><a name="[78f]"></a>Time_point::~Time_point__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, time_measure.o(.text), UNUSED)

<P><STRONG><a name="[37e]"></a>Time_point::start_measure_time()</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, time_measure.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::getCount()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPrescaleFactor(unsigned, unsigned short)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setOverflow(unsigned)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setClockDiv(unsigned short)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::resume()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::pause()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCounterMode(unsigned short)
</UL>

<P><STRONG><a name="[383]"></a>Time_point::return_time(unsigned char)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, time_measure.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::getCount()
</UL>

<P><STRONG><a name="[384]"></a>Time_point::get_time(unsigned char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, time_measure.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::getCount()
</UL>

<P><STRONG><a name="[385]"></a>SPRain_TIMER::SPRain_TIMER(unsigned char)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SPRain_TIMER::SPRain_TIMER(unsigned char) &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_timers_cpp_5ee47f80
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::Time_point()
</UL>

<P><STRONG><a name="[790]"></a>SPRain_TIMER::SPRain_TIMER__sub_object(unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[368]"></a>SPRain_TIMER::pause()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SPRain_TIMER::pause() &rArr; TIM_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::start_measure_time()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::stop_measure_time()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_time_init()
</UL>

<P><STRONG><a name="[36e]"></a>SPRain_TIMER::resume()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SPRain_TIMER::resume() &rArr; TIM_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::start_measure_time()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_time_init()
</UL>

<P><STRONG><a name="[791]"></a>SPRain_TIMER::getPrescaleFactor()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[381]"></a>SPRain_TIMER::setPrescaleFactor(unsigned, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SPRain_TIMER::setPrescaleFactor(unsigned, unsigned short) &rArr; TIM_PrescalerConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::start_measure_time()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPeriod(unsigned)
</UL>

<P><STRONG><a name="[38b]"></a>SPRain_TIMER::getOverflow()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCompare(unsigned char, unsigned short)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCount(unsigned)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPeriod(unsigned)
</UL>

<P><STRONG><a name="[380]"></a>SPRain_TIMER::setOverflow(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SPRain_TIMER::setOverflow(unsigned) &rArr; TIM_SetAutoreload &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::start_measure_time()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPeriod(unsigned)
</UL>

<P><STRONG><a name="[37f]"></a>SPRain_TIMER::getCount()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::get_time(unsigned char)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::return_time(unsigned char)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::start_measure_time()
</UL>

<P><STRONG><a name="[38a]"></a>SPRain_TIMER::setCount(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::getOverflow()
</UL>

<P><STRONG><a name="[382]"></a>SPRain_TIMER::setClockDiv(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SPRain_TIMER::setClockDiv(unsigned short) &rArr; TIM_SetClockDivision &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetClockDivision
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::start_measure_time()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPeriod(unsigned)
</UL>

<P><STRONG><a name="[36b]"></a>SPRain_TIMER::setPeriod(unsigned)</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SPRain_TIMER::setPeriod(unsigned) &rArr; SPRain_TIMER::setPrescaleFactor(unsigned, unsigned short) &rArr; TIM_PrescalerConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::getOverflow()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPrescaleFactor(unsigned, unsigned short)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setOverflow(unsigned)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setClockDiv(unsigned short)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_time_init()
</UL>

<P><STRONG><a name="[390]"></a>SPRain_TIMER::setMode(unsigned char, timer_mode_structure)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_mode
</UL>

<P><STRONG><a name="[792]"></a>SPRain_TIMER::getCompare(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[392]"></a>SPRain_TIMER::setCompare(unsigned char, unsigned short)</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::getOverflow()
</UL>

<P><STRONG><a name="[36c]"></a>SPRain_TIMER::attachInterrupt(unsigned char, void(*)())</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SPRain_TIMER::attachInterrupt(unsigned char, void(*)()) &rArr; timer_attach_interrupt &rArr; timer_enable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_attach_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_time_init()
</UL>

<P><STRONG><a name="[398]"></a>SPRain_TIMER::detachInterrupt(unsigned char)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_detach_interrupt
</UL>

<P><STRONG><a name="[36d]"></a>SPRain_TIMER::refresh()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SPRain_TIMER::refresh() &rArr; TIM_GenerateEvent &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GenerateEvent
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_time_init()
</UL>

<P><STRONG><a name="[369]"></a>SPRain_TIMER::setPriority(unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_time_init()
</UL>

<P><STRONG><a name="[36a]"></a>SPRain_TIMER::setCounterMode(unsigned short)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SPRain_TIMER::setCounterMode(unsigned short) &rArr; TIM_CounterModeConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterModeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::start_measure_time()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_time_init()
</UL>

<P><STRONG><a name="[31b]"></a>Scheduler::Scheduler()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[793]"></a>Scheduler::Scheduler__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[320]"></a>Scheduler::init(const Scheduler::Task*, unsigned char)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Scheduler::init(const Scheduler::Task*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::setup(const Scheduler::Task*, unsigned char)
</UL>

<P><STRONG><a name="[355]"></a>Scheduler::tick()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::scheduler_run()
</UL>

<P><STRONG><a name="[356]"></a>Scheduler::run(unsigned)</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Scheduler::run(unsigned) &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::scheduler_run()
</UL>

<P><STRONG><a name="[794]"></a>Scheduler::time_available_usec()</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[795]"></a>Scheduler::load_average(unsigned) const</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[39d]"></a>limit_value(float, float, float)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, upper_control_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::update_angle_setpoint()
</UL>

<P><STRONG><a name="[31c]"></a>Upper_Control_Interface::Upper_Control_Interface()</STRONG> (Thumb, 266 bytes, Stack size 8 bytes, upper_control_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Upper_Control_Interface::Upper_Control_Interface()
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[796]"></a>Upper_Control_Interface::Upper_Control_Interface__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, upper_control_interface.o(.text), UNUSED)

<P><STRONG><a name="[39c]"></a>Upper_Control_Interface::reset_intergral_axis_control()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, upper_control_interface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::set_control_value(unsigned char, Vector3&lang;float&rang;)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::set_command_value(int)
</UL>

<P><STRONG><a name="[34d]"></a>Upper_Control_Interface::set_control_value(unsigned char, Vector3&lang;float&rang;)</STRONG> (Thumb, 304 bytes, Stack size 28 bytes, upper_control_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Upper_Control_Interface::set_control_value(unsigned char, Vector3&lang;float&rang;)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::reset_intergral_axis_control()
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[34e]"></a>Upper_Control_Interface::set_command_value(int)</STRONG> (Thumb, 182 bytes, Stack size 4 bytes, upper_control_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Upper_Control_Interface::set_command_value(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::reset_intergral_axis_control()
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
</UL>

<P><STRONG><a name="[328]"></a>Upper_Control_Interface::update_angle_setpoint()</STRONG> (Thumb, 712 bytes, Stack size 24 bytes, upper_control_interface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Upper_Control_Interface::update_angle_setpoint()
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;limit_value(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[31d]"></a>DataBox::DataBox()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, databox.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[797]"></a>DataBox::DataBox__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, databox.o(.text), UNUSED)

<P><STRONG><a name="[798]"></a>DataBox::imu_acc_append(float, float, float, float, float, float)</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, databox.o(.text), UNUSED)

<P><STRONG><a name="[39e]"></a>DataBox::write_imu_acc_data()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, databox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_remove
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_write
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_open
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fexist
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_close
</UL>

<P><STRONG><a name="[39f]"></a>DataBox::read_imu_acc_data()</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, databox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_read
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_open
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fexist
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_close
</UL>

<P><STRONG><a name="[3a0]"></a>DataBox::print_imu_acc(int)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, databox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[799]"></a>DataBox::imu_data_reset()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, databox.o(.text), UNUSED)

<P><STRONG><a name="[3a1]"></a>DataBox::print_imu_acc_all()</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, databox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[3ad]"></a>transpose(ChMatrix3*, ChMatrix3*)</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, att2mot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[79a]"></a>inv(ChMatrix3*, ChMatrix3*)</STRONG> (Thumb, 280 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)

<P><STRONG><a name="[3ae]"></a>mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)</STRONG> (Thumb, 398 bytes, Stack size 0 bytes, att2mot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_dcm(Vector3&lang;float&rang;, ChMatrix3, ChMatrix3*)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm_rot_z(ChMatrix3, float)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1ba]"></a>mul_vec(ChMatrix3*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
</UL>

<P><STRONG><a name="[3b9]"></a>correct_angle(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 428 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[3a2]"></a>vector_fusion(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[3bb]"></a>absf(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[15e]"></a>ChMatrix3::ChMatrix3()</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, att2mot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::serial_PID(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::operator *(const ChMatrix3&)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm_rot_z(ChMatrix3, float)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quat2dcm(float, float, float, float)
</UL>

<P><STRONG><a name="[79b]"></a>ChMatrix3::ChMatrix3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)

<P><STRONG><a name="[3a3]"></a>quat2dcm(float, float, float, float)</STRONG> (Thumb, 314 bytes, Stack size 96 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = quat2dcm(float, float, float, float) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
</UL>

<P><STRONG><a name="[3a4]"></a>euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[3a6]"></a>ChMatrix3::set_all(float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, att2mot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::operator *(const ChMatrix3&)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm_rot_z(ChMatrix3, float)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*)
</UL>

<P><STRONG><a name="[3a5]"></a>euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*)</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::set_all(float, float, float, float, float, float, float, float, float)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[3a7]"></a>dcm2euler_zxy(ChMatrix3)</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dcm2euler_zxy(ChMatrix3) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[3a8]"></a>decouple_full(Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[3ab]"></a>loop_limit(float, float)</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, att2mot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_limit_vec3(Vector3&lang;float&rang;, float)
</UL>

<P><STRONG><a name="[3aa]"></a>loop_limit_vec3(Vector3&lang;float&rang;, float)</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = loop_limit_vec3(Vector3&lang;float&rang;, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_limit(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[3ac]"></a>get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 400 bytes, Stack size 304 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_limit_vec3(Vector3&lang;float&rang;, float)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose(ChMatrix3*, ChMatrix3*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[3af]"></a>dcm_rot_z(ChMatrix3, float)</STRONG> (Thumb, 130 bytes, Stack size 120 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = dcm_rot_z(ChMatrix3, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::set_all(float, float, float, float, float, float, float, float, float)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[32e]"></a>get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 282 bytes, Stack size 376 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; dcm_rot_z(ChMatrix3, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm_rot_z(ChMatrix3, float)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quat2dcm(float, float, float, float)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose(ChMatrix3*, ChMatrix3*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[3b0]"></a>get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 204 bytes, Stack size 304 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose(ChMatrix3*, ChMatrix3*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[329]"></a>get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 492 bytes, Stack size 448 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_limit_vec3(Vector3&lang;float&rang;, float)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose(ChMatrix3*, ChMatrix3*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[32f]"></a>vector_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = vector_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[3b1]"></a>vel_remap(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 408 bytes, Stack size 240 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_vec(ChMatrix3*, Vector3&lang;float&rang;*)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quat2dcm(float, float, float, float)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose(ChMatrix3*, ChMatrix3*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[3b3]"></a>ChMatrix3::left_rot_x_180deg()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
</UL>

<P><STRONG><a name="[3b2]"></a>vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)</STRONG> (Thumb, 614 bytes, Stack size 336 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_vec(ChMatrix3*, Vector3&lang;float&rang;*)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::left_rot_x_180deg()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quat2dcm(float, float, float, float)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[3b4]"></a>drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)</STRONG> (Thumb, 412 bytes, Stack size 288 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::left_rot_x_180deg()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quat2dcm(float, float, float, float)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[3b5]"></a>attitude_compensation(float, float, float, float, Vector3&lang;float&rang;)</STRONG> (Thumb, 206 bytes, Stack size 120 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotation_matrix(Matrix3&lang;float&rang;&) const
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::rotate(const Vector3&lang;float&rang;&)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_rotation_matrix(const Matrix3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[3ba]"></a>KF::update(float)</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_kf(float)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[3b8]"></a>get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 1394 bytes, Stack size 448 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF::update(float)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;absf(float)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_fusion(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;correct_angle(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transpose(ChMatrix3*, ChMatrix3*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[3be]"></a>ChMatrix3::ChMatrix3(float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_dcm(Vector3&lang;float&rang;, ChMatrix3, ChMatrix3*)
</UL>

<P><STRONG><a name="[79c]"></a>ChMatrix3::ChMatrix3__sub_object(float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>get_body_dcm(Vector3&lang;float&rang;, ChMatrix3, ChMatrix3*)</STRONG> (Thumb, 500 bytes, Stack size 136 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3(float, float, float, float, float, float, float, float, float)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul(ChMatrix3*, ChMatrix3*, ChMatrix3*)
</UL>

<P><STRONG><a name="[331]"></a>speed_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 570 bytes, Stack size 120 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = speed_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[3bf]"></a>angle_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)</STRONG> (Thumb, 234 bytes, Stack size 72 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
</UL>

<P><STRONG><a name="[3c1]"></a>KF::init()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, att2mot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_init()
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_kf()
</UL>

<P><STRONG><a name="[3c0]"></a>init_kf()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF::init()
</UL>

<P><STRONG><a name="[3c2]"></a>update_kf(float)</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF::update(float)
</UL>

<P><STRONG><a name="[322]"></a>tracking_init()</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tracking_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::setup(const Scheduler::Task*, unsigned char)
</UL>

<P><STRONG><a name="[3c3]"></a>tracking_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;&)</STRONG> (Thumb, 794 bytes, Stack size 88 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator ()(float, float, float)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
</UL>

<P><STRONG><a name="[79d]"></a>ChMatrix3::eye()</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>ChMatrix3::from_quat(float, float, float, float)</STRONG> (Thumb, 270 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[3c4]"></a>ChMatrix3::operator *(const ChMatrix3&)</STRONG> (Thumb, 440 bytes, Stack size 96 bytes, att2mot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::ChMatrix3()
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::set_all(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1b4]"></a>KF::KF(float, float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, att2mot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_Attitude_cpp_kf_gyrox
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_att2mot_cpp_kf
</UL>

<P><STRONG><a name="[79e]"></a>KF::KF__sub_object(float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, att2mot.o(.text), UNUSED)

<P><STRONG><a name="[3c5]"></a>NVIC_Configuration</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NVIC_Configuration &rArr; NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3c8]"></a>SysTick_Configuration</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SysTick_Configuration &rArr; SysTick_CLKSourceConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[22]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35a]"></a>rt_hw_board_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_spi1_init &rArr; stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_bxcan_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eeprom_init
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_hw_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gpio_map
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[37]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CAN1_TX_IRQHandler &rArr; rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, bxcan.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d4]"></a>stm32_bxcan_init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = stm32_bxcan_init &rArr; rt_hw_can_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3e4]"></a>rt_hw_can_register</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_hw_can_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_bxcan_init
</UL>

<P><STRONG><a name="[3e2]"></a>rt_hw_can_isr</STRONG> (Thumb, 694 bytes, Stack size 56 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_hw_can_isr &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>can_stat</STRONG> (Thumb, 504 bytes, Stack size 72 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = can_stat &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(FSymTab)
</UL>
<P><STRONG><a name="[3f3]"></a>set_pin_map_para</STRONG> (Thumb, 110 bytes, Stack size 28 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = set_pin_map_para
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_gpio_map
</UL>

<P><STRONG><a name="[43f]"></a>GPIO_OUT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eeprom_init
</UL>

<P><STRONG><a name="[3ce]"></a>init_gpio_map</STRONG> (Thumb, 2424 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = init_gpio_map &rArr; set_pin_map_para
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pin_map_para
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3f4]"></a>gpio_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gpio_init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text)
</UL>
<P><STRONG><a name="[3f6]"></a>gpio_foreach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_clock_init_all
</UL>

<P><STRONG><a name="[3f5]"></a>gpio_clock_init_all</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_foreach
</UL>

<P><STRONG><a name="[3f7]"></a>gpio_set_mode</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = gpio_set_mode &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_pinMode
</UL>

<P><STRONG><a name="[3f9]"></a>Set_pinMode</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Set_pinMode &rArr; timer_set_mode &rArr; disable_channel &rArr; timer_detach_interrupt &rArr; timer_disable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_mode
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_eeprom_init
</UL>

<P><STRONG><a name="[37b]"></a>idle_hook_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, idle_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = idle_hook_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_sethook
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>

<P><STRONG><a name="[f2]"></a>cpu_usage</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, idle_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = cpu_usage &rArr; rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle_thread.o(FSymTab)
</UL>
<P><STRONG><a name="[3fd]"></a>rt_device_led_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_device_led_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_hw_init
</UL>

<P><STRONG><a name="[3d1]"></a>led_hw_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = led_hw_init &rArr; rt_device_led_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_led_register
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[ae]"></a>sprain_led_write</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sprain_led_write &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.constdata)
</UL>
<P><STRONG><a name="[400]"></a>rt_spi_bus_register</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
</UL>

<P><STRONG><a name="[402]"></a>rt_spi_bus_attach_device</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
</UL>

<P><STRONG><a name="[404]"></a>rt_spi_configure</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_spi_configure &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
</UL>

<P><STRONG><a name="[1cb]"></a>rt_spi_send_then_send</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_spi_send_then_send &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_gyro_scale(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_acc_scale(unsigned char)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::reSetMPU6500()
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::setClockSource(unsigned char)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::disable_I2C()
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::setSampleRate(unsigned char)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::setDLPF(unsigned char)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::disableInterrupt()
</UL>

<P><STRONG><a name="[1d3]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_spi_send_then_recv &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_gyro_scale(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_acc_scale(unsigned char)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::getSampleRate()
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::getClockSource()
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::testConnect()
</UL>

<P><STRONG><a name="[405]"></a>rt_spi_transfer</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
</UL>

<P><STRONG><a name="[1d8]"></a>rt_spi_transfer_message</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_spi_transfer_message &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::read_Data()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150_SPI_bus_write(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150_SPI_bus_read(unsigned char, unsigned char, unsigned char*, unsigned char)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::read_acc(short*, short*, short*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::read_gyro(short*, short*, short*)
</UL>

<P><STRONG><a name="[406]"></a>rt_spi_take_bus</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[407]"></a>rt_spi_release_bus</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[408]"></a>rt_spi_take</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[409]"></a>rt_spi_release</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[401]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[403]"></a>rt_spidev_device_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_spidev_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[412]"></a>stm32_spi_register</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32_hw_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
</UL>

<P><STRONG><a name="[1a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[413]"></a>Handle_IRQ</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Handle_IRQ &rArr; TIM_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[3f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TIM2_IRQHandler &rArr; Handle_IRQ &rArr; TIM_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM3_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TIM3_IRQHandler &rArr; Handle_IRQ &rArr; TIM_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM4_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TIM4_IRQHandler &rArr; Handle_IRQ &rArr; TIM_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>TIM5_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TIM5_IRQHandler &rArr; Handle_IRQ &rArr; TIM_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; Handle_IRQ &rArr; TIM_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[42e]"></a>timer_foreach</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f40x_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerConfigure
</UL>

<P><STRONG><a name="[42d]"></a>TimerConfigure</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f40x_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_foreach
</UL>

<P><STRONG><a name="[397]"></a>timer_attach_interrupt</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = timer_attach_interrupt &rArr; timer_enable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::attachInterrupt(unsigned char, void(*)())
</UL>

<P><STRONG><a name="[399]"></a>timer_detach_interrupt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = timer_detach_interrupt &rArr; timer_disable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::detachInterrupt(unsigned char)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_channel
</UL>

<P><STRONG><a name="[391]"></a>timer_set_mode</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = timer_set_mode &rArr; disable_channel &rArr; timer_detach_interrupt &rArr; timer_disable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_compare_mode
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_mode
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setMode(unsigned char, timer_mode_structure)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_pinMode
</UL>

<P><STRONG><a name="[48]"></a>USART1_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USART1_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USART3_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USART3_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>USART6_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = USART6_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3cf]"></a>stm32_hw_usart_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = stm32_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[3d3]"></a>rt_hw_spi1_init</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, hardward_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_hw_spi1_init &rArr; stm32_spi_register &rArr; rt_spi_bus_register &rArr; rt_spi_bus_device_init &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[43e]"></a>rt_hw_spi2_init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, hardward_bus.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_pinMode
</UL>

<P><STRONG><a name="[3d2]"></a>rt_hw_eeprom_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hardward_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_hw_eeprom_init &rArr; Set_pinMode &rArr; timer_set_mode &rArr; disable_channel &rArr; timer_detach_interrupt &rArr; timer_disable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_DeInit
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_pinMode
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[440]"></a>SD_LowLevel_DeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f4xx_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
</UL>

<P><STRONG><a name="[444]"></a>SD_LowLevel_Init</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_init
</UL>

<P><STRONG><a name="[445]"></a>SD_LowLevel_DMA_TxConfig</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SD_LowLevel_DMA_TxConfig &rArr; DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_send_command
</UL>

<P><STRONG><a name="[447]"></a>SD_LowLevel_DMA_RxConfig</STRONG> (Thumb, 124 bytes, Stack size 72 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SD_LowLevel_DMA_RxConfig &rArr; DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_FlowControllerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_send_command
</UL>

<P><STRONG><a name="[44b]"></a>get_order</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_send_command
</UL>

<P><STRONG><a name="[452]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SD_ProcessIRQSrc &rArr; stm32f4xx_sdio_completed_command &rArr; stm32f4xx_sdio_process_next &rArr; mmcsd_req_complete &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_wakeup
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_completed_command
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>stm32f4xx_SD_Detect</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = stm32f4xx_SD_Detect &rArr; GPIO_ReadInputDataBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_sd.o(.constdata)
</UL>
<P><STRONG><a name="[458]"></a>stm32f4xx_sdio_init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_sd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_free_host
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_change
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_StructInit
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
</UL>

<P><STRONG><a name="[54]"></a>SDIO_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; stm32f4xx_sdio_completed_command &rArr; stm32f4xx_sdio_process_next &rArr; mmcsd_req_complete &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[45d]"></a>dfs_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, dfs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>

<P><STRONG><a name="[45e]"></a>dfs_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>

<P><STRONG><a name="[45f]"></a>dfs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>

<P><STRONG><a name="[460]"></a>fd_new</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = fd_new &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[461]"></a>fd_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[462]"></a>fd_put</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = fd_put &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[463]"></a>dfs_normalize_path</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[466]"></a>fd_is_open</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[468]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dfs_subdir &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[469]"></a>dfs_file_open</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[46a]"></a>dfs_file_close</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[79f]"></a>dfs_file_ioctl</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dfs_file.o(.text), UNUSED)

<P><STRONG><a name="[46f]"></a>dfs_file_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[46e]"></a>dfs_file_getdents</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[46b]"></a>dfs_file_unlink</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
</UL>

<P><STRONG><a name="[471]"></a>dfs_file_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[488]"></a>dfs_file_flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>

<P><STRONG><a name="[482]"></a>dfs_file_lseek</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>

<P><STRONG><a name="[46c]"></a>dfs_file_stat</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[46d]"></a>dfs_file_rename</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[f3]"></a>ls</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[f4]"></a>rm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[f5]"></a>cat</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[f6]"></a>copy</STRONG> (Thumb, 640 bytes, Stack size 48 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[475]"></a>dfs_register</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[467]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[476]"></a>dfs_filesystem_get_mounted_path</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>

<P><STRONG><a name="[477]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = dfs_filesystem_get_partition &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[478]"></a>dfs_mount</STRONG> (Thumb, 400 bytes, Stack size 88 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[47a]"></a>dfs_unmount</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[47b]"></a>dfs_mkfs</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
</UL>

<P><STRONG><a name="[47c]"></a>dfs_statfs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[f7]"></a>mkfs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[f8]"></a>df</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[47d]"></a>open</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[47e]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>

<P><STRONG><a name="[47f]"></a>read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
</UL>

<P><STRONG><a name="[480]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
</UL>

<P><STRONG><a name="[481]"></a>lseek</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</UL>

<P><STRONG><a name="[483]"></a>rename</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>

<P><STRONG><a name="[484]"></a>unlink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[485]"></a>stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>

<P><STRONG><a name="[486]"></a>fstat</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[487]"></a>fsync</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
</UL>

<P><STRONG><a name="[489]"></a>statfs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>

<P><STRONG><a name="[f9]"></a>mkdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mkdir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[48a]"></a>rmdir</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[48b]"></a>opendir</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[48c]"></a>readdir</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
</UL>

<P><STRONG><a name="[48d]"></a>telldir</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[48e]"></a>seekdir</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</UL>

<P><STRONG><a name="[48f]"></a>rewinddir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
</UL>

<P><STRONG><a name="[490]"></a>closedir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = closedir &rArr; dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
</UL>

<P><STRONG><a name="[fa]"></a>chdir</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = chdir &rArr; opendir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[493]"></a>getcwd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
</UL>

<P><STRONG><a name="[5b3]"></a>rt_hw_stack_init</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[7a0]"></a>rt_hw_exception_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuport.o(.text), UNUSED)

<P><STRONG><a name="[495]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[497]"></a>rt_hw_cpu_shutdown</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cpuport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[280]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_param(unsigned long, unsigned long, float)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_y(float)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rp(float, float)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rpy(float, float, float)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[282]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_param(unsigned long, unsigned long, float)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_y(float)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rp(float, float)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rpy(float, float, float)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[5aa]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[5ab]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[21]"></a>PendSV_Handler</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a9]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[7a1]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>HardFault_Handler</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c7]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = NVIC_PriorityGroupConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[2a2]"></a>NVIC_Init</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_init
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan1_hw_init
</UL>

<P><STRONG><a name="[3c6]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[498]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[3ca]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SysTick_CLKSourceConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[3e3]"></a>CAN_DeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CAN_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_bxcan_init
</UL>

<P><STRONG><a name="[3d6]"></a>CAN_Init</STRONG> (Thumb, 546 bytes, Stack size 24 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CAN_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>

<P><STRONG><a name="[3de]"></a>CAN_FilterInit</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CAN_FilterInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxmodifyfilter
</UL>

<P><STRONG><a name="[7a2]"></a>CAN_StructInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[499]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[49a]"></a>CAN_DBGFreeze</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[49b]"></a>CAN_TTComModeCmd</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[49c]"></a>CAN_Transmit</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[49d]"></a>CAN_TransmitStatus</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[49e]"></a>CAN_CancelTransmit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[49f]"></a>CAN_Receive</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4a0]"></a>CAN_FIFORelease</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4a1]"></a>CAN_MessagePending</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4a2]"></a>CAN_OperatingModeRequest</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4a3]"></a>CAN_Sleep</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4a4]"></a>CAN_WakeUp</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4a5]"></a>CAN_GetLastErrorCode</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4a6]"></a>CAN_GetReceiveErrorCounter</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4a7]"></a>CAN_GetLSBTransmitErrorCounter</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[3e1]"></a>CAN_ITConfig</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CAN_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[4a8]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4a9]"></a>CAN_ClearFlag</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4aa]"></a>CAN_GetITStatus</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>

<P><STRONG><a name="[4ac]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a3]"></a>DMA_DeInit</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DMA_DeInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[2a4]"></a>DMA_Init</STRONG> (Thumb, 744 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DMAConfig
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[7a3]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[2a6]"></a>DMA_Cmd</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_uart_tx
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[4ad]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[446]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_FlowControllerConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>

<P><STRONG><a name="[2b0]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_SetCurrDataCounter &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_uart_tx
</UL>

<P><STRONG><a name="[2b3]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DMA_GetCurrDataCounter &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[4ae]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4af]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4b0]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4b1]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2af]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_GetCmdStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_uart_tx
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[4b2]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[315]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DMA_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[303]"></a>DMA_ClearFlag</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>

<P><STRONG><a name="[2a5]"></a>DMA_ITConfig</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
</UL>

<P><STRONG><a name="[2b1]"></a>DMA_GetITStatus</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DMA_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[2b2]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream6_IRQHandler
</UL>

<P><STRONG><a name="[4b3]"></a>GPIO_DeInit</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[2ac]"></a>GPIO_Init</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan1_hw_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_hw_init
</UL>

<P><STRONG><a name="[3f8]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
</UL>

<P><STRONG><a name="[4b5]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[457]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPIO_ReadInputDataBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_SD_Detect
</UL>

<P><STRONG><a name="[4b6]"></a>GPIO_ReadInputData</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4b7]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4b8]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[3fe]"></a>GPIO_SetBits</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi2_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprain_led_write
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_spi1_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_hw_init
</UL>

<P><STRONG><a name="[3ff]"></a>GPIO_ResetBits</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPIO_ResetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprain_led_write
</UL>

<P><STRONG><a name="[4b9]"></a>GPIO_WriteBit</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4ba]"></a>GPIO_Write</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4bb]"></a>GPIO_ToggleBits</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2ab]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 384 bytes, Stack size 24 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GPIO_PinAFConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_pinMode
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan1_hw_init
</UL>

<P><STRONG><a name="[300]"></a>I2C_DeInit</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = I2C_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
</UL>

<P><STRONG><a name="[307]"></a>I2C_Init</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = I2C_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[7a4]"></a>I2C_StructInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_i2c.o(.text), UNUSED)

<P><STRONG><a name="[2ff]"></a>I2C_Cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
</UL>

<P><STRONG><a name="[30a]"></a>I2C_GenerateSTART</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_GenerateSTART &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[30f]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_GenerateSTOP &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[30c]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_Send7bitAddress &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[30e]"></a>I2C_AcknowledgeConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_AcknowledgeConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[4bc]"></a>I2C_OwnAddress2Config</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4bd]"></a>I2C_DualAddressCmd</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4be]"></a>I2C_GeneralCallCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4bf]"></a>I2C_SoftwareResetCmd</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4c0]"></a>I2C_StretchClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4c1]"></a>I2C_FastModeDutyCycleConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4c2]"></a>I2C_NACKPositionConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4c3]"></a>I2C_SMBusAlertConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4c4]"></a>I2C_ARPCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30d]"></a>I2C_SendData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[310]"></a>I2C_ReceiveData</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = I2C_ReceiveData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[4c5]"></a>I2C_TransmitPEC</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4c6]"></a>I2C_PECPositionConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4c7]"></a>I2C_CalculatePEC</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4c8]"></a>I2C_GetPEC</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[308]"></a>I2C_DMACmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_Init
</UL>

<P><STRONG><a name="[311]"></a>I2C_DMALastTransferCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_DMALastTransferCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[4c9]"></a>I2C_ReadRegister</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4ca]"></a>I2C_ITConfig</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[30b]"></a>I2C_CheckEvent</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = I2C_CheckEvent &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[4cb]"></a>I2C_GetLastEvent</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[309]"></a>I2C_GetFlagStatus</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = I2C_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream7_IRQHandler
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WritePage
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
</UL>

<P><STRONG><a name="[314]"></a>I2C_ClearFlag</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = I2C_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_WaitEepromStandbyState
</UL>

<P><STRONG><a name="[4cc]"></a>I2C_GetITStatus</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4cd]"></a>I2C_ClearITPendingBit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7a5]"></a>RCC_DeInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4ce]"></a>RCC_HSEConfig</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4cf]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[4d0]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[4d1]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4d2]"></a>RCC_HSICmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4d3]"></a>RCC_LSEConfig</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4d4]"></a>RCC_LSICmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4d5]"></a>RCC_PLLConfig</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4d6]"></a>RCC_PLLCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4d7]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4d8]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4d9]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4da]"></a>RCC_MCO1Config</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4db]"></a>RCC_MCO2Config</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4dc]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7a6]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4dd]"></a>RCC_HCLKConfig</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4de]"></a>RCC_PCLK1Config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4df]"></a>RCC_PCLK2Config</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[3c9]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Configuration
</UL>

<P><STRONG><a name="[4e0]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4e1]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4e2]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4e3]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[14]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_AHB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan1_hw_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_hw_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.data)
</UL>
<P><STRONG><a name="[4e4]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4e5]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[18]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_DeInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_bxcan_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f40x_timer.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_Init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_spi_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f40x_timer.o(.data)
</UL>
<P><STRONG><a name="[4b4]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[4e6]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4e7]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[302]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DeInit
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_LowLevel_Init
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[4e8]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB2PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[4e9]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4ea]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4eb]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4ec]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4ed]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4ee]"></a>RCC_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7a7]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[4ef]"></a>RCC_GetITStatus</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4f0]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[443]"></a>SDIO_DeInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
</UL>

<P><STRONG><a name="[456]"></a>SDIO_Init</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_set_iocfg
</UL>

<P><STRONG><a name="[45a]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_init
</UL>

<P><STRONG><a name="[441]"></a>SDIO_ClockCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_ClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_set_iocfg
</UL>

<P><STRONG><a name="[442]"></a>SDIO_SetPowerState</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_SetPowerState &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DeInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_set_iocfg
</UL>

<P><STRONG><a name="[7a8]"></a>SDIO_GetPowerState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[44a]"></a>SDIO_SendCommand</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_SendCommand &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_send_command
</UL>

<P><STRONG><a name="[7a9]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[7aa]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[451]"></a>SDIO_GetResponse</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_completed_command
</UL>

<P><STRONG><a name="[44c]"></a>SDIO_DataConfig</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_DataConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_send_command
</UL>

<P><STRONG><a name="[7ab]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[7ac]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[7ad]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[7ae]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[7af]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_sdio.o(.text), UNUSED)

<P><STRONG><a name="[4f1]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4f2]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4f3]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4f4]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4f5]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4f6]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4f7]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4f8]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[44d]"></a>SDIO_DMACmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_send_command
</UL>

<P><STRONG><a name="[449]"></a>SDIO_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_enable_sdio_irq
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_send_command
</UL>

<P><STRONG><a name="[4f9]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4fa]"></a>SDIO_ClearFlag</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[454]"></a>SDIO_GetITStatus</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[453]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[40c]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SPI_I2S_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[40d]"></a>SPI_Init</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[4fb]"></a>I2S_Init</STRONG> (Thumb, 508 bytes, Stack size 48 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[40b]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[7b0]"></a>I2S_StructInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_spi.o(.text), UNUSED)

<P><STRONG><a name="[40e]"></a>SPI_Cmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[4fc]"></a>I2S_Cmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4fd]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4fe]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[4ff]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[500]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[501]"></a>SPI_TIModeCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[502]"></a>I2S_FullDuplexConfig</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[503]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[504]"></a>SPI_I2S_SendData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[40f]"></a>SPI_CalculateCRC</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_CalculateCRC &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[505]"></a>SPI_TransmitCRC</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[506]"></a>SPI_GetCRC</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[507]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[411]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_I2S_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[508]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[410]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_I2S_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[509]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[50a]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[50b]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[42c]"></a>TIM_DeInit</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDefaultConfig
</UL>

<P><STRONG><a name="[50c]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7b1]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_PrescalerConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPrescaleFactor(unsigned, unsigned short)
</UL>

<P><STRONG><a name="[39b]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_CounterModeConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCounterMode(unsigned short)
</UL>

<P><STRONG><a name="[38c]"></a>TIM_SetCounter</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCount(unsigned)
</UL>

<P><STRONG><a name="[388]"></a>TIM_SetAutoreload</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_SetAutoreload &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setOverflow(unsigned)
</UL>

<P><STRONG><a name="[389]"></a>TIM_GetCounter</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::getCount()
</UL>

<P><STRONG><a name="[50d]"></a>TIM_GetPrescaler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[50e]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[50f]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[510]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[511]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[38d]"></a>TIM_SetClockDivision</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_SetClockDivision &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setClockDiv(unsigned short)
</UL>

<P><STRONG><a name="[386]"></a>TIM_Cmd</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::resume()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::pause()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDefaultConfig
</UL>

<P><STRONG><a name="[41a]"></a>TIM_OC1Init</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_OC1Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[420]"></a>TIM_OC2Init</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_OC2Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[424]"></a>TIM_OC3Init</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_OC3Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[428]"></a>TIM_OC4Init</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_OC4Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[419]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[41b]"></a>TIM_SelectOCxM</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_SelectOCxM &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_mode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[393]"></a>TIM_SetCompare1</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_SetCompare1 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCompare(unsigned char, unsigned short)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDefaultConfig
</UL>

<P><STRONG><a name="[394]"></a>TIM_SetCompare2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_SetCompare2 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCompare(unsigned char, unsigned short)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDefaultConfig
</UL>

<P><STRONG><a name="[395]"></a>TIM_SetCompare3</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_SetCompare3 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCompare(unsigned char, unsigned short)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDefaultConfig
</UL>

<P><STRONG><a name="[396]"></a>TIM_SetCompare4</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_SetCompare4 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCompare(unsigned char, unsigned short)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDefaultConfig
</UL>

<P><STRONG><a name="[512]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[513]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[514]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[515]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[41d]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC1PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_mode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[422]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC2PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_mode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[426]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC3PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_mode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[42a]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC4PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_mode
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[41e]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC1FastConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[423]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC2FastConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[427]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC3FastConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[42b]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC4FastConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[41c]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_ClearOC1Ref &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[421]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_ClearOC2Ref &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[425]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_ClearOC3Ref &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[429]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_ClearOC4Ref &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[516]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[517]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[518]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[519]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[51a]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[51b]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[51c]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[41f]"></a>TIM_CCxCmd</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_CCxCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>

<P><STRONG><a name="[51d]"></a>TIM_CCxNCmd</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[51e]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[51f]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[520]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[521]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[522]"></a>TIM_ICInit</STRONG> (Thumb, 508 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[7b2]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[527]"></a>TIM_PWMIConfig</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[528]"></a>TIM_GetCapture1</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[529]"></a>TIM_GetCapture2</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[52a]"></a>TIM_GetCapture3</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[52b]"></a>TIM_GetCapture4</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[52c]"></a>TIM_BDTRConfig</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7b3]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[52d]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[52e]"></a>TIM_SelectCOM</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[52f]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[417]"></a>TIM_ITConfig</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable_irq
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable_irq
</UL>

<P><STRONG><a name="[39a]"></a>TIM_GenerateEvent</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_GenerateEvent &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::refresh()
</UL>

<P><STRONG><a name="[530]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[531]"></a>TIM_ClearFlag</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[414]"></a>TIM_GetITStatus</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IRQ
</UL>

<P><STRONG><a name="[415]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Handle_IRQ
</UL>

<P><STRONG><a name="[532]"></a>TIM_DMAConfig</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[533]"></a>TIM_DMACmd</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[534]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[535]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[536]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[537]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[538]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[539]"></a>TIM_ETRConfig</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[53a]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[53b]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[53c]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[53d]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[53e]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[53f]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[540]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[541]"></a>TIM_RemapConfig</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[542]"></a>USART_DeInit</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[2a7]"></a>USART_Init</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[7b4]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[543]"></a>USART_ClockInit</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[7b5]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>USART_Cmd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[544]"></a>USART_SetPrescaler</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[545]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[546]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[547]"></a>USART_SendData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[548]"></a>USART_ReceiveData</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[549]"></a>USART_SetAddress</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[54a]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[54b]"></a>USART_WakeUpConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[54c]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[54d]"></a>USART_LINCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[54e]"></a>USART_SendBreak</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[54f]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[550]"></a>USART_SetGuardTime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[551]"></a>USART_SmartCardCmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[552]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[553]"></a>USART_IrDAConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[554]"></a>USART_IrDACmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2a9]"></a>USART_DMACmd</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
</UL>

<P><STRONG><a name="[2a8]"></a>USART_ITConfig</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[555]"></a>USART_GetFlagStatus</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[556]"></a>USART_ClearFlag</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[2b5]"></a>USART_GetITStatus</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[439]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USART_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f4xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(RESET)
</UL>
<P><STRONG><a name="[6f5]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f4xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[94]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f4xx.o(.text)
</UL>
<P><STRONG><a name="[7b6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[35b]"></a>rt_system_tick_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1da]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::detect_orientation(bool)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroOffsetCalibration()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[558]"></a>rt_tick_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>

<P><STRONG><a name="[3cc]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_tick_increase &rArr; rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[7b7]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_device_init(const char*)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::start_init()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager::start_init()
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_stat
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[2b8]"></a>rt_device_register</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_uart_init
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_led_register
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[55d]"></a>rt_device_unregister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_unregister &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
</UL>

<P><STRONG><a name="[7b8]"></a>rt_device_init_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[55f]"></a>rt_device_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[26b]"></a>rt_device_open</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::start_init()
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager::start_init()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_stat
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[479]"></a>rt_device_close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_device_close &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>

<P><STRONG><a name="[277]"></a>rt_device_read</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::receive_mavlink()
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_recv_data()
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[27a]"></a>rt_device_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::send_mavlink(Mavlink_msg_t*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_write(rt_can_msg)
</UL>

<P><STRONG><a name="[273]"></a>rt_device_control</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::receive_mavlink()
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::start_init()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_stat
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cantimeout
</UL>

<P><STRONG><a name="[560]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[561]"></a>rt_device_set_tx_complete</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[3fc]"></a>rt_thread_idle_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_hook_init
</UL>

<P><STRONG><a name="[562]"></a>rt_thread_idle_excute</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[364]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[56e]"></a>rt_sem_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
</UL>

<P><STRONG><a name="[570]"></a>rt_sem_detach</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_free_host
</UL>

<P><STRONG><a name="[571]"></a>rt_sem_create</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rt_sem_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread_create
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[573]"></a>rt_sem_delete</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread_delete
</UL>

<P><STRONG><a name="[574]"></a>rt_sem_take</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[577]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[578]"></a>rt_sem_release</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_wakeup
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_req_complete
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</UL>

<P><STRONG><a name="[57a]"></a>rt_sem_control</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[2f7]"></a>rt_mutex_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parameter_init
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
</UL>

<P><STRONG><a name="[57b]"></a>rt_mutex_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[57c]"></a>rt_mutex_create</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[57d]"></a>rt_mutex_delete</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[2f8]"></a>rt_mutex_take</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[2fb]"></a>rt_mutex_release</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release_bus
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[7b9]"></a>rt_mutex_control</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipc.o(.text), UNUSED)

<P><STRONG><a name="[272]"></a>rt_event_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_event_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::start_init()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::init(const Scheduler::Task*, unsigned char)
</UL>

<P><STRONG><a name="[57f]"></a>rt_event_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[580]"></a>rt_event_create</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[581]"></a>rt_event_delete</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[26c]"></a>rt_event_send</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can1ind(rt_device*, void*, long, unsigned long)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::run(unsigned)
</UL>

<P><STRONG><a name="[275]"></a>rt_event_recv</STRONG> (Thumb, 436 bytes, Stack size 56 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_event_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_recv_data()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_acc_cal
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_direction
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_control
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_sekf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_attitude
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_packing
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_entry_thread_serial
</UL>

<P><STRONG><a name="[582]"></a>rt_event_control</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[583]"></a>rt_mb_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
</UL>

<P><STRONG><a name="[585]"></a>rt_mb_detach</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[586]"></a>rt_mb_create</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[587]"></a>rt_mb_delete</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[588]"></a>rt_mb_send_wait</STRONG> (Thumb, 436 bytes, Stack size 48 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[589]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_change
</UL>

<P><STRONG><a name="[58a]"></a>rt_mb_recv</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_mb_recv &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[58b]"></a>rt_mb_control</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[58c]"></a>rt_mq_init</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[58d]"></a>rt_mq_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[58e]"></a>rt_mq_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[58f]"></a>rt_mq_create</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[590]"></a>rt_mq_send</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>

<P><STRONG><a name="[591]"></a>rt_mq_urgent</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>

<P><STRONG><a name="[592]"></a>rt_mq_recv</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[593]"></a>rt_mq_control</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[3cb]"></a>rt_interrupt_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3cd]"></a>rt_interrupt_leave</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[563]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[594]"></a>rt_get_errno</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[2f9]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[595]"></a>_rt_errno</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[181]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::initialize_fuzzy(float, float, float)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_init
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
</UL>

<P><STRONG><a name="[276]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::drone_data_decode(const Mavlink_msg_t*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::gimbal_command_data_decode(const Mavlink_msg_t*)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::gimbal_control_data_decode(const Mavlink_msg_t*, Vector3&lang;float&rang;*)
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::motors_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motors_config_data_t*)
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::controller_config_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_controller_config_data_t*)
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::motor_state_data_packing(unsigned char, unsigned char, Mavlink_msg_t*, Mavlink_motor_state_data_t*)
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::control_param_decode(const Mavlink_msg_t*, Mavlink_control_param_t*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::control_param_pack(unsigned char, unsigned char, Mavlink_msg_t*, unsigned char, float, float, float, float, float, float, float)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::attitude_quaternion_decode(const Mavlink_msg_t*, Mavlink_attitude_quaternion_t*)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mavlink::attitude_quaternion_pack(unsigned char, unsigned char, Mavlink_msg_t*, unsigned, float, float, float, float, float, float, float)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::read_block(unsigned long, unsigned long)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_block(unsigned long, can_block)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::read_param(unsigned long, unsigned long, float)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_param(unsigned long, unsigned long, float)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_y(float)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rp(float, float)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::send_control_rpy(float, float, float)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::can_recv_data()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_uart_tx
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_motor_state_data(void*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::send_motors_config_data(void*)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_write_param(void*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_read_param(void*)
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_control
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[698]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[597]"></a>rt_memcmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[491]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[596]"></a>rt_strstr</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>

<P><STRONG><a name="[7ba]"></a>rt_strcasecmp</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[494]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[55b]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[7bb]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[465]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_append
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_append
</UL>

<P><STRONG><a name="[59b]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[598]"></a>rt_vsnprintf</STRONG> (Thumb, 800 bytes, Stack size 88 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[178]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_gyro_scale(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_acc_scale(unsigned char)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SugenoFuzzyLogic::cal_output()
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::rule_evaluation()
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGetMfParaN(const char*)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGaussian2Mf(float, float*)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGaussianMf(float, float*)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisTrapezoidMf(float, float*)
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisTriangleMf(float, float*)
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::bmm150_init()
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmm150_device_init(const char*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration_measurements(float(&)[3], float(&)[3][3])
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calibrate_from_orientation(bool*, void*, bool)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::detect_orientation(bool)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::accel_calibration_worker(detect_orientation_return, void*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroOffsetCalibration()
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialManager::start_init()
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update()
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::success()
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::fail()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::cancel()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EE_Debug
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_TIMEOUT_UserCallback
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm_e2pfs
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_ls
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fsinfo
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_group_info(const AP_Param::GroupInfo*, unsigned char)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::type_size(ap_var_type)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::print_imu_acc_all()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataBox::print_imu_acc(int)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::setup(const Scheduler::Task*, unsigned char)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_set_iocfg
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_mode
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_stat
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_unregister_driver
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_driver
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_parse_ext_csd
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[59c]"></a>rt_show_version</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[464]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[59d]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[182]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_sprintf &rArr; rt_vsprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::initialize_fuzzy(float, float, float)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage
</UL>

<P><STRONG><a name="[697]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3d0]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[59e]"></a>rt_malloc_align</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[59f]"></a>rt_free_align</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[5a8]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
</UL>

<P><STRONG><a name="[7bc]"></a>rt_assert_set_hook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>rt_assert_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::testConnect()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_fast_uart_control
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::start_init()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_init
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_control
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_control
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_init
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release_bus
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprain_led_write
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_led_write
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_led_read
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_led_close
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_led_open
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_read
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_init
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_detach_irq
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_attach_irq
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread_delete
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread_create
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_echo
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_echo
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_device
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</UL>

<P><STRONG><a name="[7bd]"></a>rt_malloc_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[7be]"></a>rt_free_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>rt_system_heap_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[180]"></a>rt_malloc</STRONG> (Thumb, 514 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::initialize_fuzzy(float, float, float)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_alloc_host
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_init
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_driver
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_append
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_append
</UL>

<P><STRONG><a name="[3f1]"></a>rt_free</STRONG> (Thumb, 646 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_free_host
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_unregister_driver
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[5a1]"></a>rt_realloc</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>

<P><STRONG><a name="[5a2]"></a>rt_calloc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>

<P><STRONG><a name="[7bf]"></a>rt_memory_info</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>list_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[7c0]"></a>rt_object_attach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7c1]"></a>rt_object_detach_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7c2]"></a>rt_object_trytake_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7c3]"></a>rt_object_take_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[7c4]"></a>rt_object_put_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[7c5]"></a>rt_object_get_information</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[55c]"></a>rt_object_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[55e]"></a>rt_object_detach</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[572]"></a>rt_object_allocate</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[566]"></a>rt_object_delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
</UL>

<P><STRONG><a name="[565]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[5a5]"></a>rt_object_find</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>

<P><STRONG><a name="[7c6]"></a>rt_scheduler_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler_1.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>rt_system_scheduler_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scheduler_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[365]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[576]"></a>rt_schedule</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, scheduler_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[5ac]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, scheduler_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[5ad]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[3fa]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[3fb]"></a>rt_exit_critical</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_usage_idle_hook
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[7c7]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler_1.o(.text), UNUSED)

<P><STRONG><a name="[5b0]"></a>rt_thread_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[567]"></a>rt_thread_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
</UL>

<P><STRONG><a name="[496]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
</UL>

<P><STRONG><a name="[56c]"></a>rt_thread_resume</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>

<P><STRONG><a name="[37a]"></a>rt_thread_startup</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread_create
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
</UL>

<P><STRONG><a name="[5b4]"></a>rt_thread_detach</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[379]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread_create
</UL>

<P><STRONG><a name="[5b5]"></a>rt_thread_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread_delete
</UL>

<P><STRONG><a name="[559]"></a>rt_thread_yield</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[569]"></a>rt_thread_suspend</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[5b6]"></a>rt_thread_sleep</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[1ac]"></a>rt_thread_delay</STRONG> (Thumb, 212 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::mpu_init(unsigned char, unsigned char, int)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_gyro_scale(unsigned char)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::set_acc_scale(unsigned char)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150_delay_msek(unsigned)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calibrate_from_orientation(bool*, void*, bool)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::detect_orientation(bool)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroOffsetCalibration()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::write_block(unsigned long, can_block)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update()
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sEE_ReadBuffer
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::respond_to_computer(void*)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_motor_state_data_pck(void*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_motors_config_data_pck(void*)
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[57e]"></a>rt_thread_control</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[5b7]"></a>rt_thread_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
</UL>

<P><STRONG><a name="[7c8]"></a>rt_timer_timeout_sethook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[3f2]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_register
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[5ae]"></a>rt_timer_detach</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[5bd]"></a>rt_timer_create</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[5be]"></a>rt_timer_delete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[3ef]"></a>rt_timer_start</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[3f0]"></a>rt_timer_stop</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_close
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[575]"></a>rt_timer_control</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_timer_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[55a]"></a>rt_timer_check</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[5c0]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[5c1]"></a>rt_soft_timer_check</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_soft_timer_check &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[35d]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[363]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_system_timer_thread_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[3ee]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[3ea]"></a>rt_completion_wait</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[3eb]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>

<P><STRONG><a name="[5c3]"></a>rt_data_queue_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[5c5]"></a>rt_data_queue_push</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[5c8]"></a>rt_data_queue_pop</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[5c9]"></a>rt_data_queue_peak</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_data_queue_peak &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[5ca]"></a>rt_data_queue_reset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dataqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>

<P><STRONG><a name="[2ad]"></a>rt_ringbuffer_init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ringbuffer_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_ringbuffer_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fast_Uart_Config
</UL>

<P><STRONG><a name="[2b4]"></a>rt_ringbuffer_put</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, ringbuffer_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_ringbuffer_put &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[5cd]"></a>rt_ringbuffer_put_force</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, ringbuffer_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2b6]"></a>rt_ringbuffer_get</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ringbuffer_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_ringbuffer_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_fast_uart_read
</UL>

<P><STRONG><a name="[5ce]"></a>rt_ringbuffer_putchar</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ringbuffer_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[5cf]"></a>rt_ringbuffer_putchar_force</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ringbuffer_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>

<P><STRONG><a name="[5d0]"></a>rt_ringbuffer_getchar</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ringbuffer_1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[43d]"></a>rt_hw_serial_register</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[438]"></a>rt_hw_serial_isr</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[5de]"></a>rt_mmcsd_blk_probe</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, block_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[5e0]"></a>rt_mmcsd_blk_remove</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, block_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_mmcsd_blk_remove &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[7c9]"></a>rt_mmcsd_blk_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, block_dev.o(.text), UNUSED)

<P><STRONG><a name="[5ea]"></a>mmc_send_op_cond</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mmc_send_op_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5f5]"></a>init_mmc</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = init_mmc &rArr; rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[5d8]"></a>mmcsd_host_lock</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mmcsd_host_lock &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>

<P><STRONG><a name="[5dc]"></a>mmcsd_host_unlock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mmcsd_host_unlock &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>

<P><STRONG><a name="[44f]"></a>mmcsd_req_complete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mmcsd_req_complete &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_process_next
</UL>

<P><STRONG><a name="[5da]"></a>mmcsd_send_request</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>

<P><STRONG><a name="[5db]"></a>mmcsd_send_cmd</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_blksize
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>

<P><STRONG><a name="[5f9]"></a>mmcsd_set_chip_select</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_chip_select &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
</UL>

<P><STRONG><a name="[5ed]"></a>mmcsd_go_idle</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mmcsd_go_idle &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_chip_select
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5f6]"></a>mmcsd_spi_read_ocr</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mmcsd_spi_read_ocr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[5f0]"></a>mmcsd_all_get_cid</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mmcsd_all_get_cid &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5ef]"></a>mmcsd_get_cid</STRONG> (Thumb, 246 bytes, Stack size 120 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = mmcsd_get_cid &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5f2]"></a>mmcsd_get_csd</STRONG> (Thumb, 238 bytes, Stack size 120 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = mmcsd_get_csd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5f3]"></a>mmcsd_select_card</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mmcsd_select_card &rArr; _mmcsd_select_card &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5fc]"></a>mmcsd_deselect_cards</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mmcsd_select_card
</UL>

<P><STRONG><a name="[5ee]"></a>mmcsd_spi_use_crc</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mmcsd_spi_use_crc &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5f4]"></a>mmcsd_set_clock</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mmcsd_set_clock &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5f1]"></a>mmcsd_set_bus_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_bus_mode &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5e9]"></a>mmcsd_set_bus_width</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mmcsd_set_bus_width &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[5d9]"></a>mmcsd_set_data_timeout</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mmcsd_set_data_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>

<P><STRONG><a name="[5f7]"></a>mmcsd_select_voltage</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mmcsd_select_voltage &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[45b]"></a>mmcsd_change</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmcsd_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_init
</UL>

<P><STRONG><a name="[600]"></a>mmcsd_detect</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = mmcsd_detect &rArr; init_sd &rArr; rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_off
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmcsd_core.o(.text)
</UL>
<P><STRONG><a name="[459]"></a>mmcsd_alloc_host</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mmcsd_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_init
</UL>

<P><STRONG><a name="[45c]"></a>mmcsd_free_host</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mmcsd_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_init
</UL>

<P><STRONG><a name="[606]"></a>rt_mmcsd_core_init</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, mmcsd_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdio_init
</UL>

<P><STRONG><a name="[60d]"></a>mmcsd_send_app_cmd</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
</UL>

<P><STRONG><a name="[60e]"></a>mmcsd_app_set_bus_width</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = mmcsd_app_set_bus_width &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[604]"></a>mmcsd_send_app_op_cond</STRONG> (Thumb, 352 bytes, Stack size 80 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = mmcsd_send_app_op_cond &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[601]"></a>mmcsd_send_if_cond</STRONG> (Thumb, 92 bytes, Stack size 64 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mmcsd_send_if_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[60f]"></a>mmcsd_get_card_addr</STRONG> (Thumb, 60 bytes, Stack size 64 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mmcsd_get_card_addr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[610]"></a>mmcsd_get_scr</STRONG> (Thumb, 190 bytes, Stack size 112 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = mmcsd_get_scr &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[605]"></a>init_sd</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = init_sd &rArr; rt_mmcsd_blk_probe &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_read_ocr
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_remove
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[602]"></a>sdio_io_send_op_cond</STRONG> (Thumb, 178 bytes, Stack size 80 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sdio_io_send_op_cond &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[612]"></a>sdio_io_rw_direct</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>

<P><STRONG><a name="[613]"></a>sdio_io_rw_extended</STRONG> (Thumb, 356 bytes, Stack size 136 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[614]"></a>sdio_io_rw_extended_block</STRONG> (Thumb, 396 bytes, Stack size 72 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_max_block_size
</UL>
<BR>[Called By]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_write_multi_incr_b
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_read_multi_incr_b
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_write_multi_fifo_b
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_read_multi_fifo_b
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writel
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readl
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writew
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readw
</UL>

<P><STRONG><a name="[616]"></a>sdio_io_readb</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_detach_irq
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_attach_irq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
</UL>

<P><STRONG><a name="[617]"></a>sdio_io_writeb</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_block_size
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_disable_func
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_enable_func
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_detach_irq
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_attach_irq
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
</UL>

<P><STRONG><a name="[618]"></a>sdio_io_readw</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[619]"></a>sdio_io_writew</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[61a]"></a>sdio_io_readl</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[61b]"></a>sdio_io_writel</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[61c]"></a>sdio_io_read_multi_fifo_b</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[61d]"></a>sdio_io_write_multi_fifo_b</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[61e]"></a>sdio_io_read_multi_incr_b</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[61f]"></a>sdio_io_write_multi_incr_b</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[624]"></a>sdio_free_cis</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sdio_free_cis &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
</UL>

<P><STRONG><a name="[603]"></a>init_sdio</STRONG> (Thumb, 394 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = init_sdio &rArr; sdio_init_card &rArr; sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[630]"></a>sdio_attach_irq</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread_create
</UL>

<P><STRONG><a name="[631]"></a>sdio_detach_irq</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_irq_thread_delete
</UL>

<P><STRONG><a name="[455]"></a>sdio_irq_wakeup</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sdio_irq_wakeup &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[632]"></a>sdio_enable_func</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>

<P><STRONG><a name="[633]"></a>sdio_disable_func</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>

<P><STRONG><a name="[634]"></a>sdio_set_block_size</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
</UL>

<P><STRONG><a name="[636]"></a>sdio_register_driver</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_driver
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>

<P><STRONG><a name="[637]"></a>sdio_unregister_driver</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_driver
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>

<P><STRONG><a name="[607]"></a>rt_sdio_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_core_init
</UL>

<P><STRONG><a name="[fc]"></a>version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[fd]"></a>list_thread</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[fe]"></a>reboot</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[ff]"></a>list_sem</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_sem &rArr; _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[100]"></a>list_event</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_event &rArr; _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[101]"></a>list_mutex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_mutex &rArr; _list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[102]"></a>list_mailbox</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_mailbox &rArr; _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[103]"></a>list_msgqueue</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_msgqueue &rArr; _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[104]"></a>list_mempool</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_mempool &rArr; _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[105]"></a>list_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = list_timer &rArr; _list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[106]"></a>list_device</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = list_device &rArr; _list_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[107]"></a>list</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[645]"></a>list_prefix</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_prefix &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_is_prefix
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[64b]"></a>finsh_compiler_run</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_compiler_run &rArr; finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[658]"></a>finsh_error_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[649]"></a>finsh_error_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[690]"></a>finsh_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[691]"></a>finsh_error_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[64c]"></a>finsh_heap_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_heap_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[64d]"></a>finsh_heap_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_merge
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
</UL>

<P><STRONG><a name="[652]"></a>finsh_heap_allocate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_split
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[654]"></a>finsh_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_init &rArr; finsh_heap_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[693]"></a>finsh_stack_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[659]"></a>finsh_flush</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, finsh_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_flush &rArr; finsh_parser_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[65a]"></a>finsh_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, finsh_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
</UL>

<P><STRONG><a name="[656]"></a>finsh_node_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_node_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[65f]"></a>finsh_node_allocate</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, finsh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[65b]"></a>finsh_node_new_id</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = finsh_node_new_id &rArr; finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[660]"></a>finsh_node_new_char</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_char
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[661]"></a>finsh_node_new_int</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_int
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[662]"></a>finsh_node_new_long</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_long
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[663]"></a>finsh_node_new_string</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = finsh_node_new_string &rArr; finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[664]"></a>finsh_node_new_ptr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[b7]"></a>OP_no_op</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>OP_add_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>OP_add_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>OP_add_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>OP_sub_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>OP_sub_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>OP_sub_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>OP_div_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>OP_div_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>OP_div_dword</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>OP_mod_byte</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>OP_mod_word</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>OP_mod_dword</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>OP_mul_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>OP_mul_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>OP_mul_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>OP_and_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>OP_and_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>OP_and_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>OP_or_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>OP_or_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>OP_or_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>OP_xor_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>OP_xor_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>OP_xor_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>OP_bw_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>OP_bw_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>OP_bw_dword</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>OP_shl_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>OP_shl_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>OP_shl_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>OP_shr_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>OP_shr_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>OP_shr_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>OP_ld_byte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>OP_ld_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>OP_ld_dword</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>OP_ld_value_byte</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>OP_ld_value_byte_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>OP_ld_value_word</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>OP_ld_value_word_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>OP_ld_value_dword</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>OP_ld_value_dword_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>OP_st_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>OP_st_word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>OP_st_dword</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>OP_pop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>OP_call</STRONG> (Thumb, 906 bytes, Stack size 152 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OP_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[679]"></a>finsh_parser_run</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[655]"></a>finsh_parser_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_parser_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[67a]"></a>finsh_token_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = finsh_token_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[684]"></a>token_get_string</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_get_string &rArr; token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[668]"></a>finsh_token_token</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
</UL>

<P><STRONG><a name="[687]"></a>finsh_token_get_token</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, finsh_token.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[657]"></a>finsh_var_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_var_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[677]"></a>finsh_var_insert</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = finsh_var_insert &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>

<P><STRONG><a name="[688]"></a>finsh_var_delete</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, finsh_var.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>

<P><STRONG><a name="[65c]"></a>finsh_var_lookup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_var_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[689]"></a>finsh_sysvar_append</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, finsh_var.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[65d]"></a>finsh_sysvar_lookup</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[692]"></a>finsh_vm_run</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, finsh_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_vm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[68a]"></a>finsh_syscall_append</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, finsh_vm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[65e]"></a>finsh_syscall_lookup</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = finsh_syscall_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[362]"></a>finsh_set_device</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = finsh_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[68b]"></a>finsh_get_device</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[68c]"></a>finsh_set_echo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[68d]"></a>finsh_get_echo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[68f]"></a>finsh_run_line</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_string
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_errno
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_vm_run
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_stack_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[696]"></a>finsh_thread_entry</STRONG> (Thumb, 1628 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = finsh_thread_entry &rArr; finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[699]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[69a]"></a>finsh_system_var_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[361]"></a>finsh_system_init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = finsh_system_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_var_init
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[69b]"></a>safe_asin(float)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ap_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_euler_pitch() const
</UL>

<P><STRONG><a name="[149]"></a>safe_sqrt(float)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ap_math.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isnanf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::sqrt_controller(float, float, float)
</UL>

<P><STRONG><a name="[146]"></a>wrap_360_cd(int)</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, location.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_yaw_angle_and_error(float, Vector3&lang;float&rang;&, float)
</UL>

<P><STRONG><a name="[144]"></a>wrap_180_cd(int)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, location.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_roll_angle_and_error(float, Vector3&lang;float&rang;&, float)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_pitch_angle_and_error(float, Vector3&lang;float&rang;&, float)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_yaw_angle_and_error(float, Vector3&lang;float&rang;&, float)
</UL>

<P><STRONG><a name="[13f]"></a>wrap_360_cd_float(float)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, location.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fmod(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::shift_ef_yaw_target(float)
</UL>

<P><STRONG><a name="[14c]"></a>wrap_180_cd_float(float)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, location.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fmod(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw(float, float, float)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
</UL>

<P><STRONG><a name="[69e]"></a>wrap_PI(float)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, location.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_axis_angle(Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[6a0]"></a>wrap_2PI(float)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, location.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[6a1]"></a>wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)</STRONG> (Thumb, 684 bytes, Stack size 104 bytes, location.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;double&rang;::operator [](unsigned char) const
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;double&rang;::operator [](unsigned char)
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6a8]"></a>wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)</STRONG> (Thumb, 2184 bytes, Stack size 184 bytes, location.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;double&rang;::operator [](unsigned char) const
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;double&rang;::operator [](unsigned char)
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_copysign
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[6ae]"></a>mat_mul(float*, float*, unsigned char)</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mat_mul(float*, float*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inverse(float*, float*, unsigned char)
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_LU_decompose(float*, float*, float*, float*, unsigned char)
</UL>

<P><STRONG><a name="[6b0]"></a>mat_pivot(float*, float*, unsigned char)</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mat_pivot(float*, float*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_LU_decompose(float*, float*, float*, float*, unsigned char)
</UL>

<P><STRONG><a name="[6b2]"></a>mat_forward_sub(float*, float*, unsigned char)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mat_forward_sub(float*, float*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inverse(float*, float*, unsigned char)
</UL>

<P><STRONG><a name="[6b3]"></a>mat_back_sub(float*, float*, unsigned char)</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mat_back_sub(float*, float*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inverse(float*, float*, unsigned char)
</UL>

<P><STRONG><a name="[6af]"></a>mat_LU_decompose(float*, float*, float*, float*, unsigned char)</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mat_LU_decompose(float*, float*, float*, float*, unsigned char) &rArr; mat_mul(float*, float*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_pivot(float*, float*, unsigned char)
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_mul(float*, float*, unsigned char)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inverse(float*, float*, unsigned char)
</UL>

<P><STRONG><a name="[6b1]"></a>mat_inverse(float*, float*, unsigned char)</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mat_inverse(float*, float*, unsigned char) &rArr; mat_LU_decompose(float*, float*, float*, float*, unsigned char) &rArr; mat_mul(float*, float*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_LU_decompose(float*, float*, float*, float*, unsigned char)
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_back_sub(float*, float*, unsigned char)
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_forward_sub(float*, float*, unsigned char)
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_mul(float*, float*, unsigned char)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse(float*, float*, unsigned short)
</UL>

<P><STRONG><a name="[6b4]"></a>inverse3x3(float*, float*)</STRONG> (Thumb, 462 bytes, Stack size 56 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = inverse3x3(float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse(float*, float*, unsigned short)
</UL>

<P><STRONG><a name="[6b6]"></a>inverse4x4(float*, float*)</STRONG> (Thumb, 2150 bytes, Stack size 88 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = inverse4x4(float*, float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse(float*, float*, unsigned short)
</UL>

<P><STRONG><a name="[23f]"></a>inverse(float*, float*, unsigned short)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = inverse(float*, float*, unsigned short) &rArr; mat_inverse(float*, float*, unsigned char) &rArr; mat_LU_decompose(float*, float*, float*, float*, unsigned char) &rArr; mat_mul(float*, float*, unsigned char) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse4x4(float*, float*)
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse3x3(float*, float*)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inverse(float*, float*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
</UL>

<P><STRONG><a name="[7ca]"></a>transpose(float*, float*, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, matrix_alg.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>mat_mul_vec(float*, float*, unsigned short, unsigned short)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, matrix_alg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mat_mul_vec(float*, float*, unsigned short, unsigned short) &rArr; operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::least_square_calibration(float(&)[6][3], float(&)[3], float(&)[3], float)
</UL>

<P><STRONG><a name="[262]"></a>Quaternion::rotation_matrix(Matrix3&lang;float&rang;&) const</STRONG> (Thumb, 290 bytes, Stack size 0 bytes, quaternion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compensation(float, float, float, float, Vector3&lang;float&rang;)
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_vector312() const
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::earth_to_body(Vector3&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[3b7]"></a>Quaternion::from_rotation_matrix(const Matrix3&lang;float&rang;&)</STRONG> (Thumb, 686 bytes, Stack size 72 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compensation(float, float, float, float, Vector3&lang;float&rang;)
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_vector312(float, float, float)
</UL>

<P><STRONG><a name="[6b7]"></a>Quaternion::earth_to_body(Vector3&lang;float&rang;&) const</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotation_matrix(Matrix3&lang;float&rang;&) const
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[6b8]"></a>Quaternion::from_euler(float, float, float)</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[6b9]"></a>Quaternion::from_vector312(float, float, float)</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_rotation_matrix(const Matrix3&lang;float&rang;&)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::from_euler312(float, float, float)
</UL>

<P><STRONG><a name="[6bb]"></a>Quaternion::to_axis_angle(Vector3&lang;float&rang;&)</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /=(float)
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *=(float)
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq(float)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_PI(float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[6be]"></a>Quaternion::from_axis_angle(const Vector3&lang;float&rang;&, float)</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle(Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[6bf]"></a>Quaternion::from_axis_angle(Vector3&lang;float&rang;)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /=(float)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle(const Vector3&lang;float&rang;&, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[259]"></a>Quaternion::operator *=(const Quaternion&)</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, quaternion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[6c0]"></a>Quaternion::rotate(const Vector3&lang;float&rang;&)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *=(const Quaternion&)
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle(Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[6c1]"></a>Quaternion::from_axis_angle_fast(const Vector3&lang;float&rang;&, float)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle_fast(Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[6c2]"></a>Quaternion::from_axis_angle_fast(Vector3&lang;float&rang;)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /=(float)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle_fast(const Vector3&lang;float&rang;&, float)
</UL>

<P><STRONG><a name="[6c3]"></a>Quaternion::rotate_fast(const Vector3&lang;float&rang;&)</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq(float)
</UL>

<P><STRONG><a name="[6c4]"></a>Quaternion::get_euler_roll() const</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_euler(float&, float&, float&) const
</UL>

<P><STRONG><a name="[6c5]"></a>Quaternion::get_euler_pitch() const</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_asin(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_euler(float&, float&, float&) const
</UL>

<P><STRONG><a name="[6c6]"></a>Quaternion::get_euler_yaw() const</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_euler(float&, float&, float&) const
</UL>

<P><STRONG><a name="[266]"></a>Quaternion::to_euler(float&, float&, float&) const</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_euler_yaw() const
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_euler_pitch() const
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_euler_roll() const
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::getDebug(float&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[6c7]"></a>Quaternion::to_vector312() const</STRONG> (Thumb, 54 bytes, Stack size 56 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotation_matrix(Matrix3&lang;float&rang;&) const
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3()
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::to_euler312() const
</UL>

<P><STRONG><a name="[6c9]"></a>Quaternion::length() const</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, quaternion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Quaternion::length() const &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sq(float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::normalize()
</UL>

<P><STRONG><a name="[25a]"></a>Quaternion::normalize()</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, quaternion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Quaternion::normalize() &rArr; Quaternion::length() const &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::length() const
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
</UL>

<P><STRONG><a name="[7cb]"></a>Quaternion::inverse() const</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, quaternion.o(.text), UNUSED)

<P><STRONG><a name="[6ca]"></a>Quaternion::operator *(const Quaternion&) const</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
</UL>

<P><STRONG><a name="[6cb]"></a>Quaternion::operator /(const Quaternion&) const</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, quaternion.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::Quaternion()
</UL>

<P><STRONG><a name="[6cd]"></a>arm_fir_init_f32</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, arm_fir_init_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = arm_fir_init_f32 &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_init(unsigned, const float*, float*, unsigned)
</UL>

<P><STRONG><a name="[6cf]"></a>filter_fir_f32_init(unsigned, const float*, float*, unsigned)</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, fir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = filter_fir_f32_init(unsigned, const float*, float*, unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_free(_filter_fir_f32_t*)
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::FIR_VEC3F()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::FIR_VEC3F(unsigned, const float*, const float*, const float*)
</UL>

<P><STRONG><a name="[6d1]"></a>filter_fir_f32_process(_filter_fir_f32_t*, float*, float*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::update(Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[6d3]"></a>filter_fir_f32_process_all(_filter_fir_f32_t*, float*, float*, unsigned)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_f32
</UL>

<P><STRONG><a name="[6d4]"></a>filter_fir_f32_clear(_filter_fir_f32_t*)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, fir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::clear()
</UL>

<P><STRONG><a name="[6d5]"></a>filter_fir_f32_deinit(_filter_fir_f32_t*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fir.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_free(_filter_fir_f32_t*)
</UL>

<P><STRONG><a name="[6d2]"></a>arm_fir_f32</STRONG> (Thumb, 1812 bytes, Stack size 88 bytes, arm_fir_f32.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_process_all(_filter_fir_f32_t*, float*, float*, unsigned)
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_process(_filter_fir_f32_t*, float*, float*)
</UL>

<P><STRONG><a name="[270]"></a>FIR_VEC3F::FIR_VEC3F()</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, fir_vec3f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FIR_VEC3F::FIR_VEC3F() &rArr; filter_fir_f32_init(unsigned, const float*, float*, unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_init(unsigned, const float*, float*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::CAN()
</UL>

<P><STRONG><a name="[7cc]"></a>FIR_VEC3F::FIR_VEC3F__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, fir_vec3f.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>FIR_VEC3F::FIR_VEC3F(unsigned, const float*, const float*, const float*)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, fir_vec3f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = FIR_VEC3F::FIR_VEC3F(unsigned, const float*, const float*, const float*) &rArr; filter_fir_f32_init(unsigned, const float*, float*, unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_init(unsigned, const float*, float*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::CAN()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::Attitude(Madgwick&, MahonyAHRS&, DCM_EKF&, MPU6500&, BMM150&, MPU6500&, AccelCal&, AccelCalibrator&)
</UL>

<P><STRONG><a name="[7cd]"></a>FIR_VEC3F::FIR_VEC3F__sub_object(unsigned, const float*, const float*, const float*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fir_vec3f.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>FIR_VEC3F::update(Vector3&lang;float&rang;)</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, fir_vec3f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_process(_filter_fir_f32_t*, float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc_trifun(Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[6d6]"></a>FIR_VEC3F::clear()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fir_vec3f.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_clear(_filter_fir_f32_t*)
</UL>

<P><STRONG><a name="[71a]"></a>arm_mat_mult_f32</STRONG> (Thumb, 242 bytes, Stack size 36 bytes, arm_mat_mult_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, T1&rang; math::MatrixBase&lang;(unsigned)3, (unsigned)3&rang;::operator *&lang;(unsigned)3&rang;(const math::Matrix&lang;(unsigned)3, T1&rang;&) const
</UL>

<P><STRONG><a name="[1f7]"></a>arm_mat_trans_f32</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, arm_mat_trans_f32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = arm_mat_trans_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
</UL>

<P><STRONG><a name="[183]"></a>calloc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, calloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = calloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::initialize_fuzzy(float, float, float)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::set_status(accel_cal_status_t)
</UL>

<P><STRONG><a name="[6d0]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_init(unsigned, const float*, float*, unsigned)
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[224]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::set_status(accel_cal_status_t)
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::_acal_save_calibrations()
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inverse(float*, float*, unsigned char)
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_LU_decompose(float*, float*, float*, float*, unsigned char)
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_free(_filter_fir_f32_t*)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[682]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>

<P><STRONG><a name="[357]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_Gimbal_cpp_56172044
</UL>

<P><STRONG><a name="[2be]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::write(Mavlink_msg_t*, int)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_write
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_read
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_write
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_read
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::read(Mavlink_msg_t*, int)
</UL>

<P><STRONG><a name="[7ce]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[2dc]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp_P(const char*, const char*)
</UL>

<P><STRONG><a name="[474]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[2dd]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen_P(const char*)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[2d9]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_delete
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
</UL>

<P><STRONG><a name="[1f3]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calibrate_from_orientation(bool*, void*, bool)
</UL>

<P><STRONG><a name="[2bd]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::write(Mavlink_msg_t*, int)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_write
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_read
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::read(Mavlink_msg_t*, int)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[6df]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7cf]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::least_square_calibration(float(&)[6][3], float(&)[3], float(&)[3], float)
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Matrix3&lang;float&rang;&) const
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChMatrix3::operator *(const ChMatrix3&)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm_rot_z(ChMatrix3, float)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quat2dcm(float, float, float, float)
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator +=(const Matrix3&lang;float&rang;&)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inverse(float*, float*, unsigned char)
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[7d0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7d1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[7d2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_free_fd
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::init(const Scheduler::Task*, unsigned char)
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calloc
</UL>

<P><STRONG><a name="[6e0]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[7d3]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_mul_vec(float*, float*, unsigned short, unsigned short)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::calculate_calibration_values(float(&)[6][3], float(&)[3][3], float(&)[3], float)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::SmallEKF()
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorN&lang;float, (unsigned char)9&rang;::VectorN()
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VectorN&lang;float, (unsigned char)9&rang;::zero()
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_cmd
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inverse(float*, float*, unsigned char)
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_LU_decompose(float*, float*, float*, float*, unsigned char)
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_mul(float*, float*, unsigned char)
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_delete
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_clear(_filter_fir_f32_t*)
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_fir_init_f32
</UL>

<P><STRONG><a name="[7d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[7d5]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[6e1]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[492]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chdir
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_get_token
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[17e]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGetMfParaN(const char*)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[7d6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[6d7]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6db]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[6d9]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[7d7]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[7d8]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[7d9]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7da]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6d8]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[6e3]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[120]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[6e5]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[6e6]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[6e7]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[6de]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[6da]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[6dd]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[126]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[6dc]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __assert_puts &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[6eb]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[131]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[7db]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6f4]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7dc]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6e8]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[6fc]"></a>__rt_new_handler_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_new_handler_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>

<P><STRONG><a name="[6e2]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[6e9]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[6ea]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[6e4]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[a9]"></a>__default_new_handler()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, arm_newhandler_noexceptions.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Znwj)
</UL>
<P><STRONG><a name="[6f0]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[6f1]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[7dd]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7de]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[7df]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[122]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[6f2]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[6ec]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[12d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6ee]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[6ed]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[6ef]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[6f3]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[7e0]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[7e1]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[6f7]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[258]"></a>Quaternion::Quaternion()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ap_smallekf.o(i._ZN10QuaternionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator /(const Quaternion&) const
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::operator *(const Quaternion&) const
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[7e2]"></a>Quaternion::Quaternion__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ap_smallekf.o(i._ZN10QuaternionC1Ev), UNUSED)

<P><STRONG><a name="[255]"></a>Quaternion::operator [](unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ap_smallekf.o(i._ZN10QuaternionixEh))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictCovariance()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
</UL>

<P><STRONG><a name="[318]"></a>Time_point::Time_point()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, gimbal.o(i._ZN10Time_pointC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Time_point::Time_point() &rArr; SPRain_TIMER::SPRain_TIMER(unsigned char) &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::SPRain_TIMER(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[7e3]"></a>Time_point::Time_point__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gimbal.o(i._ZN10Time_pointC1Ev), UNUSED)

<P><STRONG><a name="[327]"></a>DirectionAlign::align_enc_direction(Vector3&lang;float&rang;*)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gimbal.o(i._ZN14DirectionAlign19align_enc_directionEP7Vector3IfE))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[332]"></a>DirectionAlign::not_align()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gimbal.o(i._ZN14DirectionAlign9not_alignEv))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::direction_update(void*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[341]"></a>FuzzyController::get_ke()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(i._ZN15FuzzyController6get_keEv))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_controller_config_data_pck(void*)
</UL>

<P><STRONG><a name="[338]"></a>FuzzyController::set_ke(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(i._ZN15FuzzyController6set_keEf))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::set_controller_param_from_mavlink(void*)
</UL>

<P><STRONG><a name="[342]"></a>FuzzyController::get_kce()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(i._ZN15FuzzyController7get_kceEv))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_controller_config_data_pck(void*)
</UL>

<P><STRONG><a name="[339]"></a>FuzzyController::set_kce(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(i._ZN15FuzzyController7set_kceEf))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::set_controller_param_from_mavlink(void*)
</UL>

<P><STRONG><a name="[343]"></a>FuzzyController::get_kout()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(i._ZN15FuzzyController8get_koutEv))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_controller_config_data_pck(void*)
</UL>

<P><STRONG><a name="[33a]"></a>FuzzyController::set_kout(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(i._ZN15FuzzyController8set_koutEf))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::set_controller_param_from_mavlink(void*)
</UL>

<P><STRONG><a name="[319]"></a>AC_AttitudeControl::AC_AttitudeControl(Attitude&, AC_PD&, AC_PD&, AC_PD&, AC_PID&, AC_PID&, AC_PID&)</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, gimbal.o(i._ZN18AC_AttitudeControlC1ER8AttitudeR5AC_PDS3_S3_R6AC_PIDS5_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AC_AttitudeControl::AC_AttitudeControl(Attitude&, AC_PD&, AC_PD&, AC_PD&, AC_PID&, AC_PID&, AC_PID&)
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[7e4]"></a>AC_AttitudeControl::AC_AttitudeControl__sub_object(Attitude&, AC_PD&, AC_PD&, AC_PD&, AC_PID&, AC_PID&, AC_PID&)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, gimbal.o(i._ZN18AC_AttitudeControlC1ER8AttitudeR5AC_PDS3_S3_R6AC_PIDS5_S5_), UNUSED)

<P><STRONG><a name="[1e1]"></a>math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float)</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, rotation.o(i._ZN4math6MatrixILj3ELj3EE10from_eulerEfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rot_matrix(Rotation, math::Matrix&lang;(unsigned)3, (unsigned)3&rang;*)
</UL>

<P><STRONG><a name="[1ea]"></a>math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::Matrix()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, accelerometer_calibration.o(i._ZN4math6MatrixILj3ELj3EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, T1&rang; math::MatrixBase&lang;(unsigned)3, (unsigned)3&rang;::operator *&lang;(unsigned)3&rang;(const math::Matrix&lang;(unsigned)3, T1&rang;&) const
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
</UL>

<P><STRONG><a name="[7e5]"></a>math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::Matrix__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accelerometer_calibration.o(i._ZN4math6MatrixILj3ELj3EEC1Ev), UNUSED)

<P><STRONG><a name="[e8]"></a>math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::~Matrix()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, accelerometer_calibration.o(i._ZN4math6MatrixILj3ELj3EED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerometer_calibration.o(.constdata__ZTVN4math6MatrixILj3ELj3EEE)
</UL>
<P><STRONG><a name="[7e6]"></a>math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::~Matrix__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accelerometer_calibration.o(i._ZN4math6MatrixILj3ELj3EED1Ev), UNUSED)

<P><STRONG><a name="[1ec]"></a>math::Vector&lang;(unsigned)3&rang;::Vector(const float*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, accelerometer_calibration.o(i._ZN4math6VectorILj3EEC1EPKf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = math::Vector&lang;(unsigned)3&rang;::Vector(const float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::VectorBase&lang;(unsigned)3&rang;::VectorBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
</UL>

<P><STRONG><a name="[7e7]"></a>math::Vector&lang;(unsigned)3&rang;::Vector__sub_object(const float*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, accelerometer_calibration.o(i._ZN4math6VectorILj3EEC1EPKf), UNUSED)

<P><STRONG><a name="[e9]"></a>math::Vector&lang;(unsigned)3&rang;::~Vector()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, accelerometer_calibration.o(i._ZN4math6VectorILj3EED1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> accelerometer_calibration.o(.constdata__ZTVN4math6VectorILj3EEE)
</UL>
<P><STRONG><a name="[7e8]"></a>math::Vector&lang;(unsigned)3&rang;::~Vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accelerometer_calibration.o(i._ZN4math6VectorILj3EED1Ev), UNUSED)

<P><STRONG><a name="[33b]"></a>AC_PID::imax(float)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, gimbal.o(i._ZN6AC_PID4imaxEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AC_PID::imax(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::set_controller_param_from_mavlink(void*)
</UL>

<P><STRONG><a name="[7d]"></a>Gimbal::~Gimbal()</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gimbal.o(i._ZN6GimbalD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Gimbal::~Gimbal() &rArr; Time_point::~Time_point() &rArr; Time_point::stop_measure_time() &rArr; SPRain_TIMER::pause() &rArr; TIM_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::~QRingBuffer()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_point::~Time_point()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.text)
</UL>
<P><STRONG><a name="[7e9]"></a>Gimbal::~Gimbal__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, gimbal.o(i._ZN6GimbalD1Ev), UNUSED)

<P><STRONG><a name="[18f]"></a>Gaussmf::set_center(float)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fuzzy_control.o(i._ZN7Gaussmf10set_centerEf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzifier::set_ce_domain(float, float)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fuzzifier::set_e_domain(float, float)
</UL>

<P><STRONG><a name="[31e]"></a>Attitude::Attitude(Madgwick&, MahonyAHRS&, DCM_EKF&, MPU6500&, BMM150&, MPU6500&, AccelCal&, AccelCalibrator&)</STRONG> (Thumb, 550 bytes, Stack size 40 bytes, gimbal.o(i._ZN8AttitudeC1ER8MadgwickR10MahonyAHRSR7DCM_EKFR7MPU6500R6BMM150S7_R8AccelCalR15AccelCalibrator))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Attitude::Attitude(Madgwick&, MahonyAHRS&, DCM_EKF&, MPU6500&, BMM150&, MPU6500&, AccelCal&, AccelCalibrator&) &rArr; FIR_VEC3F::FIR_VEC3F(unsigned, const float*, const float*, const float*) &rArr; filter_fir_f32_init(unsigned, const float*, float*, unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::LowPassFilter2p(float, float)
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::FIR_VEC3F(unsigned, const float*, const float*, const float*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[7ea]"></a>Attitude::Attitude__sub_object(Madgwick&, MahonyAHRS&, DCM_EKF&, MPU6500&, BMM150&, MPU6500&, AccelCal&, AccelCalibrator&)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, gimbal.o(i._ZN8AttitudeC1ER8MadgwickR10MahonyAHRSR7DCM_EKFR7MPU6500R6BMM150S7_R8AccelCalR15AccelCalibrator), UNUSED)

<P><STRONG><a name="[32d]"></a>Madgwick::get_q0()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gimbal.o(i._ZN8Madgwick6get_q0Ev))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_attitude_quat_pck(void*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[32c]"></a>Madgwick::get_q1()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gimbal.o(i._ZN8Madgwick6get_q1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_attitude_quat_pck(void*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[32b]"></a>Madgwick::get_q2()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gimbal.o(i._ZN8Madgwick6get_q2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_attitude_quat_pck(void*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[32a]"></a>Madgwick::get_q3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gimbal.o(i._ZN8Madgwick6get_q3Ev))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_attitude_quat_pck(void*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[168]"></a>AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pid.o(i._ZN9AP_ParamTIfL11ap_var_type4EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::AC_PD(float, float, float, float, float)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::AC_PID(float, float, float, float, float, float)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRS(float, float)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::Madgwick(float)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::DirectionAlign()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::MPU6500(const char*)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::CAN()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::DCM_EKF()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::AC_AttitudeControl(Attitude&, AC_PD&, AC_PD&, AC_PD&, AC_PID&, AC_PID&, AC_PID&)
</UL>

<P><STRONG><a name="[7eb]"></a>AP_ParamT&lang;float, (ap_var_type)4&rang;::AP_ParamT__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pid.o(i._ZN9AP_ParamTIfL11ap_var_type4EEC1Ev), UNUSED)

<P><STRONG><a name="[31a]"></a>BGC_PARAM::BGC_PARAM()</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, gimbal.o(i._ZN9BGC_PARAMC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BGC_PARAM::BGC_PARAM() &rArr; AC_PD::AC_PD(float, float, float, float, float) &rArr; AC_PD::filt_hz(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::AC_PD(float, float, float, float, float)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::AC_PID(float, float, float, float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
</UL>

<P><STRONG><a name="[7ec]"></a>BGC_PARAM::BGC_PARAM__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gimbal.o(i._ZN9BGC_PARAMC1Ev), UNUSED)

<P><STRONG><a name="[21b]"></a>AccelCalibrator::get_status() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, accelcal.o(i._ZNK15AccelCalibrator10get_statusEv))
<BR><BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::update_status()
</UL>

<P><STRONG><a name="[1ed]"></a>math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::operator *(const math::Vector&lang;(unsigned)3&rang;&) const</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, accelerometer_calibration.o(i._ZNK4math6MatrixILj3ELj3EEmlERKNS_6VectorILj3EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::operator *(const math::Vector&lang;(unsigned)3&rang;&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::VectorBase&lang;(unsigned)3&rang;::VectorBase()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
</UL>

<P><STRONG><a name="[157]"></a>AC_PID::kD() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, attitudecontrol.o(i._ZNK6AC_PID2kDEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::max_rate_step_bf_yaw()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::max_rate_step_bf_pitch()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::max_rate_step_bf_roll()
</UL>

<P><STRONG><a name="[158]"></a>AC_PID::kP() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, attitudecontrol.o(i._ZNK6AC_PID2kPEv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::max_rate_step_bf_yaw()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::max_rate_step_bf_pitch()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::max_rate_step_bf_roll()
</UL>

<P><STRONG><a name="[344]"></a>AC_PID::imax() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gimbal.o(i._ZNK6AC_PID4imaxEv))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_controller_config_data_pck(void*)
</UL>

<P><STRONG><a name="[345]"></a>AC_PID::filt_hz() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gimbal.o(i._ZNK6AC_PID7filt_hzEv))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::generate_controller_config_data_pck(void*)
</UL>

<P><STRONG><a name="[1f0]"></a>std::abs(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, accelerometer_calibration.o(i._ZSt3absf))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::accel_calibration_worker(detect_orientation_return, void*)
</UL>

<P><STRONG><a name="[3a9]"></a>std::cos(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, att2mot.o(i._ZSt3cosf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_dcm(Vector3&lang;float&rang;, ChMatrix3, ChMatrix3*)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decouple_full(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[17a]"></a>std::exp(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fuzzylogic.o(i._ZSt3expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::exp(float) &rArr; __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGaussian2Mf(float, float*)
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGaussianMf(float, float*)
</UL>

<P><STRONG><a name="[3bd]"></a>std::sin(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, att2mot.o(i._ZSt3sinf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_body_dcm(Vector3&lang;float&rang;, ChMatrix3, ChMatrix3*)
</UL>

<P><STRONG><a name="[69d]"></a>std::fmod(float, float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, location.o(i._ZSt4fmodff), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_360_cd_float(float)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_180_cd_float(float)
</UL>

<P><STRONG><a name="[1e5]"></a>std::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, accelerometer_calibration.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::least_square_calibration(float(&)[6][3], float(&)[3], float(&)[3], float)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
</UL>

<P><STRONG><a name="[249]"></a>std::atan2(float, float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dcm_ekf_imu.o(i._ZSt5atan2ff), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
</UL>

<P><STRONG><a name="[2bc]"></a>operator delete[] (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_del.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operator delete[] (void*) &rArr; operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::~QRingBuffer()
</UL>

<P><STRONG><a name="[6fa]"></a>operator delete (void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delete.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator delete (void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>

<P><STRONG><a name="[2ba]"></a>operator new[] (unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, array_new.o(i._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = operator new[] (unsigned) &rArr; operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_mul_vec(float*, float*, unsigned short, unsigned short)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QRingBuffer::QRingBuffer()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Scheduler::init(const Scheduler::Task*, unsigned char)
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_inverse(float*, float*, unsigned char)
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mat_mul(float*, float*, unsigned char)
</UL>

<P><STRONG><a name="[6fb]"></a>operator new(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, new.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_new_handler_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
</UL>

<P><STRONG><a name="[703]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[700]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[16a]"></a>__ARM_isfinitef</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pid.o(i.__ARM_isfinitef))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_input_filter_all(float)
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::set_input_filter_d(float)
</UL>

<P><STRONG><a name="[69c]"></a>__ARM_isnanf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ap_math.o(i.__ARM_isnanf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(float)
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_asin(float)
</UL>

<P><STRONG><a name="[1dc]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::Attitude(Madgwick&, MahonyAHRS&, DCM_EKF&, MPU6500&, BMM150&, MPU6500&, AccelCal&, AccelCalibrator&)
</UL>

<P><STRONG><a name="[19b]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::update()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
</UL>

<P><STRONG><a name="[22d]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1be]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::request_eular(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::getEuler(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::getEuler(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::to_euler312() const
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_asin(float)
</UL>

<P><STRONG><a name="[6ad]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[6a9]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[1bf]"></a>__hardfp_atan2f</STRONG> (Thumb, 502 bytes, Stack size 16 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atan2f
</UL>
<BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::request_eular(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::getEuler(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc_trifun(Vector3&lang;float&rang;&)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::getEuler(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::calcMagHeadingInnov()
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::atan2(float, float)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_euler_yaw() const
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_euler_roll() const
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_axis_angle(Vector3&lang;float&rang;&)
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::to_euler312() const
</UL>

<P><STRONG><a name="[6aa]"></a>__hardfp_copysign</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, location.o(i.__hardfp_copysign), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[6a6]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[1b1]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::cos_pitch()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::cos_roll()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotchFilter&lang;Vector3&lang;float&rang;&rang;::init(float, float, float, float)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::cos_yaw()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::get_yawerror(float, float, float)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float)
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::compute_params(float, float, DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::biquad_params&)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc_trifun(Vector3&lang;float&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::cos(float)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm_rot_z(ChMatrix3, float)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decouple_full(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle(const Vector3&lang;float&rang;&, float)
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_euler(float, float, float)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::from_euler312(float, float, float)
</UL>

<P><STRONG><a name="[18a]"></a>__hardfp_expf</STRONG> (Thumb, 426 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_expf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gaussmf::cal(float)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exp(float)
</UL>

<P><STRONG><a name="[7ed]"></a>__mathlib_expf</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, expf.o(i.__hardfp_expf), UNUSED)

<P><STRONG><a name="[6ab]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[69f]"></a>__hardfp_fmodf</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, fmodf.o(i.__hardfp_fmodf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>
<BR>[Called By]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::fmod(float, float)
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_2PI(float)
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wrap_PI(float)
</UL>

<P><STRONG><a name="[24c]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2f_c(float)
</UL>

<P><STRONG><a name="[7ee]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[17c]"></a>__hardfp_powf</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_powf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotchFilter&lang;Vector3&lang;float&rang;&rang;::init(float, float, float, float)
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGaussian2Mf(float, float*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::detect_orientation(bool)
</UL>

<P><STRONG><a name="[7ef]"></a>__mathlib_powf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, powf.o(i.__hardfp_powf), UNUSED)

<P><STRONG><a name="[6a3]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[198]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::sin_pitch()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::sin_roll()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotchFilter&lang;Vector3&lang;float&rang;&rang;::init(float, float, float, float)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::sin_yaw()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::get_yawerror(float, float, float)
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin_func(float, float)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::from_euler(float, float, float)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc_trifun(Vector3&lang;float&rang;&)
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::RunEKF(float, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sin(float)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm_rot_z(ChMatrix3, float)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decouple_full(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_xy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;euler2dcm_zxy(Vector3&lang;float&rang;, ChMatrix3*)
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle(const Vector3&lang;float&rang;&, float)
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_euler(float, float, float)
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::from_euler312(float, float, float)
</UL>

<P><STRONG><a name="[6a4]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[1b6]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_sqrt(float)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRSUpdate(float, float, float, float, float, float, float)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::acos_approx(float)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::invSqrt(float)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::invSqrt(float)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NotchFilter&lang;Vector3&lang;float&rang;&rang;::init(float, float, float, float)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::sphere_fit_least_squares(const float*, const float*, const float*, unsigned, unsigned, float, float*, float*, float*, float*)
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_rotation_matrix(const Matrix3&lang;float&rang;&)
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::length() const
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_axis_angle(Vector3&lang;float&rang;&)
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3(float, float, float)
</UL>

<P><STRONG><a name="[257]"></a>__hardfp_tanf</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, tanf.o(i.__hardfp_tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::compute_params(float, float, DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::biquad_params&)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decouple_full(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[70c]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[70e]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[706]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[70d]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[702]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[708]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[70b]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[704]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[712]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[6fe]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[70a]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[6ff]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[710]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
</UL>

<P><STRONG><a name="[701]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_expf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[70f]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[709]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[705]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[6fd]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[a7]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1ab]"></a>NotchFilter&lang;Vector3&lang;float&rang;&rang;::init(float, float, float, float)</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, notchfilter.o(t._ZN11NotchFilterI7Vector3IfEE4initEffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = NotchFilter&lang;Vector3&lang;float&rang;&rang;::init(float, float, float, float) &rArr; log2f_c(float) &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2f_c(float)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_powf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::start_init()
</UL>

<P><STRONG><a name="[715]"></a>LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::set_cutoff_frequency(float, float)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, filter.o(t._ZN15LowPassFilter2pI7Vector3IfEE20set_cutoff_frequencyEff))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::set_cutoff_frequency(float, float) &rArr; DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::compute_params(float, float, DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::biquad_params&) &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::compute_params(float, float, DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::biquad_params&)
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::LowPassFilter2p(float, float)
</UL>

<P><STRONG><a name="[6f9]"></a>LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::LowPassFilter2p(float, float)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, filter.o(t._ZN15LowPassFilter2pI7Vector3IfEEC1Eff))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::LowPassFilter2p(float, float) &rArr; LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::set_cutoff_frequency(float, float) &rArr; DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::compute_params(float, float, DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::biquad_params&) &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::DigitalBiquadFilter()
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::set_cutoff_frequency(float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::Attitude(Madgwick&, MahonyAHRS&, DCM_EKF&, MPU6500&, BMM150&, MPU6500&, AccelCal&, AccelCalibrator&)
</UL>

<P><STRONG><a name="[7f0]"></a>LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::LowPassFilter2p__sub_object(float, float)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, filter.o(t._ZN15LowPassFilter2pI7Vector3IfEEC1Eff), UNUSED)

<P><STRONG><a name="[716]"></a>DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::compute_params(float, float, DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::biquad_params&)</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, filter.o(t._ZN19DigitalBiquadFilterI7Vector3IfEE14compute_paramsEffRNS2_13biquad_paramsE))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::compute_params(float, float, DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::biquad_params&) &rArr; __hardfp_tanf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tanf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::set_cutoff_frequency(float, float)
</UL>

<P><STRONG><a name="[717]"></a>DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::DigitalBiquadFilter()</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, filter.o(t._ZN19DigitalBiquadFilterI7Vector3IfEEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::DigitalBiquadFilter()
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LowPassFilter2p&lang;Vector3&lang;float&rang;&rang;::LowPassFilter2p(float, float)
</UL>

<P><STRONG><a name="[7f1]"></a>DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::DigitalBiquadFilter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, filter.o(t._ZN19DigitalBiquadFilterI7Vector3IfEEC1Ev), UNUSED)

<P><STRONG><a name="[6f8]"></a>math::VectorBase&lang;(unsigned)3&rang;::VectorBase()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, accelerometer_calibration.o(t._ZN4math10VectorBaseILj3EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::operator *(const math::Vector&lang;(unsigned)3&rang;&) const
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Vector&lang;(unsigned)3&rang;::Vector(const float*)
</UL>

<P><STRONG><a name="[7f2]"></a>math::VectorBase&lang;(unsigned)3&rang;::VectorBase__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accelerometer_calibration.o(t._ZN4math10VectorBaseILj3EEC1Ev), UNUSED)

<P><STRONG><a name="[6ba]"></a>Matrix3&lang;float&rang;::from_euler312(float, float, float)</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, matrix3.o(t._ZN7Matrix3IfE13from_euler312Efff), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_vector312(float, float, float)
</UL>

<P><STRONG><a name="[3b6]"></a>Matrix3&lang;float&rang;::rotate(const Vector3&lang;float&rang;&)</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, matrix3.o(t._ZN7Matrix3IfE6rotateERK7Vector3IfE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3()
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator +=(const Matrix3&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compensation(float, float, float, float, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[719]"></a>Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, matrix3.o(t._ZN7Matrix3IfEC1ERK7Vector3IfES4_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Matrix3&lang;float&rang;&) const
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::transposed() const
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator +=(const Matrix3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[7f3]"></a>Matrix3&lang;float&rang;::Matrix3__sub_object(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, matrix3.o(t._ZN7Matrix3IfEC1ERK7Vector3IfES4_S4_), UNUSED)

<P><STRONG><a name="[233]"></a>Matrix3&lang;float&rang;::Matrix3(float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, accelcalibrator.o(t._ZN7Matrix3IfEC1Efffffffff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Matrix3&lang;float&rang;::Matrix3(float, float, float, float, float, float, float, float, float)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_sample_corrected(unsigned char, Vector3&lang;float&rang;&) const
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_jacob(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&, VectorN&lang;float, (unsigned char)9&rang;&) const
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_residual(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&) const
</UL>

<P><STRONG><a name="[7f4]"></a>Matrix3&lang;float&rang;::Matrix3__sub_object(float, float, float, float, float, float, float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, accelcalibrator.o(t._ZN7Matrix3IfEC1Efffffffff), UNUSED)

<P><STRONG><a name="[24f]"></a>Matrix3&lang;float&rang;::Matrix3()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ap_smallekf.o(t._ZN7Matrix3IfEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Matrix3&lang;float&rang;::Matrix3()
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3()
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::calcMagHeadingInnov()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::SmallEKF()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::rotate(const Vector3&lang;float&rang;&)
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_vector312() const
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_vector312(float, float, float)
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::earth_to_body(Vector3&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[7f5]"></a>Matrix3&lang;float&rang;::Matrix3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ap_smallekf.o(t._ZN7Matrix3IfEC1Ev), UNUSED)

<P><STRONG><a name="[251]"></a>Matrix3&lang;float&rang;::operator [](unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ap_smallekf.o(t._ZN7Matrix3IfEixEh))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::calcMagHeadingInnov()
</UL>

<P><STRONG><a name="[718]"></a>Matrix3&lang;float&rang;::operator +=(const Matrix3&lang;float&rang;&)</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, matrix3.o(t._ZN7Matrix3IfEpLERKS0_), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::rotate(const Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[6a7]"></a>Vector3&lang;double&rang;::operator [](unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, location.o(t._ZN7Vector3IdEixEh), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[245]"></a>Vector3&lang;float&rang;::zero()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dcm_ekf_imu.o(t._ZN7Vector3IfE4zeroEv))
<BR><BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::getGyroBias(Vector3&lang;float&rang;&) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::getDebug(float&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::resetEKF()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::DCM_EKF()
</UL>

<P><STRONG><a name="[1df]"></a>Vector3&lang;float&rang;::rotate(Rotation)</STRONG> (Thumb, 1038 bytes, Stack size 0 bytes, vector3.o(t._ZN7Vector3IfE6rotateE8Rotation))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::read_Data()
</UL>

<P><STRONG><a name="[22e]"></a>Vector3&lang;float&rang;::Vector3(float, float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, accelcalibrator.o(t._ZN7Vector3IfEC1Efff))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator *(float) const
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator /(float) const
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator %(const Vector3&lang;float&rang;&) const
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Matrix3&lang;float&rang;&) const
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::transposed() const
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::operator -() const
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3(float, float, float, float, float, float, float, float, float)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::start(accel_cal_fit_type_t, unsigned char, float)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::direction_update(void*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::sekf_update(void*)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::to_euler312() const
</UL>

<P><STRONG><a name="[7f6]"></a>Vector3&lang;float&rang;::Vector3__sub_object(float, float, float)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, accelcalibrator.o(t._ZN7Vector3IfEC1Efff), UNUSED)

<P><STRONG><a name="[76]"></a>Vector3&lang;float&rang;::Vector3()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, attitudecontrol.o(t._ZN7Vector3IfEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::serial_PID(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_controller_run(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_yaw(float, float, float, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw(float, float, float)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_vec(ChMatrix3*, Vector3&lang;float&rang;*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::update()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::Sliding_Windows_Filter(Vector3&lang;float&rang;)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::DirectionAlign()
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::get_mag_data()
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMM150::BMM150(const char*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::MPU6500(const char*)
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DigitalBiquadFilter&lang;Vector3&lang;float&rang;&rang;::DigitalBiquadFilter()
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::FIR_VEC3F()
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::FIR_VEC3F(unsigned, const float*, const float*, const float*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIR_VEC3F::update(Vector3&lang;float&rang;)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc_trifun(Vector3&lang;float&rang;&)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::CAN()
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::SmallEKF()
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::DCM_EKF()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::accept_sample(const Vector3&lang;float&rang;&)
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_mean_squared_residuals(const AccelCalibrator::param_t&) const
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::AccelCalibrator()
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCal::_acal_save_calibrations()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::Upper_Control_Interface()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Upper_Control_Interface::update_angle_setpoint()
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::Attitude(Madgwick&, MahonyAHRS&, DCM_EKF&, MPU6500&, BMM150&, MPU6500&, AccelCal&, AccelCalibrator&)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::AC_AttitudeControl(Attitude&, AC_PD&, AC_PD&, AC_PD&, AC_PID&, AC_PID&, AC_PID&)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::mavlink_decode_msg(void*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::direction_update(void*)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::sekf_update(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_compensation(float, float, float, float, Vector3&lang;float&rang;)
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drone_quat_compensation(float, float, float, float, Quaternion, Vector3&lang;float&rang;, float, Vector3&lang;float&rang;*)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap_t2(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vel_remap(Vector3&lang;float&rang;, Quaternion, Vector3&lang;float&rang;, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loop_limit_vec3(Vector3&lang;float&rang;, float)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decouple_full(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcm2euler_zxy(ChMatrix3)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vector_fusion(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mpu6500.o(.text)
<LI> gimbal.o(i._ZN8AttitudeC1ER8MadgwickR10MahonyAHRSR7DCM_EKFR7MPU6500R6BMM150S7_R8AccelCalR15AccelCalibrator)
</UL>
<P><STRONG><a name="[7f7]"></a>Vector3&lang;float&rang;::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, attitudecontrol.o(t._ZN7Vector3IfEC1Ev), UNUSED)

<P><STRONG><a name="[19f]"></a>Vector3&lang;float&rang;::operator ()(float, float, float)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, directionalign.o(t._ZN7Vector3IfEclEfff))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroOffsetCalibration()
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc_trifun(Vector3&lang;float&rang;&)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::sekf_update(void*)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tracking_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;&)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1de]"></a>Vector3&lang;float&rang;::operator /=(float)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vector3.o(t._ZN7Vector3IfEdVEf))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle_fast(Vector3&lang;float&rang;)
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle(Vector3&lang;float&rang;)
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_axis_angle(Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[252]"></a>Vector3&lang;float&rang;::operator [](unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ap_smallekf.o(t._ZN7Vector3IfEixEh))
<BR><BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::calcMagHeadingInnov()
</UL>

<P><STRONG><a name="[6bd]"></a>Vector3&lang;float&rang;::operator *=(float)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, vector3.o(t._ZN7Vector3IfEmLEf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_axis_angle(Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[14e]"></a>Vector3&lang;float&rang;::operator +=(const Vector3&lang;float&rang;&)</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, vector3.o(t._ZN7Vector3IfEpLERKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw(float, float, float)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
</UL>

<P><STRONG><a name="[1c9]"></a>Vector3&lang;short&rang;::Vector3()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mpu6500.o(t._ZN7Vector3IsEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::gyroCalibration()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6500::MPU6500(const char*)
</UL>

<P><STRONG><a name="[7f8]"></a>Vector3&lang;short&rang;::Vector3__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mpu6500.o(t._ZN7Vector3IsEC1Ev), UNUSED)

<P><STRONG><a name="[23d]"></a>VectorN&lang;float, (unsigned char)9&rang;::zero()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, accelcalibrator.o(t._ZN7VectorNIfLh9EE4zeroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VectorN&lang;float, (unsigned char)9&rang;::zero() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
</UL>

<P><STRONG><a name="[23c]"></a>VectorN&lang;float, (unsigned char)9&rang;::VectorN()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, accelcalibrator.o(t._ZN7VectorNIfLh9EEC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = VectorN&lang;float, (unsigned char)9&rang;::VectorN() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
</UL>

<P><STRONG><a name="[7f9]"></a>VectorN&lang;float, (unsigned char)9&rang;::VectorN__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, accelcalibrator.o(t._ZN7VectorNIfLh9EEC1Ev), UNUSED)

<P><STRONG><a name="[23a]"></a>VectorN&lang;float, (unsigned char)9&rang;::operator [](unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, accelcalibrator.o(t._ZN7VectorNIfLh9EEixEh))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::run_fit(unsigned char, float&)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_jacob(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&, VectorN&lang;float, (unsigned char)9&rang;&) const
</UL>

<P><STRONG><a name="[2d0]"></a>AP_ParamT&lang;signed char, (ap_var_type)1&rang;::set(const signed char&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, parameter.o(t._ZN9AP_ParamTIaL11ap_var_type1EE3setERKa))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::set_value(ap_var_type, void*, float*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
</UL>

<P><STRONG><a name="[2d3]"></a>AP_ParamT&lang;float, (ap_var_type)4&rang;::set(const float&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, parameter.o(t._ZN9AP_ParamTIfL11ap_var_type4EE3setERKf))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::set_value(ap_var_type, void*, float*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
</UL>

<P><STRONG><a name="[15c]"></a>AP_ParamT&lang;float, (ap_var_type)4&rang;::operator =(const float&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, attitudecontrol.o(t._ZN9AP_ParamTIfL11ap_var_type4EEaSERKf))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::operator ()(float, float, float, float, float, float, float)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::AC_PD(float, float, float, float, float)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PD::filt_hz(float)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::operator ()(float, float, float, float, float, float)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::AC_PID(float, float, float, float, float, float)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::filt_hz(float)
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::accel_limiting(bool)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRS(float, float)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::Madgwick(float)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::encoder_zero_calibration()
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
</UL>

<P><STRONG><a name="[2d2]"></a>AP_ParamT&lang;int, (ap_var_type)3&rang;::set(const int&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, parameter.o(t._ZN9AP_ParamTIiL11ap_var_type3EE3setERKi))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::set_value(ap_var_type, void*, float*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
</UL>

<P><STRONG><a name="[2d1]"></a>AP_ParamT&lang;short, (ap_var_type)2&rang;::set(const short&)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, parameter.o(t._ZN9AP_ParamTIsL11ap_var_type2EE3setERKs))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::set_value(ap_var_type, void*, float*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
</UL>

<P><STRONG><a name="[1eb]"></a>math::Matrix&lang;(unsigned)3, T1&rang; math::MatrixBase&lang;(unsigned)3, (unsigned)3&rang;::operator *&lang;(unsigned)3&rang;(const math::Matrix&lang;(unsigned)3, T1&rang;&) const</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, accelerometer_calibration.o(t._ZNK4math10MatrixBaseILj3ELj3EEmlILj3EEENS_6MatrixILj3EXT_EEERKNS3_ILj3EXT_EEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = math::Matrix&lang;(unsigned)3, T1&rang; math::MatrixBase&lang;(unsigned)3, (unsigned)3&rang;::operator *&lang;(unsigned)3&rang;(const math::Matrix&lang;(unsigned)3, T1&rang;&) const &rArr; arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;math::Matrix&lang;(unsigned)3, (unsigned)3&rang;::Matrix()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::do_accel_calibration()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accel_Cal::read_accelerometer_avg(float(&)[6][3], unsigned, unsigned)
</UL>

<P><STRONG><a name="[25d]"></a>Matrix3&lang;float&rang;::transposed() const</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, matrix3.o(t._ZNK7Matrix3IfE10transposedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Matrix3&lang;float&rang;::transposed() const &rArr; Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
</UL>

<P><STRONG><a name="[6c8]"></a>Matrix3&lang;float&rang;::to_euler312() const</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, matrix3.o(t._ZNK7Matrix3IfE11to_euler312Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_vector312() const
</UL>

<P><STRONG><a name="[235]"></a>Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, matrix3.o(t._ZNK7Matrix3IfEmlERK7Vector3IfE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Matrix3&lang;float&rang;::operator *(const Vector3&lang;float&rang;&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::calcMagHeadingInnov()
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_sample_corrected(unsigned char, Vector3&lang;float&rang;&) const
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_jacob(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&, VectorN&lang;float, (unsigned char)9&rang;&) const
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_residual(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&) const
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::earth_to_body(Vector3&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[253]"></a>Matrix3&lang;float&rang;::operator *(const Matrix3&lang;float&rang;&) const</STRONG> (Thumb, 424 bytes, Stack size 104 bytes, matrix3.o(t._ZNK7Matrix3IfEmlERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Matrix3&lang;float&rang;::operator *(const Matrix3&lang;float&rang;&) const &rArr; Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::Matrix3(const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&, const Vector3&lang;float&rang;&)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::calcMagHeadingInnov()
</UL>

<P><STRONG><a name="[6a2]"></a>Vector3&lang;double&rang;::operator [](unsigned char) const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, location.o(t._ZNK7Vector3IdEixEh), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[236]"></a>Vector3&lang;float&rang;::length() const</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vector3.o(t._ZNK7Vector3IfE6lengthEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Vector3&lang;float&rang;::length() const &rArr; pythagorous3(float, float, float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pythagorous3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::alignHeading()
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseCompass()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::accept_sample(const Vector3&lang;float&rang;&)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_jacob(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&, VectorN&lang;float, (unsigned char)9&rang;&) const
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_residual(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&) const
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_fast(const Vector3&lang;float&rang;&)
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle_fast(Vector3&lang;float&rang;)
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle(Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[1a1]"></a>Vector3&lang;float&rang;::operator /(float) const</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, vector3.o(t._ZNK7Vector3IfEdvEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Vector3&lang;float&rang;::operator /(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::new_sample(const Vector3&lang;float&rang;&, float)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude::Sliding_Windows_Filter(Vector3&lang;float&rang;)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc_trifun(Vector3&lang;float&rang;&)
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN::get_enc(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::getGyroBias(Vector3&lang;float&rang;&) const
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::getDebug(float&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_sample(unsigned char, Vector3&lang;float&rang;&) const
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
</UL>

<P><STRONG><a name="[152]"></a>Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vector3.o(t._ZNK7Vector3IfEmiERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Vector3&lang;float&rang;::operator -(const Vector3&lang;float&rang;&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_controller_run(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;angle_diff(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::calcMagHeadingInnov()
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::accept_sample(const Vector3&lang;float&rang;&)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_quat(float, float, float, float, float, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::control_update(void*)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_tracking(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_body_xy(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle_err_bodyframe(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[13c]"></a>Vector3&lang;float&rang;::operator *(float) const</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, vector3.o(t._ZNK7Vector3IfEmlEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Vector3&lang;float&rang;::operator *(float) const
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::relax_bf_rate_controller()
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
</UL>

<P><STRONG><a name="[230]"></a>Vector3&lang;float&rang;::operator -() const</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, vector3.o(t._ZNK7Vector3IfEngEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Vector3&lang;float&rang;::operator -() const
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_calibration(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_calibration(Vector3&lang;float&rang;&) const
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_calibration(Vector3&lang;float&rang;&, Vector3&lang;float&rang;&) const
</UL>

<P><STRONG><a name="[234]"></a>Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, vector3.o(t._ZNK7Vector3IfEplERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Vector3&lang;float&rang;::operator +(const Vector3&lang;float&rang;&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::fuseVelocity(bool)
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::get_sample_corrected(unsigned char, Vector3&lang;float&rang;&) const
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_jacob(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&, VectorN&lang;float, (unsigned char)9&rang;&) const
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccelCalibrator::calc_residual(const Vector3&lang;float&rang;&, const AccelCalibrator::param_t&) const
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix3&lang;float&rang;::operator +=(const Matrix3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[261]"></a>Vector3&lang;float&rang;::operator %(const Vector3&lang;float&rang;&) const</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, vector3.o(t._ZNK7Vector3IfErmERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Vector3&lang;float&rang;::operator %(const Vector3&lang;float&rang;&) const
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::Vector3(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmallEKF::predictStates()
</UL>

<P><STRONG><a name="[707]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[7fa]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[7fb]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[7fc]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[7fd]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[7fe]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[248]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2f_c(float)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[71b]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[38e]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPeriod(unsigned)
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[71e]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[723]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2f_c(float)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_ls
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[721]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
</UL>

<P><STRONG><a name="[722]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[2f4]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_ls
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPeriod(unsigned)
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[724]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[2f3]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_ls
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPeriod(unsigned)
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[7ff]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[714]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[800]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1bb]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float)
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[725]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[728]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_ls
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[726]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[71d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[720]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[6ac]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
</UL>

<P><STRONG><a name="[727]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[6a5]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsllh2ecef(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[729]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[713]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[38f]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPeriod(unsigned)
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wgsecef2llh(const Vector3&lang;double&rang;&, Vector3&lang;double&rang;&)
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[72b]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float, float, float, float)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Madgwick::MadgwickUpdate(float, float, float, float, float, float)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectionAlign::aligning_update(Vector3&lang;float&rang;*, Vector3&lang;float&rang;*, Vector3&lang;float&rang;*)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log2f_c(float)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCM_EKF::updateIMU(Vector3&lang;float&rang;, Vector3&lang;float&rang;, float)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tracking_angle_e(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;speed_decouple(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
</UL>

<P><STRONG><a name="[72c]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[72d]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frem
</UL>

<P><STRONG><a name="[11e]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[801]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[802]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[711]"></a>_frem</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, frem_clz.o(x$fpl$frem), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmodf
</UL>

<P><STRONG><a name="[71c]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[145]"></a>constrain_float(float, float, float)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, attitudecontrol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_yaw(float)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_pitch(float)
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_bf_to_motor_roll(float)
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::integrate_bf_rate_error_to_angle_errors()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::serial_PID(Vector3&lang;float&rang;, Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::rate_controller_run(Vector3&lang;float&rang;, Vector3&lang;float&rang;)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_yaw(float, float, float, bool)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw(float, float, float)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::angle_ef_roll_pitch_rate_ef_yaw_smooth(float, float, float, float)
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_roll_angle_and_error(float, Vector3&lang;float&rang;&, float)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_pitch_angle_and_error(float, Vector3&lang;float&rang;&, float)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::update_ef_yaw_angle_and_error(float, Vector3&lang;float&rang;&, float)
</UL>

<P><STRONG><a name="[108]"></a>__sti___19_AttitudeControl_cpp_61cf2197</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, attitudecontrol.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> attitudecontrol.o(.init_array)
</UL>
<P><STRONG><a name="[137]"></a>is_zero(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, attitudecontrol.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::accel_limiting(bool)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::sqrt_controller(float, float, float)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_AttitudeControl::frame_conversion_bf_to_ef(const Vector3&lang;float&rang;&, Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[109]"></a>__sti___7_PID_cpp_d532c8a9</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pid.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pid.o(.init_array)
</UL>
<P><STRONG><a name="[169]"></a>is_zero(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_filt_alpha() const
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_PID::get_i()
</UL>

<P><STRONG><a name="[10a]"></a>__sti___5_P_cpp_5a5710aa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, p.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> p.o(.init_array)
</UL>
<P><STRONG><a name="[10b]"></a>__sti___6_PD_cpp_693c8706</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> pd.o(.init_array)
</UL>
<P><STRONG><a name="[75]"></a>sin_func(float, float)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, excitation.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = sin_func(float, float) &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> excitation.o(.text)
</UL>
<P><STRONG><a name="[10c]"></a>__sti___18_DirectionAlign_cpp_0fb6be37</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, directionalign.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> directionalign.o(.init_array)
</UL>
<P><STRONG><a name="[10d]"></a>__sti___12_Attitude_cpp_kf_gyrox</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, attitude.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___12_Attitude_cpp_kf_gyrox
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF::KF(float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> attitude.o(.init_array)
</UL>
<P><STRONG><a name="[10e]"></a>__sti___19_attitude_filter_cpp_5f28a12d</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, attitude_filter.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> attitude_filter.o(.init_array)
</UL>
<P><STRONG><a name="[1c5]"></a>sq(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, attitude_filter.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MahonyAHRS::MahonyAHRSUpdate(float, float, float, float, float, float, float)
</UL>

<P><STRONG><a name="[10f]"></a>__sti___11_mpu6500_cpp_b19e9125</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mpu6500.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> mpu6500.o(.init_array)
</UL>
<P><STRONG><a name="[110]"></a>__sti___15_DCM_EKF_IMU_cpp_4f1c7dfb</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dcm_ekf_imu.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dcm_ekf_imu.o(.init_array)
</UL>
<P><STRONG><a name="[11]"></a>can1ind(rt_device*, void*, long, unsigned long)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, can_com.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = can1ind(rt_device*, void*, long, unsigned long) &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can_com.o(.data)
</UL>
<P><STRONG><a name="[111]"></a>__sti___11_CAN_com_cpp_23b139a2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can_com.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> can_com.o(.init_array)
</UL>
<P><STRONG><a name="[77]"></a>rt_fast_uart_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fast_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fast_uart.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>rt_fast_uart_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fast_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fast_uart.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>rt_fast_uart_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fast_uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> fast_uart.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>rt_fast_uart_control</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, fast_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_fast_uart_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fast_uart.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>rt_fast_uart_read</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, fast_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_fast_uart_read &rArr; rt_ringbuffer_get &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fast_uart.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>rt_fast_uart_write</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, fast_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_fast_uart_write &rArr; fast_uart_tx &rArr; DMA_SetCurrDataCounter &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fast_uart.o(.text)
</UL>
<P><STRONG><a name="[2d8]"></a>strcasecmp_P(const char*, const char*)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = strcasecmp_P(const char*, const char*) &rArr; strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_object(const char*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_group(const char*, unsigned char, const AP_Param::GroupInfo*, ap_var_type*)
</UL>

<P><STRONG><a name="[2c5]"></a>strlen_P(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, parameter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strlen_P(const char*) &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_var_info()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_group_info(const AP_Param::GroupInfo*, unsigned char)
</UL>

<P><STRONG><a name="[2c4]"></a>pgm_read_byte(const void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_group(const char*, unsigned char, const AP_Param::GroupInfo*, ap_var_type*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_default_all()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_all()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load_all()
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_var_info(unsigned*, const AP_Param::GroupInfo**, unsigned char*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_var_info_group(const AP_Param::GroupInfo*, unsigned char, unsigned*, const AP_Param::GroupInfo**, unsigned char*) const
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_var_info()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_group_info(const AP_Param::GroupInfo*, unsigned char)
</UL>

<P><STRONG><a name="[2c7]"></a>pgm_read_pointer(const void*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, parameter.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find(const char*, ap_var_type*)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_object(const char*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_group(const char*, unsigned char, const AP_Param::GroupInfo*, ap_var_type*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_default_all()
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::save_all()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::load_all()
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_var_info(unsigned*, const AP_Param::GroupInfo**, unsigned char*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::find_var_info_group(const AP_Param::GroupInfo*, unsigned char, unsigned*, const AP_Param::GroupInfo**, unsigned char*) const
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AP_Param::check_var_info()
</UL>

<P><STRONG><a name="[2de]"></a>DEBUG_INFO</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DEBUG_INFO &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_used_ram
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_ls
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_file_pgs
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_remove
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_lseek
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_write
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_write_item
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_set_page_state
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_find_unuse_page
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_get_page_state
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_read
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_write
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_read
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_open
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_format
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fexist
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_close
</UL>

<P><STRONG><a name="[2df]"></a>_fs_page_read</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_checkout
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_read
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_read_item
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_find_unuse_page
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_get_page_state
</UL>

<P><STRONG><a name="[2e2]"></a>_fs_page_write</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_write
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2prom_read
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_checkout
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_write
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_write_item
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_set_page_state
</UL>

<P><STRONG><a name="[2e4]"></a>_fs_get_page_state</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _fs_get_page_state &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_file_pgs
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_remove
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_lseek
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_read
</UL>

<P><STRONG><a name="[2e5]"></a>_fs_find_unuse_page</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _fs_find_unuse_page &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_write
</UL>

<P><STRONG><a name="[2e6]"></a>_fs_set_page_state</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_remove
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2pfs_page_write
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_format
</UL>

<P><STRONG><a name="[2e7]"></a>_fs_read_item</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _fs_read_item &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_read
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_used_ram
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_ls
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_file_pgs
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_remove
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_open
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_fexist
</UL>

<P><STRONG><a name="[2e8]"></a>_fs_write_item</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = _fs_write_item &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_remove
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_format
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_close
</UL>

<P><STRONG><a name="[2e9]"></a>_e2pfs_page_read</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = _e2pfs_page_read &rArr; _fs_get_page_state &rArr; _fs_page_read &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_get_page_state
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_read
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_read
</UL>

<P><STRONG><a name="[2ea]"></a>_e2pfs_page_write</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = _e2pfs_page_write &rArr; _fs_set_page_state &rArr; _fs_page_write &rArr; e2prom_read &rArr; sEE_ReadBuffer &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_set_page_state
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_find_unuse_page
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fs_page_write
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEBUG_INFO
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_write
</UL>

<P><STRONG><a name="[2ed]"></a>_e2pfs_get_fd</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _e2pfs_get_fd
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_open
</UL>

<P><STRONG><a name="[2eb]"></a>_e2pfs_free_fd</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, e2pfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _e2pfs_free_fd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;e2pfs_close
</UL>

<P><STRONG><a name="[112]"></a>__sti___10_Gimbal_cpp_56172044</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = __sti___10_Gimbal_cpp_56172044 &rArr; Gimbal::Gimbal() &rArr; Time_point::Time_point() &rArr; SPRain_TIMER::SPRain_TIMER(unsigned char) &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGetMfParaN(const char*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal::Gimbal()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gimbal.o(.init_array)
</UL>
<P><STRONG><a name="[367]"></a>main_time_init()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main_time_init() &rArr; SPRain_TIMER::setPeriod(unsigned) &rArr; SPRain_TIMER::setPrescaleFactor(unsigned, unsigned short) &rArr; TIM_PrescalerConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPeriod(unsigned)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::refresh()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::resume()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::pause()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::attachInterrupt(unsigned char, void(*)())
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setCounterMode(unsigned short)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::setPriority(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[113]"></a>__sti___15_application_cpp_5d70578a</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __sti___15_application_cpp_5d70578a &rArr; FuzzyLogic::fisGetMfParaN(const char*) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGetMfParaN(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.init_array)
</UL>
<P><STRONG><a name="[114]"></a>__sti___10_timers_cpp_5ee47f80</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __sti___10_timers_cpp_5ee47f80 &rArr; SPRain_TIMER::SPRain_TIMER(unsigned char) &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPRain_TIMER::SPRain_TIMER(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.init_array)
</UL>
<P><STRONG><a name="[115]"></a>__sti___13_bgc_param_cpp_6696f92c</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, bgc_param.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __sti___13_bgc_param_cpp_6696f92c &rArr; FuzzyLogic::fisGetMfParaN(const char*) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGetMfParaN(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bgc_param.o(.init_array)
</UL>
<P><STRONG><a name="[116]"></a>__sti___13_scheduler_cpp_beaa0f50</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __sti___13_scheduler_cpp_beaa0f50 &rArr; FuzzyLogic::fisGetMfParaN(const char*) &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FuzzyLogic::fisGetMfParaN(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scheduler.o(.init_array)
</UL>
<P><STRONG><a name="[117]"></a>__sti___11_att2mot_cpp_kf</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, att2mot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___11_att2mot_cpp_kf
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KF::KF(float, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> att2mot.o(.init_array)
</UL>
<P><STRONG><a name="[3d5]"></a>bxcan_init</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bxcan_init &rArr; CAN_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[3d7]"></a>bxcan1_hw_init</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = bxcan1_hw_init &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[3d9]"></a>bxcan_enter_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bxcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_baud_rate
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_privmode
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_mode
</UL>

<P><STRONG><a name="[3da]"></a>bxcan_exit_init</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, bxcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_baud_rate
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_privmode
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_mode
</UL>

<P><STRONG><a name="[3d8]"></a>bxcan_set_mode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bxcan_set_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_exit_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_enter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[3db]"></a>bxcan_set_privmode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bxcan_set_privmode
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_exit_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_enter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[3dc]"></a>bxcan_set_baud_rate</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bxcan_set_baud_rate
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_exit_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_enter_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[3dd]"></a>bxmodifyfilter</STRONG> (Thumb, 740 bytes, Stack size 64 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bxmodifyfilter &rArr; CAN_FilterInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfilter
</UL>

<P><STRONG><a name="[3df]"></a>setfilter</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = setfilter &rArr; bxmodifyfilter &rArr; CAN_FilterInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxmodifyfilter
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[aa]"></a>configure</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = configure &rArr; bxcan_init &rArr; CAN_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan1_hw_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxcan.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>control</STRONG> (Thumb, 680 bytes, Stack size 32 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = control &rArr; setfilter &rArr; bxmodifyfilter &rArr; CAN_FilterInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setfilter
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_baud_rate
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_privmode
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bxcan_set_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxcan.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>sendmsg</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sendmsg &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxcan.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>recvmsg</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, bxcan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = recvmsg &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bxcan.o(.constdata)
</UL>
<P><STRONG><a name="[3e0]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bxcan.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control
</UL>

<P><STRONG><a name="[3e8]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>

<P><STRONG><a name="[3e7]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>

<P><STRONG><a name="[7e]"></a>rt_can_init</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_can_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[3e5]"></a>_can_int_rx</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _can_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_read
</UL>

<P><STRONG><a name="[3e9]"></a>_can_int_tx</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _can_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
</UL>

<P><STRONG><a name="[3ec]"></a>_can_int_tx_priv</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _can_int_tx_priv &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_write
</UL>

<P><STRONG><a name="[7f]"></a>rt_can_open</STRONG> (Thumb, 702 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rt_can_open &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[80]"></a>rt_can_close</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_can_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>rt_can_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rt_can_read &rArr; _can_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[82]"></a>rt_can_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_can_write &rArr; _can_int_tx_priv &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx_priv
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[83]"></a>rt_can_control</STRONG> (Thumb, 806 bytes, Stack size 56 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_can_control &rArr; rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>cantimeout</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cantimeout &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> can.o(.text)
</UL>
<P><STRONG><a name="[3ed]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_open
</UL>

<P><STRONG><a name="[3e6]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_can_control
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_tx
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_can_int_rx
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_can_isr
</UL>

<P><STRONG><a name="[85]"></a>cpu_usage_idle_hook</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, idle_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cpu_usage_idle_hook &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle_thread.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>_led_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, led.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> led.o(.text)
</UL>
<P><STRONG><a name="[87]"></a>_led_open</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _led_open &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>_led_close</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _led_close &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.text)
</UL>
<P><STRONG><a name="[89]"></a>_led_read</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _led_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.text)
</UL>
<P><STRONG><a name="[8a]"></a>_led_write</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _led_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.text)
</UL>
<P><STRONG><a name="[8b]"></a>_spi_bus_device_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _spi_bus_device_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>_spi_bus_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>_spi_bus_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>_spi_bus_device_control</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _spi_bus_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_spidev_device_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _spidev_device_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>_spidev_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>_spidev_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>_spidev_device_control</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _spidev_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[40a]"></a>DMA_Configuration</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32_hw_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DMA_Configuration &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCmdStatus
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[15]"></a>configure</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, stm32_hw_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = configure &rArr; DMA_Configuration &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_hw_spi.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>xfer</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32_hw_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = xfer &rArr; DMA_Configuration &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_hw_spi.o(.data)
</UL>
<P><STRONG><a name="[430]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_nonmuxed_irq
</UL>

<P><STRONG><a name="[416]"></a>timer_disable_irq</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = timer_disable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_detach_interrupt
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_mode
</UL>

<P><STRONG><a name="[436]"></a>timer_cc_enable</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_compare_mode
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_mode
</UL>

<P><STRONG><a name="[418]"></a>timer_oc_set_mode</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = timer_oc_set_mode &rArr; TIM_SelectOCxM &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4FastConfig
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3FastConfig
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2FastConfig
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1FastConfig
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC4Ref
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC3Ref
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC2Ref
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC1Ref
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerDefaultConfig
</UL>

<P><STRONG><a name="[93]"></a>TimerDefaultConfig</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = TimerDefaultConfig &rArr; timer_oc_set_mode &rArr; TIM_SelectOCxM &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_oc_set_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f40x_timer.o(.text)
</UL>
<P><STRONG><a name="[42f]"></a>enable_nonmuxed_irq</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = enable_nonmuxed_irq &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_irq
</UL>

<P><STRONG><a name="[432]"></a>enable_irq</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = enable_irq &rArr; enable_nonmuxed_irq &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_nonmuxed_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_attach_interrupt
</UL>

<P><STRONG><a name="[434]"></a>disable_channel</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = disable_channel &rArr; timer_detach_interrupt &rArr; timer_disable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_detach_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_mode
</UL>

<P><STRONG><a name="[435]"></a>pwm_mode</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pwm_mode &rArr; timer_disable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cc_enable
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_mode
</UL>

<P><STRONG><a name="[437]"></a>output_compare_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = output_compare_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cc_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_set_mode
</UL>

<P><STRONG><a name="[431]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_nonmuxed_irq
</UL>

<P><STRONG><a name="[433]"></a>timer_enable_irq</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f40x_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = timer_enable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_attach_interrupt
</UL>

<P><STRONG><a name="[af]"></a>stm32_configure</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = stm32_configure &rArr; USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>stm32_control</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = stm32_control &rArr; USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>stm32_putc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>stm32_getc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[43a]"></a>RCC_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RCC_Configuration &rArr; RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[43b]"></a>GPIO_Configuration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = GPIO_Configuration &rArr; Set_pinMode &rArr; timer_set_mode &rArr; disable_channel &rArr; timer_detach_interrupt &rArr; timer_disable_irq &rArr; TIM_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[43c]"></a>NVIC_Configuration</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_hw_usart_init
</UL>

<P><STRONG><a name="[448]"></a>stm32f4xx_sdio_send_command</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = stm32f4xx_sdio_send_command &rArr; SD_LowLevel_DMA_RxConfig &rArr; DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_order
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_RxConfig
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_LowLevel_DMA_TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_process_next
</UL>

<P><STRONG><a name="[44e]"></a>stm32f4xx_sdio_process_next</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = stm32f4xx_sdio_process_next &rArr; mmcsd_req_complete &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_req_complete
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_send_command
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_request
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_completed_command
</UL>

<P><STRONG><a name="[450]"></a>stm32f4xx_sdio_completed_command</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = stm32f4xx_sdio_completed_command &rArr; stm32f4xx_sdio_process_next &rArr; mmcsd_req_complete &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_process_next
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[b3]"></a>stm32f4xx_sdio_request</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = stm32f4xx_sdio_request &rArr; stm32f4xx_sdio_process_next &rArr; mmcsd_req_complete &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32f4xx_sdio_process_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_sd.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>stm32f4xx_sdio_set_iocfg</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = stm32f4xx_sdio_set_iocfg &rArr; SDIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_sd.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>stm32f4xx_sdio_enable_sdio_irq</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, stm32f4xx_sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = stm32f4xx_sdio_enable_sdio_irq &rArr; SDIO_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_sd.o(.constdata)
</UL>
<P><STRONG><a name="[470]"></a>copyfile</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[472]"></a>copydir</STRONG> (Thumb, 250 bytes, Stack size 304 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[473]"></a>_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[4ab]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[526]"></a>TI4_Config</STRONG> (Thumb, 128 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[525]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[524]"></a>TI2_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[523]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[557]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[96]"></a>rt_thread_idle_entry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text)
</UL>
<P><STRONG><a name="[564]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[56a]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[568]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[56b]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>

<P><STRONG><a name="[584]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[56d]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[56f]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>

<P><STRONG><a name="[579]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>

<P><STRONG><a name="[59a]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[599]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[5a0]"></a>plug_holes</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[5a3]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[5a4]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[5a6]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, scheduler_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[5a7]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[5af]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[5b1]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[97]"></a>rt_thread_exit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[5b2]"></a>_rt_thread_init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[5bf]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[5b8]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[5ba]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_timer_list_next_timeout
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timer_entry
</UL>

<P><STRONG><a name="[5bc]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[98]"></a>rt_thread_timer_entry</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_thread_timer_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_soft_timer_check
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[5b9]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[5bb]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[5c2]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[5c6]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>

<P><STRONG><a name="[5c4]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[5c7]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>

<P><STRONG><a name="[5cc]"></a>rt_ringbuffer_status</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ringbuffer_1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar_force
<LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_data_len
</UL>

<P><STRONG><a name="[5cb]"></a>rt_ringbuffer_data_len</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ringbuffer_1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ringbuffer_data_len
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_get
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_getchar
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_putchar
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ringbuffer_put_force
</UL>

<P><STRONG><a name="[99]"></a>rt_serial_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>rt_serial_open</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[9b]"></a>rt_serial_close</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[9c]"></a>rt_serial_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[9d]"></a>rt_serial_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[9e]"></a>rt_serial_control</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[5d3]"></a>_serial_poll_rx</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[5d6]"></a>_serial_poll_tx</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[5d1]"></a>_serial_int_rx</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[5d4]"></a>_serial_int_tx</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[5d2]"></a>_serial_dma_rx</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_dma_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[5d5]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[5df]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, block_dev.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[5d7]"></a>rt_mmcsd_req_blk</STRONG> (Thumb, 344 bytes, Stack size 192 bytes, block_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_write
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_read
</UL>

<P><STRONG><a name="[9f]"></a>rt_mmcsd_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>rt_mmcsd_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(.text)
</UL>
<P><STRONG><a name="[a1]"></a>rt_mmcsd_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, block_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(.text)
</UL>
<P><STRONG><a name="[a4]"></a>rt_mmcsd_control</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, block_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_mmcsd_control &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(.text)
</UL>
<P><STRONG><a name="[a2]"></a>rt_mmcsd_read</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, block_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rt_mmcsd_read &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(.text)
</UL>
<P><STRONG><a name="[a3]"></a>rt_mmcsd_write</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, block_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rt_mmcsd_write &rArr; rt_mmcsd_req_blk &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_req_blk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> block_dev.o(.text)
</UL>
<P><STRONG><a name="[5dd]"></a>mmcsd_set_blksize</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, block_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = mmcsd_set_blksize &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mmcsd_blk_probe
</UL>

<P><STRONG><a name="[5e1]"></a>mmcsd_delay_ms</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[5e3]"></a>GET_BITS</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
</UL>

<P><STRONG><a name="[5e2]"></a>mmcsd_parse_csd</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mmcsd_parse_csd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5e4]"></a>mmc_get_ext_csd</STRONG> (Thumb, 162 bytes, Stack size 112 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
</UL>

<P><STRONG><a name="[5e5]"></a>mmc_parse_ext_csd</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mmc_parse_ext_csd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5e6]"></a>mmc_switch</STRONG> (Thumb, 78 bytes, Stack size 72 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = mmc_switch &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[5e7]"></a>mmc_compare_ext_csds</STRONG> (Thumb, 566 bytes, Stack size 24 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
</UL>

<P><STRONG><a name="[5e8]"></a>mmc_select_bus_width</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_compare_ext_csds
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_switch
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5eb]"></a>mmc_set_card_addr</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mmc_set_card_addr &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_mmc_init_card
</UL>

<P><STRONG><a name="[5ec]"></a>mmcsd_mmc_init_card</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, mmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mmcsd_mmc_init_card &rArr; mmc_select_bus_width &rArr; mmc_compare_ext_csds &rArr; mmc_get_ext_csd &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_send_op_cond
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_set_card_addr
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_select_bus_width
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_parse_ext_csd
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmc_get_ext_csd
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_mmc
</UL>

<P><STRONG><a name="[5f8]"></a>mmcsd_delay_ms</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
</UL>

<P><STRONG><a name="[5fb]"></a>_mmcsd_select_card</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = _mmcsd_select_card &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_deselect_cards
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
</UL>

<P><STRONG><a name="[5fd]"></a>mmcsd_power_up</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = mmcsd_power_up &rArr; mmcsd_delay_ms &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fls
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[5ff]"></a>mmcsd_power_off</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mmcsd_power_off &rArr; mmcsd_set_iocfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_detect
</UL>

<P><STRONG><a name="[5fe]"></a>fls</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mmcsd_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
</UL>

<P><STRONG><a name="[5fa]"></a>mmcsd_set_iocfg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, mmcsd_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mmcsd_set_iocfg
</UL>
<BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_chip_select
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_off
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_power_up
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_voltage
</UL>

<P><STRONG><a name="[609]"></a>GET_BITS</STRONG> (Thumb, 94 bytes, Stack size 28 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_scr
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
</UL>

<P><STRONG><a name="[608]"></a>mmcsd_parse_csd</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mmcsd_parse_csd &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[60a]"></a>mmcsd_parse_scr</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = mmcsd_parse_scr &rArr; GET_BITS
</UL>
<BR>[Calls]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_BITS
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[60b]"></a>mmcsd_switch</STRONG> (Thumb, 302 bytes, Stack size 120 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = mmcsd_switch &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_data_timeout
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_request
</UL>
<BR>[Called By]<UL><LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_sd_init_card
</UL>

<P><STRONG><a name="[60c]"></a>mmcsd_app_cmd</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_cmd
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_cmd
</UL>

<P><STRONG><a name="[611]"></a>mmcsd_sd_init_card</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, sd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = mmcsd_sd_init_card &rArr; mmcsd_send_app_op_cond &rArr; mmcsd_send_app_cmd &rArr; mmcsd_app_cmd &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_scr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_app_set_bus_width
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_switch
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_scr
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_parse_csd
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_if_cond
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_send_app_op_cond
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_go_idle
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_csd
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_cid
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_all_get_cid
</UL>
<BR>[Called By]<UL><LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sd
</UL>

<P><STRONG><a name="[62a]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_unregister_driver
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_driver
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[615]"></a>sdio_max_block_size</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_rw_extended_block
</UL>

<P><STRONG><a name="[620]"></a>sdio_read_cccr</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = sdio_read_cccr &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[623]"></a>cistpl_funce_func0</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = cistpl_funce_func0
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[622]"></a>cistpl_funce_func</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cistpl_funce_func
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>

<P><STRONG><a name="[621]"></a>sdio_read_cis</STRONG> (Thumb, 470 bytes, Stack size 48 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cistpl_funce_func0
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
</UL>

<P><STRONG><a name="[625]"></a>sdio_read_fbr</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = sdio_read_fbr &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
</UL>

<P><STRONG><a name="[626]"></a>sdio_initialize_function</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_fbr
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[627]"></a>sdio_set_highspeed</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sdio_set_highspeed &rArr; sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[628]"></a>sdio_set_bus_wide</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sdio_set_bus_wide &rArr; sdio_io_writeb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_writeb
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_width
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[62c]"></a>sdio_match_card</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_driver
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[629]"></a>sdio_register_card</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = sdio_register_card &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_card
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_card
</UL>

<P><STRONG><a name="[62d]"></a>sdio_init_card</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = sdio_init_card &rArr; sdio_initialize_function &rArr; sdio_read_cis &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_free_cis
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_bus_wide
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_set_highspeed
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_initialize_function
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cis
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_read_cccr
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_get_card_addr
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_send_op_cond
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_spi_use_crc
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_clock
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_set_bus_mode
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_select_card
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_sdio
</UL>

<P><STRONG><a name="[a5]"></a>sdio_irq_thread</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = sdio_irq_thread &rArr; sdio_io_readb &rArr; sdio_io_rw_direct &rArr; mmcsd_send_cmd &rArr; mmcsd_send_request &rArr; rt_sem_take &rArr; rt_timer_start &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_io_readb
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_unlock
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmcsd_host_lock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdio.o(.text)
</UL>
<P><STRONG><a name="[62e]"></a>sdio_irq_thread_create</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_attach_irq
</UL>

<P><STRONG><a name="[62f]"></a>sdio_irq_thread_delete</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_detach_irq
</UL>

<P><STRONG><a name="[635]"></a>sdio_match_driver</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_match_card
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_unregister_driver
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_driver
</UL>

<P><STRONG><a name="[638]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdio_init
</UL>

<P><STRONG><a name="[62b]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_unregister_driver
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_driver
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_register_card
</UL>

<P><STRONG><a name="[63d]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[639]"></a>_list_thread</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[63a]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[63b]"></a>_list_sem</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[63e]"></a>_list_event</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[63f]"></a>_list_mutex</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
</UL>

<P><STRONG><a name="[640]"></a>_list_mailbox</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[641]"></a>_list_msgqueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</UL>

<P><STRONG><a name="[642]"></a>_list_mempool</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
</UL>

<P><STRONG><a name="[643]"></a>_list_timer</STRONG> (Thumb, 1044 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[644]"></a>_list_device</STRONG> (Thumb, 82 bytes, Stack size 104 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _list_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[646]"></a>str_is_prefix</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[647]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[63c]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[648]"></a>finsh_compile</STRONG> (Thumb, 5712 bytes, Stack size 8 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = finsh_compile &rArr;  finsh_compile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>

<P><STRONG><a name="[64a]"></a>finsh_type_check</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>

<P><STRONG><a name="[64f]"></a>finsh_block_insert</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[64e]"></a>finsh_block_remove</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[653]"></a>finsh_block_split</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[650]"></a>finsh_block_merge</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_block_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[651]"></a>finsh_heap_gc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[665]"></a>make_sys_node</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = make_sys_node
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[666]"></a>proc_param_list</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = proc_param_list &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[669]"></a>proc_expr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = proc_expr &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[66a]"></a>proc_identifier</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[66b]"></a>proc_primary_expr</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + In Cycle
<LI>Call Chain = proc_primary_expr &rArr;  proc_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>
<BR>[Called By]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[66c]"></a>proc_postfix_expr</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = proc_postfix_expr &rArr; proc_primary_expr &rArr;  proc_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[66d]"></a>proc_unary_expr</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = proc_unary_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
</UL>
<BR>[Called By]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[66f]"></a>proc_type</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_type &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[66e]"></a>proc_cast_expr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[670]"></a>proc_multiplicative_expr</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[671]"></a>proc_additive_expr</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
</UL>

<P><STRONG><a name="[672]"></a>proc_shift_expr</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
</UL>

<P><STRONG><a name="[673]"></a>proc_and_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
</UL>

<P><STRONG><a name="[674]"></a>proc_exclusive_or_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
</UL>

<P><STRONG><a name="[675]"></a>proc_inclusive_or_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = proc_inclusive_or_expr &rArr; proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>

<P><STRONG><a name="[667]"></a>proc_assign_expr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + In Cycle
<LI>Call Chain = proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
</UL>

<P><STRONG><a name="[676]"></a>proc_variable_decl</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[678]"></a>proc_expr_statement</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = proc_expr_statement &rArr; proc_expr &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[67d]"></a>token_prev_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_token.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[67b]"></a>token_next_char</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[67e]"></a>token_spec_number</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_spec_number
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[67c]"></a>token_proc_number</STRONG> (Thumb, 288 bytes, Stack size 160 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_spec_number
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[67f]"></a>token_proc_escape</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_proc_escape &rArr; token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
</UL>

<P><STRONG><a name="[680]"></a>token_proc_string</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = token_proc_string &rArr; token_proc_escape &rArr; token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[681]"></a>token_proc_char</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = token_proc_char &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[683]"></a>token_match_name</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = token_match_name
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[685]"></a>token_trim_space</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_trim_space &rArr; token_next_char &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[686]"></a>token_run</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
</UL>

<P><STRONG><a name="[a6]"></a>finsh_rx_ind</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[68e]"></a>shell_auto_complete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = shell_auto_complete &rArr; list_prefix &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[694]"></a>shell_handle_history</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[695]"></a>shell_push_history</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shell_push_history
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[6b5]"></a>is_zero(float)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, matrix_alg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse4x4(float*, float*)
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inverse3x3(float*, float*)
</UL>

<P><STRONG><a name="[6bc]"></a>sq(float)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, quaternion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::length() const
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_fast(const Vector3&lang;float&rang;&)
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::from_axis_angle_fast(const Vector3&lang;float&rang;&, float)
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::to_axis_angle(Vector3&lang;float&rang;&)
</UL>

<P><STRONG><a name="[6cc]"></a>pythagorous3(float, float, float)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vector3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = pythagorous3(float, float, float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vector3&lang;float&rang;::length() const
</UL>

<P><STRONG><a name="[6ce]"></a>filter_fir_f32_free(_filter_fir_f32_t*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = filter_fir_f32_free(_filter_fir_f32_t*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_deinit(_filter_fir_f32_t*)
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;filter_fir_f32_init(unsigned, const float*, float*, unsigned)
</UL>

<P><STRONG><a name="[72a]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[71f]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[a8]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
